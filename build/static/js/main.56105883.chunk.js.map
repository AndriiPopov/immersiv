{"version":3,"sources":["services/auth.service.js","services/constant.service.js","api/axios.config.js","layout/Layout.jsx","helpers/history.js","helpers/WithAxios.js","context/UserContext.jsx","services/admin.service.js","pages/Admins.jsx","pages/AnalyticClient.jsx","pages/Constants.jsx","components/ProjectFormFields.jsx","pages/CreateProject.jsx","components/ForgotPasswordModal.jsx","pages/Login.jsx","pages/ProjectDetails.jsx","pages/Projects.jsx","services/property.service.js","components/ProjectView/Components/PropertiesTable.jsx","pages/Properties.jsx","pages/PropertiesAdmin.jsx","pages/PropertiesClient.jsx","App.js","reportWebVitals.js","index.js","services/project.service.js"],"names":["AuthService","email","password","a","API","post","data","token","localStorage","removeItem","password2","username","get","ConstantService","put","axios","create","baseURL","withCredentials","interceptors","request","use","req","JSON","parse","getItem","headers","error","Promise","reject","Layout","children","title","loading","description","isProject","name","content","style","flex","display","createBrowserHistory","WithAxios","useUser","setIsLoggedIn","setUserData","setAuthData","isLoggedIn","useMemo","response","originalRequest","config","status","url","resolve","history","push","_retry","res","setItem","stringify","UserContext","createContext","UserProvider","useState","authData","useEffect","getTokenData","decoded","jwt_decode","Provider","value","setUserState","setUserInfo","logout","authService","context","useContext","undefined","Error","id","delete","Admins","props","formRef","useRef","admins","setAdmins","editModalOpen","setEditModalOpen","navigate","useNavigate","adminService","getAdmin","then","super","projectId","onFinish","values","createAdmin","toast","success","current","resetFields","deleteAdmin","height","background","onBack","boxShadow","overflow","padding","maxWidth","width","margin","onClick","visible","onCancel","footer","ref","Item","rules","required","message","type","placeholder","htmlType","itemLayout","dataSource","sort","b","renderItem","admin","actions","overlay","onConfirm","okText","cancelText","danger","trigger","MoreOutlined","fontSize","borderBottom","paddingLeft","Meta","locked","AnalyticClient","useParams","toString","authOptions","clientId","renderCharts","gapi","viewId","showPageViews","showUsers","Constants","constants","setConstants","constantService","getConstant","setFieldsValue","catch","saveConstant","initialValues","ProjectFormFields","label","min","valuePropName","wrapperCol","offset","span","CreateProject","projectService","createProject","labelCol","ForgotPasswordModal","isOpen","setIsOpen","forgotPassword","prefix","UserOutlined","className","Login","isLoading","setIsLoading","redirectToReferrer","setRedirectToReferrer","login","setTimeout","Title","textAlign","marginBottom","Password","LockOutlined","ProjectDetails","project","setProject","getProject","saveProject","Projects","projects","setProjects","openDrawer","setOpenDrawer","deleteProject","setFeatured","featured","backIcon","MenuOutlined","Divider","avatar","StarFilled","published","EyeFilled","EyeInvisibleFilled","placement","onClose","mode","item","key","activeKey","selectedKeys","PropertiesTable","properties","setProperties","transferOrientationToString","Option","Select","onChange","propertyService","saveStatus","Availability","deleteProperty","propertyId","columns","dataIndex","sorter","Name","sortDirections","render","property","onFilter","record","indexOf","Surface","Price","BedroomsCount","BathroomsCount","orientation","Orientation","_","flexDirection","Properties","getProperty","saveProperty","transferOrientationToObject","createProperty","o","N","S","E","W","readOnly","PropertiesAdmin","PropertiesClient","Home","lazy","Project","ResetPassword","App","fallback","position","exact","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","ProjectService"],"mappings":"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","file":"static/js/main.56105883.chunk.js","sourcesContent":["import API from \"api/axios.config\";\r\n\r\nclass AuthService {\r\n  async login(email, password) {\r\n    const { data } = await API.post(\"/auth/login\", {\r\n      email,\r\n      password,\r\n    });\r\n    return data;\r\n  }\r\n\r\n  async googleLogin(token) {\r\n    const { data } = await API.post(\"/auth/google\", {\r\n      token,\r\n    });\r\n    return data;\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem(\"user\");\r\n    localStorage.removeItem('token')\r\n    localStorage.removeItem('expiresAt')\r\n  }\r\n\r\n  forgotPassword(email) {\r\n    return API.post(\"/auth/forgot-password\", {\r\n      email,\r\n    });\r\n  }\r\n\r\n  checkToken(token, email) {\r\n    return API.post(\"auth/check-token\", {\r\n      token,\r\n      email,\r\n    });\r\n  }\r\n\r\n  resetPassword(token, email, password, password2) {\r\n    return API.post(\"auth/reset-password\", {\r\n      token,\r\n      email,\r\n      password,\r\n      password2,\r\n    });\r\n  }\r\n\r\n  register(username, email, password) {\r\n    return API.post(\"auth/signup\", {\r\n      username,\r\n      email,\r\n      password,\r\n    });\r\n  }\r\n\r\n  getCurrentUser() {\r\n    return API.get(\"/users/profile\");\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import API from \"api/axios.config\";\r\n\r\nclass ConstantService {\r\n    getConstant() {\r\n        return API.get(`/constant`);\r\n    }\r\n    saveConstant(data) {\r\n        return API.put(`/constant`, data);\r\n    }\r\n}\r\n\r\nexport default new ConstantService();\r\n","import axios from \"axios\";\r\n\r\nconst baseURL =\r\n    process.env.NODE_ENV === \"production\"\r\n        ? \"https://tour.immersiv.com.au/api\"\r\n        : \"http://localhost:5000/api\";\r\n\r\nconst API = axios.create({\r\n    baseURL,\r\n    withCredentials: true,\r\n});\r\n\r\nAPI.interceptors.request.use(\r\n    function (req) {\r\n        const token = JSON.parse(localStorage.getItem(\"token\"));\r\n        if (token) req.headers[\"auth-token\"] = token;\r\n        return req;\r\n    },\r\n    function (error) {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default API;\r\n","import React from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\n\r\nconst Layout = ({ children, title, loading, description, isProject }) => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>{title || \"Home\"} | IMMERSIV </title>\r\n                <meta\r\n                    name=\"description\"\r\n                    content={\r\n                        description ||\r\n                        \"IMMERSIV is a digital interactive sales experience for unbuilt environments\"\r\n                    }\r\n                />\r\n            </Helmet>\r\n\r\n            {loading ? null : (\r\n                <div style={{ flex: 1, display: isProject ? \"flex\" : \"block\" }}>\r\n                    {children}\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Layout;\r\n","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();\n","import { useMemo } from \"react\";\nimport API from \"api/axios.config\";\nimport { useUser } from \"context/UserContext\";\nimport history from \"helpers/history\";\n\nconst WithAxios = ({ children }) => {\n    const { setIsLoggedIn, setUserData, setAuthData, isLoggedIn } = useUser();\n\n    useMemo(() => {\n        if (isLoggedIn) {\n            API.interceptors.response.use(\n                (response) => response,\n                async (error) => {\n                    const originalRequest = error.config;\n                    if (\n                        error.response.status === 401 &&\n                        originalRequest.url === \"/auth/refresh-token\"\n                    ) {\n                        return new Promise((resolve, reject) => {\n                            setIsLoggedIn(false);\n                            setAuthData(null);\n                            setUserData(null);\n                            history.push(\"/login\");\n                            reject(error);\n                        });\n                    }\n\n                    if (\n                        error.response.status === 401 &&\n                        !originalRequest._retry\n                    ) {\n                        try {\n                            originalRequest._retry = true;\n                            const res = await API.post(\"/auth/refresh-token\");\n                            localStorage.setItem(\n                                \"token\",\n                                JSON.stringify(res.data.token)\n                            );\n                            return API(originalRequest);\n                        } catch (error) {\n                            localStorage.removeItem(\"token\");\n                            setIsLoggedIn(false);\n                            setAuthData(null);\n                            setUserData(null);\n                            history.push(\"/login\");\n                        }\n                    }\n                    return Promise.reject(error);\n                }\n            );\n        }\n    }, [isLoggedIn, setAuthData, setIsLoggedIn, setUserData]);\n\n    return children;\n};\n\nexport default WithAxios;\n","import WithAxios from \"helpers/WithAxios\";\r\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport authService from \"services/auth.service\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nconst UserContext = createContext();\r\n\r\nconst UserProvider = ({ children }) => {\r\n    const [authData, setAuthData] = useState({\r\n        token: \"\",\r\n    });\r\n\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem(\"token\")) {\r\n            setIsLoggedIn(true);\r\n            setAuthData(() =>\r\n                getTokenData(JSON.parse(localStorage.getItem(\"token\")).token)\r\n            );\r\n        }\r\n    }, []);\r\n\r\n    const getTokenData = (token) => {\r\n        if (token) {\r\n            const decoded = jwt_decode(token);\r\n            return {\r\n                ...decoded,\r\n                token,\r\n            };\r\n        } else\r\n            return {\r\n                token: \"\",\r\n            };\r\n    };\r\n\r\n    const setUserInfo = (data) => {\r\n        const { token } = data;\r\n\r\n        setIsLoggedIn(true);\r\n\r\n        setAuthData(() => getTokenData(token));\r\n        localStorage.setItem(\"token\", JSON.stringify(token));\r\n    };\r\n\r\n    const logout = () => {\r\n        setAuthData(null);\r\n        setIsLoggedIn(false);\r\n        authService.logout();\r\n    };\r\n\r\n    return (\r\n        <UserContext.Provider\r\n            value={{\r\n                setUserState: (data) => setUserInfo(data),\r\n                logout,\r\n                isLoggedIn,\r\n                setIsLoggedIn,\r\n                authData,\r\n                setAuthData,\r\n            }}\r\n        >\r\n            <WithAxios>{children}</WithAxios>\r\n        </UserContext.Provider>\r\n    );\r\n};\r\n\r\nconst useUser = () => {\r\n    const context = useContext(UserContext);\r\n\r\n    if (context === undefined) {\r\n        throw new Error(\"useUser must be used within UserProvider\");\r\n    }\r\n    return context;\r\n};\r\n\r\nexport { UserProvider, useUser };\r\n","import API from \"api/axios.config\";\r\n\r\nclass AdminService {\r\n    getAdmin() {\r\n        return API.get(`/admins`);\r\n    }\r\n\r\n    createAdmin(data) {\r\n        return API.post(`/admins`, data);\r\n    }\r\n\r\n    deleteAdmin(id) {\r\n        return API.delete(`/admins/${id}`);\r\n    }\r\n}\r\n\r\nexport default new AdminService();\r\n","import LayoutHOC from \"layout/Layout\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport {\r\n    Button,\r\n    Dropdown,\r\n    Form,\r\n    Input,\r\n    Layout,\r\n    List,\r\n    Menu,\r\n    Modal,\r\n    PageHeader,\r\n    Popconfirm,\r\n} from \"antd\";\r\nimport { Content } from \"antd/lib/layout/layout\";\r\nimport { MoreOutlined } from \"@ant-design/icons\";\r\nimport { useUser } from \"context/UserContext\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport toast from \"react-hot-toast\";\r\nimport adminService from \"services/admin.service\";\r\n\r\nconst Admins = (props) => {\r\n    const formRef = useRef(null);\r\n    const [admins, setAdmins] = useState(null);\r\n    const [editModalOpen, setEditModalOpen] = useState(null);\r\n    const { isLoggedIn, authData, logout } = useUser();\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        adminService.getAdmin().then((response) => {\r\n            setAdmins(response.data);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            logout();\r\n            navigate(\"/login\");\r\n            return null;\r\n        }\r\n\r\n        if (!authData?.super) {\r\n            if (authData?.projectId) {\r\n                navigate(`/p-admin/${authData.projectId}`);\r\n                return null;\r\n            } else {\r\n                logout();\r\n                navigate(\"/login\");\r\n                return null;\r\n            }\r\n        }\r\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\r\n\r\n    const onFinish = async (values) => {\r\n        const response = await adminService.createAdmin(values);\r\n        if (response.data) {\r\n            toast.success(\"Saved\");\r\n            setAdmins(response.data);\r\n            setEditModalOpen(null);\r\n            if (formRef.current) formRef.current.resetFields();\r\n        }\r\n    };\r\n\r\n    const deleteAdmin = async (id) => {\r\n        const response = await adminService.deleteAdmin(id);\r\n        if (response.data) setAdmins(response.data);\r\n    };\r\n\r\n    return (\r\n        <LayoutHOC loading={!admins}>\r\n            <Layout\r\n                style={{\r\n                    height: \"100%\",\r\n                    display: \"flex\",\r\n                    flex: 1,\r\n                    background: \"white\",\r\n                }}\r\n            >\r\n                <PageHeader\r\n                    onBack={() => navigate(`/admin`)}\r\n                    title={`Admins`}\r\n                    style={{ boxShadow: \"1px 1px 10px 1px #ccc\" }}\r\n                />\r\n\r\n                <Content\r\n                    style={{\r\n                        flex: 1,\r\n                        overflow: \"auto\",\r\n                        padding: \"16px\",\r\n                        maxWidth: \"800px\",\r\n                        width: \"100%\",\r\n                        margin: \"auto\",\r\n                    }}\r\n                >\r\n                    <Button\r\n                        onClick={() => setEditModalOpen({})}\r\n                        style={{ margin: \"16px\" }}\r\n                    >\r\n                        Add admin\r\n                    </Button>\r\n                    <Modal\r\n                        visible={!!editModalOpen}\r\n                        onCancel={() => setEditModalOpen(null)}\r\n                        footer={null}\r\n                    >\r\n                        <Form\r\n                            name=\"normal_login\"\r\n                            onFinish={onFinish}\r\n                            style={{\r\n                                padding: \" 16px\",\r\n                                maxWidth: \"500px\",\r\n                                margin: \"auto\",\r\n                            }}\r\n                            ref={formRef}\r\n                        >\r\n                            <Form.Item\r\n                                name=\"email\"\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: \"Please add name!\",\r\n                                        type: \"email\",\r\n                                    },\r\n                                ]}\r\n                            >\r\n                                <Input placeholder=\"Email\" />\r\n                            </Form.Item>\r\n\r\n                            <Form.Item>\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    htmlType=\"submit\"\r\n                                    style={{ width: \"100%\" }}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Modal>\r\n                    {admins && (\r\n                        <List\r\n                            itemLayout=\"horizontal\"\r\n                            dataSource={admins.sort((a, b) =>\r\n                                a.name > b.name ? 1 : -1\r\n                            )}\r\n                            renderItem={(admin) => (\r\n                                <List.Item\r\n                                    actions={[\r\n                                        <Dropdown\r\n                                            overlay={\r\n                                                <Menu>\r\n                                                    <Popconfirm\r\n                                                        title=\"Are you sure to delete this admin?\"\r\n                                                        onConfirm={() =>\r\n                                                            deleteAdmin(\r\n                                                                admin.email\r\n                                                            )\r\n                                                        }\r\n                                                        okText=\"Yes\"\r\n                                                        cancelText=\"No\"\r\n                                                    >\r\n                                                        <Menu.Item\r\n                                                            key=\"3\"\r\n                                                            danger\r\n                                                        >\r\n                                                            Delete\r\n                                                        </Menu.Item>\r\n                                                    </Popconfirm>\r\n                                                </Menu>\r\n                                            }\r\n                                            trigger={[\"click\"]}\r\n                                        >\r\n                                            <MoreOutlined\r\n                                                style={{ fontSize: \"30px\" }}\r\n                                            />\r\n                                        </Dropdown>,\r\n                                    ]}\r\n                                    style={{\r\n                                        borderBottom: \"3px solid #ccc\",\r\n                                        paddingLeft: \"16px\",\r\n                                    }}\r\n                                >\r\n                                    <List.Item.Meta\r\n                                        title={admin.email}\r\n                                        description={\r\n                                            admin.locked\r\n                                                ? \"Locked\"\r\n                                                : \"Not locked\"\r\n                                        }\r\n                                    />\r\n                                </List.Item>\r\n                            )}\r\n                        />\r\n                    )}\r\n                </Content>\r\n            </Layout>\r\n        </LayoutHOC>\r\n    );\r\n};\r\n\r\nexport default Admins;\r\n","import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { Layout, PageHeader } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate, useParams } from \"react-router-dom\";\n\nimport { AnalyticsDashboard } from \"react-analytics-charts\";\n// Over ten different commonly used charts are available\nimport { SessionsByDateChart, SessionsGeoChart } from \"react-analytics-charts\";\n\nconst AnalyticClient = (props) => {\n    const { id } = useParams();\n    const { logout, isLoggedIn, authData } = useUser();\n    const navigate = useNavigate();\n    useEffect(() => {\n        if (\n            !isLoggedIn ||\n            (!authData?.super &&\n                id.toString() !== authData?.projectId.toString())\n        ) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(`/p-admin/${id}`)}\n                    title={\"Analytics\"}\n                    style={{ boxShadow: \"1px 1px 10px 1px #ccc\" }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <AnalyticsDashboard\n                        authOptions={{\n                            clientId:\n                                \"123456789012-abc123def456ghi789jkl012mno345p.apps.googleusercontent.com\",\n                        }}\n                        renderCharts={(gapi, viewId) => {\n                            return (\n                                <div>\n                                    <SessionsByDateChart\n                                        gapi={gapi}\n                                        viewId={viewId}\n                                        showPageViews\n                                        showUsers\n                                    />\n                                    <SessionsGeoChart\n                                        gapi={gapi}\n                                        viewId={viewId}\n                                        showPageViews\n                                    />\n                                    ... More charts here ...\n                                </div>\n                            );\n                        }}\n                    />\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default AnalyticClient;\n","import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\nimport { Button, Layout, PageHeader, Form, Input } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport constantService from \"services/constant.service\";\n\nconst Constants = (props) => {\n    const { isLoggedIn, authData, logout } = useUser();\n    const [constants, setConstants] = useState(null);\n    const formRef = useRef(null);\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        constantService\n            .getConstant()\n            .then((response) => {\n                if (response.data) {\n                    setConstants(response.data);\n                    formRef.current &&\n                        formRef.current.setFieldsValue(response.data);\n                } else setConstants({});\n            })\n            .catch(() => {\n                setConstants({});\n            });\n    }, []);\n\n    useEffect(() => {\n        if (!isLoggedIn) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n\n        if (!authData?.super) {\n            if (authData?.projectId) {\n                navigate(`/p-admin/${authData.projectId}`);\n                return null;\n            } else {\n                logout();\n                navigate(\"/login\");\n                return null;\n            }\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n    const onFinish = async (values) => {\n        const response = await constantService.saveConstant(values);\n        if (response.data) {\n            setConstants(response.data);\n            toast.success(\"Saved\");\n        }\n    };\n\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(\"/admin\")}\n                    title=\"Constants\"\n                    style={{ boxShadow: \"1px 1px 10px 1px #ccc\" }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Form\n                        ref={formRef}\n                        name=\"normal_login\"\n                        onFinish={onFinish}\n                        style={{\n                            padding: \" 16px\",\n                            maxWidth: \"500px\",\n                            margin: \"auto\",\n                        }}\n                        initialValues={constants}\n                    >\n                        <Form.Item name=\"email\">\n                            <Input placeholder=\"Email\" />\n                        </Form.Item>\n\n                        <Form.Item name=\"phone\">\n                            <Input placeholder=\"Phone\" />\n                        </Form.Item>\n\n                        <Form.Item name=\"call\">\n                            <Input placeholder=\"Phone in international format\" />\n                        </Form.Item>\n\n                        <Form.Item>\n                            <Button\n                                type=\"primary\"\n                                htmlType=\"submit\"\n                                style={{ width: \"100%\" }}\n                            >\n                                Save\n                            </Button>\n                        </Form.Item>\n                        <Form.Item>\n                            <Button\n                                onClick={() => {\n                                    if (formRef.current)\n                                        formRef.current.resetFields();\n                                }}\n                                style={{ width: \"100%\" }}\n                            >\n                                Reset\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default Constants;\n","import { Button, Checkbox, Form, Input, Switch } from \"antd\";\nimport React from \"react\";\n\nconst ProjectFormFields = () => {\n    return (\n        <>\n            <Form.Item\n                name=\"name\"\n                label=\"Name\"\n                rules={[\n                    {\n                        required: true,\n                        message: \"Please set name!\",\n                    },\n                ]}\n            >\n                <Input placeholder=\"Name\" />\n            </Form.Item>\n            <Form.Item\n                name=\"url\"\n                label=\"Url\"\n                rules={[\n                    {\n                        required: true,\n                        message: \"Please add url!\",\n                    },\n                ]}\n            >\n                <Input placeholder=\"Url\" />\n            </Form.Item>\n\n            <Form.Item\n                name=\"projectId\"\n                label=\"Project id\"\n                rules={[\n                    {\n                        required: true,\n                        message: \"Please add project id!\",\n                    },\n                ]}\n            >\n                <Input placeholder=\"Project id\" />\n            </Form.Item>\n\n            <Form.Item\n                name=\"modelId\"\n                label=\"Model id\"\n                rules={[\n                    {\n                        required: true,\n                        message: \"Please add model id!\",\n                    },\n                ]}\n            >\n                <Input placeholder=\"Model id\" />\n            </Form.Item>\n\n            <Form.Item name=\"adminEmail\" label=\"Client login\">\n                <Input placeholder=\"Admin email\" />\n            </Form.Item>\n\n            <Form.Item\n                name=\"adminPassword\"\n                label=\"Client password\"\n                rules={[\n                    {\n                        min: 6,\n                        message: \"Must have length at least 6!\",\n                    },\n                ]}\n            >\n                <Input placeholder=\"Admin password\" />\n            </Form.Item>\n\n            <Form.Item name=\"analytic\" label=\"Analytics property\">\n                <Input placeholder=\"Google analytics property id\" />\n            </Form.Item>\n\n            <Form.Item\n                name=\"mobileNativeEvents\"\n                label=\"Mobile native events\"\n                valuePropName=\"checked\"\n            >\n                <Switch>Mobile native events</Switch>\n            </Form.Item>\n            <Form.Item\n                name=\"desktopNativeEvents\"\n                label=\"Desktop native events\"\n                valuePropName=\"checked\"\n            >\n                <Switch />\n            </Form.Item>\n\n            <Form.Item\n                name=\"published\"\n                valuePropName=\"checked\"\n                label=\"Published\"\n            >\n                <Checkbox />\n            </Form.Item>\n\n            <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                <Button\n                    type=\"primary\"\n                    htmlType=\"submit\"\n                    style={{ width: \"100%\" }}\n                >\n                    Save\n                </Button>\n            </Form.Item>\n        </>\n    );\n};\n\nexport default ProjectFormFields;\n","import LayoutHOC from \"layout/Layout\";\nimport React, { useRef, useEffect } from \"react\";\nimport projectService from \"services/project.service\";\n\nimport { Button, Layout, PageHeader, Form } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport ProjectFormFields from \"components/ProjectFormFields\";\n\nconst CreateProject = (props) => {\n    const { isLoggedIn, authData, logout } = useUser();\n    const formRef = useRef(null);\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        if (!isLoggedIn) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n\n        if (!authData?.super) {\n            if (authData?.projectId) {\n                navigate(`/p-admin/${authData.projectId}`);\n                return null;\n            } else {\n                logout();\n                navigate(\"/login\");\n                return null;\n            }\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    const onFinish = async (values) => {\n        const response = await projectService.createProject(values);\n        if (response.data) {\n            toast.success(\"Saved\");\n            navigate(\"/admin\");\n        }\n    };\n\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(\"/admin\")}\n                    title=\"Create project\"\n                    style={{ boxShadow: \"1px 1px 10px 1px #ccc\" }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Form\n                        ref={formRef}\n                        name=\"normal_login\"\n                        onFinish={onFinish}\n                        style={{\n                            padding: \" 16px\",\n                            maxWidth: \"500px\",\n                            margin: \"auto\",\n                        }}\n                        labelCol={{ span: 8 }}\n                        wrapperCol={{ span: 16 }}\n                    >\n                        <ProjectFormFields />\n                        <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                            <Button\n                                onClick={() => {\n                                    if (formRef.current)\n                                        formRef.current.resetFields();\n                                }}\n                                style={{ width: \"100%\" }}\n                            >\n                                Reset\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default CreateProject;\n","import React, { useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport authService from \"services/auth.service\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport { Button, Form, Input } from \"antd\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\n\r\nconst ForgotPasswordModal = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const onFinish = (data) => {\r\n        authService\r\n            .forgotPassword(data.email)\r\n            .then((data) => {\r\n                if (data.data.status === \"OK\") {\r\n                    toast.success(\"Email has been sent successfully.\");\r\n                    setIsOpen(false);\r\n                }\r\n            })\r\n            .catch((error) => {});\r\n    };\r\n    return (\r\n        <div>\r\n            <>\r\n                <span onClick={() => setIsOpen(!isOpen)}>Forgot password?</span>\r\n                <Modal\r\n                    title=\"Forgot Password\"\r\n                    visible={isOpen}\r\n                    footer={[]}\r\n                    onCancel={() => setIsOpen(false)}\r\n                >\r\n                    <Form\r\n                        name=\"normal_login\"\r\n                        onFinish={onFinish}\r\n                        style={{\r\n                            padding: \"100px 16px\",\r\n                            maxWidth: \"500px\",\r\n                            margin: \"auto\",\r\n                        }}\r\n                    >\r\n                        <Form.Item\r\n                            name=\"email\"\r\n                            rules={[\r\n                                {\r\n                                    type: \"email\",\r\n                                    message: \"The input is not valid E-mail!\",\r\n                                },\r\n                                {\r\n                                    required: true,\r\n                                    message: \"Please input your E-mail!\",\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input\r\n                                prefix={\r\n                                    <UserOutlined className=\"site-form-item-icon\" />\r\n                                }\r\n                                placeholder=\"Email\"\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                style={{ width: \"100%\" }}\r\n                            >\r\n                                Reset password\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ForgotPasswordModal;\r\n","// import { Button, HelperText, Input, Label } from \"@windmill/react-ui\";\r\nimport ForgotPasswordModal from \"components/ForgotPasswordModal\";\r\nimport { useUser } from \"context/UserContext\";\r\nimport Layout from \"layout/Layout\";\r\nimport React, { useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport authService from \"services/auth.service\";\r\nimport { Form, Input, Button, Typography } from \"antd\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\n\r\nconst Login = () => {\r\n    const { isLoggedIn, setUserState, authData } = useUser();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [redirectToReferrer, setRedirectToReferrer] = useState(false);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const onFinish = async (data) => {\r\n        const { email, password } = data;\r\n\r\n        try {\r\n            setIsLoading(true);\r\n            const data = await authService.login(email, password);\r\n            toast.success(\"Login successful 🔓\");\r\n\r\n            setTimeout(() => {\r\n                setUserState(data);\r\n                setRedirectToReferrer(true);\r\n                setIsLoading(false);\r\n            }, 1500);\r\n        } catch (error) {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    if (\r\n        (isLoggedIn || redirectToReferrer) &&\r\n        (authData?.super || authData?.projectId)\r\n    ) {\r\n        navigate(\"/admin\");\r\n    }\r\n\r\n    return (\r\n        <Layout title=\"Login\" loading={isLoading}>\r\n            <Form\r\n                name=\"normal_login\"\r\n                onFinish={onFinish}\r\n                style={{\r\n                    padding: \"100px 16px\",\r\n                    maxWidth: \"500px\",\r\n                    margin: \"auto\",\r\n                }}\r\n            >\r\n                <Typography.Title\r\n                    style={{ textAlign: \"center\", marginBottom: \"50px\" }}\r\n                >\r\n                    Manage IMMERSIVE\r\n                </Typography.Title>\r\n                <Form.Item\r\n                    name=\"email\"\r\n                    rules={[\r\n                        {\r\n                            type: \"email\",\r\n                            message: \"The input is not valid E-mail!\",\r\n                        },\r\n                        {\r\n                            required: true,\r\n                            message: \"Please input your E-mail!\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input\r\n                        prefix={\r\n                            <UserOutlined className=\"site-form-item-icon\" />\r\n                        }\r\n                        placeholder=\"Email\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"password\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: \"Please input your Password!\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input.Password\r\n                        prefix={\r\n                            <LockOutlined className=\"site-form-item-icon\" />\r\n                        }\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <a>\r\n                        <ForgotPasswordModal />\r\n                    </a>\r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        htmlType=\"submit\"\r\n                        style={{ width: \"100%\" }}\r\n                    >\r\n                        Log in\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport projectService from \"services/project.service\";\n\nimport { Button, Layout, PageHeader, Form, Typography } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useParams } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport ProjectFormFields from \"components/ProjectFormFields\";\n\nconst ProjectDetails = (props) => {\n    const [project, setProject] = useState(null);\n    const { isLoggedIn, authData, logout } = useUser();\n    const formRef = useRef(null);\n\n    const { id } = useParams();\n\n    useEffect(() => {\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, [id]);\n\n    const navigate = useNavigate();\n    useEffect(() => {\n        if (!isLoggedIn) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n\n        if (!authData?.super) {\n            if (authData?.projectId) {\n                navigate(`/p-admin/${authData.projectId}`);\n                return null;\n            } else {\n                logout();\n                navigate(\"/login\");\n                return null;\n            }\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    const onFinish = async (values) => {\n        const response = await projectService.saveProject(project.id, values);\n        if (response.data) toast.success(\"Saved\");\n    };\n\n    return (\n        <LayoutHOC loading={!project}>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(\"/admin\")}\n                    title={`Project - ${project?.name}`}\n                    style={{ boxShadow: \"1px 1px 10px 1px #ccc\" }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    {project && (\n                        <>\n                            <Typography.Title>\n                                Project id: {project.id}\n                            </Typography.Title>\n                            <Button\n                                onClick={() => navigate(`/p-admin/${id}`)}\n                                style={{ margin: \"16px\" }}\n                            >\n                                See client admin panel\n                            </Button>\n                            <Button\n                                onClick={() =>\n                                    navigate(\n                                        `/admin/projects/${project.id}/properties`\n                                    )\n                                }\n                                style={{ margin: \"16px\" }}\n                            >\n                                Manage properties\n                            </Button>\n                            <Form\n                                ref={formRef}\n                                name=\"normal_login\"\n                                onFinish={onFinish}\n                                style={{\n                                    padding: \" 16px\",\n                                    maxWidth: \"500px\",\n                                    margin: \"auto\",\n                                }}\n                                initialValues={project}\n                                labelCol={{ span: 8 }}\n                                wrapperCol={{ span: 16 }}\n                            >\n                                <ProjectFormFields />\n                                <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                                    <Button\n                                        onClick={() => {\n                                            if (formRef.current)\n                                                formRef.current.resetFields();\n                                        }}\n                                        style={{ width: \"100%\" }}\n                                    >\n                                        Reset\n                                    </Button>\n                                </Form.Item>\n                            </Form>\n                        </>\n                    )}\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default ProjectDetails;\n","import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useState } from \"react\";\nimport projectService from \"services/project.service\";\n\nimport {\n    Button,\n    Drawer,\n    Dropdown,\n    Layout,\n    List,\n    Menu,\n    PageHeader,\n    Popconfirm,\n} from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport {\n    EyeFilled,\n    EyeInvisibleFilled,\n    MenuOutlined,\n    MoreOutlined,\n    StarFilled,\n} from \"@ant-design/icons\";\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst Projects = (props) => {\n    const [projects, setProjects] = useState(null);\n    const { logout, isLoggedIn, authData } = useUser();\n    const navigate = useNavigate();\n\n    const [openDrawer, setOpenDrawer] = useState(false);\n    useEffect(() => {\n        projectService.getProject().then((response) => {\n            setProjects(response.data);\n        });\n    }, []);\n\n    useEffect(() => {\n        if (!isLoggedIn) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n\n        if (!authData?.super) {\n            if (authData?.projectId) {\n                navigate(`/p-admin/${authData.projectId}`);\n                return null;\n            } else {\n                logout();\n                navigate(\"/login\");\n                return null;\n            }\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    const deleteProject = async (id) => {\n        const response = await projectService.deleteProject(id);\n        if (response.data) setProjects(response.data);\n    };\n\n    const setFeatured = async (id) => {\n        const response = await projectService.saveProject(id, {\n            featured: true,\n        });\n\n        if (response.data) setProjects(response.data);\n    };\n\n    return (\n        <LayoutHOC loading={!projects}>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => setOpenDrawer(true)}\n                    backIcon={<MenuOutlined />}\n                    title={\"Projects\"}\n                    style={{ boxShadow: \"1px 1px 10px 1px #ccc\" }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Button\n                        onClick={() => navigate(\"/admin/projects/create\")}\n                        style={{ margin: \"16px\" }}\n                    >\n                        Add project\n                    </Button>\n                    {projects && (\n                        <List\n                            itemLayout=\"horizontal\"\n                            dataSource={projects.sort((a, b) =>\n                                a.url > b.url ? 1 : -1\n                            )}\n                            renderItem={(project) => (\n                                <List.Item\n                                    actions={[\n                                        <Dropdown\n                                            overlay={\n                                                <Menu>\n                                                    <Menu.Item\n                                                        key=\"1\"\n                                                        onClick={() =>\n                                                            setFeatured(\n                                                                project.id\n                                                            )\n                                                        }\n                                                    >\n                                                        Set as featured\n                                                    </Menu.Item>\n                                                    <Menu.Divider />\n                                                    <Popconfirm\n                                                        title=\"Are you sure to delete this project?\"\n                                                        onConfirm={() =>\n                                                            deleteProject(\n                                                                project.id\n                                                            )\n                                                        }\n                                                        okText=\"Yes\"\n                                                        cancelText=\"No\"\n                                                    >\n                                                        <Menu.Item\n                                                            key=\"3\"\n                                                            danger\n                                                        >\n                                                            Delete\n                                                        </Menu.Item>\n                                                    </Popconfirm>\n                                                </Menu>\n                                            }\n                                            trigger={[\"click\"]}\n                                        >\n                                            <MoreOutlined\n                                                style={{ fontSize: \"30px\" }}\n                                            />\n                                        </Dropdown>,\n                                    ]}\n                                >\n                                    <List.Item.Meta\n                                        avatar={\n                                            project.featured ? (\n                                                <StarFilled\n                                                    style={{ fontSize: \"24px\" }}\n                                                />\n                                            ) : project.published ? (\n                                                <EyeFilled\n                                                    style={{ fontSize: \"24px\" }}\n                                                />\n                                            ) : (\n                                                <EyeInvisibleFilled\n                                                    style={{ fontSize: \"24px\" }}\n                                                />\n                                            )\n                                        }\n                                        title={project.name}\n                                        description={project.url}\n                                        onClick={() => {\n                                            navigate(\n                                                `/admin/projects/${project.id}`\n                                            );\n                                        }}\n                                    />\n                                </List.Item>\n                            )}\n                        />\n                    )}\n                </Content>\n            </Layout>\n            <Drawer\n                title=\"Menu\"\n                placement=\"left\"\n                onClose={() => setOpenDrawer(false)}\n                visible={openDrawer}\n            >\n                <Menu\n                    mode=\"inline\"\n                    style={{ width: \"100%\" }}\n                    onClick={({ item, key }) => {\n                        setOpenDrawer(false);\n                        switch (key) {\n                            case \"logout\":\n                                logout();\n                                break;\n                            case \"info\":\n                                navigate(\"/admin/contant\");\n                                break;\n                            case \"admins\":\n                                navigate(\"/admin/admins\");\n                                break;\n                            default:\n                                return;\n                        }\n                    }}\n                    activeKey=\"projects\"\n                    selectedKeys={[\"projects\"]}\n                >\n                    <Menu.Item key=\"projects\">Projects</Menu.Item>\n                    <Menu.Item key=\"info\">Constant</Menu.Item>\n                    <Menu.Item key=\"admins\">Admins</Menu.Item>\n                    <Menu.Item key=\"logout\">Logout</Menu.Item>\n                </Menu>\n            </Drawer>\n        </LayoutHOC>\n    );\n};\n\nexport default Projects;\n","import API from \"api/axios.config\";\r\n\r\nclass PropertyService {\r\n    getProperty(projectId, id) {\r\n        return API.get(`/properties/${projectId}/${id ? \"/\" + id : \"\"}`);\r\n    }\r\n    saveProperty(projectId, id, data) {\r\n        return API.put(`/properties/${projectId}/${id}`, data);\r\n    }\r\n    createProperty(projectId, data) {\r\n        return API.post(`/properties/${projectId}`, data);\r\n    }\r\n    deleteProperty(projectId, id) {\r\n        return API.delete(`/properties/${projectId}/${id}`);\r\n    }\r\n    saveStatus(projectId, id, data) {\r\n        return API.put(`/properties/${projectId}/status/${id}`, data);\r\n    }\r\n}\r\n\r\nexport default new PropertyService();\r\n","import { Button, Popconfirm, Select, Table } from \"antd\";\nimport React from \"react\";\nimport toast from \"react-hot-toast\";\nimport propertyService from \"services/property.service\";\n\nconst PropertiesTable = (props) => {\n    const {\n        properties,\n        project,\n        setProperties,\n        admin,\n        setEditModalOpen,\n        transferOrientationToString,\n    } = props;\n\n    const { Option } = Select;\n\n    const onChange = async (value, id) => {\n        const response = await propertyService.saveStatus(project.id, id, {\n            Availability: value,\n        });\n        if (response.data) {\n            toast.success(\"Saved\");\n            setProperties(response.data);\n        }\n    };\n\n    const deleteProperty = async (propertyId) => {\n        const response = await propertyService.deleteProperty(\n            project.id,\n            propertyId\n        );\n        if (response.data) setProperties(response.data);\n    };\n\n    const columns = [\n        {\n            title: \"Name\",\n            dataIndex: \"Name\",\n            key: \"name\",\n            sorter: (a, b) => (a.Name > b.Name ? 1 : -1),\n            sortDirections: [\"descend\", \"ascend\"],\n        },\n        {\n            title: \"Availability\",\n            dataIndex: \"Availability\",\n            key: \"availability\",\n            render: (status, property) => (\n                <Select\n                    value={status}\n                    onChange={(value) => onChange(value, property.id)}\n                    style={{ width: \"100%\" }}\n                >\n                    <Option value=\"available\">Available</Option>\n                    <Option value=\"reserved\">Reserved</Option>\n                    <Option value=\"sold\">Sold</Option>\n                </Select>\n            ),\n            sorter: (a, b) => (a.Availability > b.Availability ? 1 : -1),\n            sortDirections: [\"descend\", \"ascend\"],\n            onFilter: (value, record) =>\n                record.Availability.indexOf(value) === 0,\n        },\n        {\n            title: \"Surface\",\n            dataIndex: \"Surface\",\n            key: \"surface\",\n            sorter: (a, b) => a.Surface - b.Surface,\n            sortDirections: [\"descend\", \"ascend\"],\n        },\n        {\n            title: \"Price\",\n            dataIndex: \"Price\",\n            key: \"price\",\n            sorter: (a, b) => a.Price - b.Price,\n            sortDirections: [\"descend\", \"ascend\"],\n        },\n        {\n            title: \"Bedrooms\",\n            dataIndex: \"BedroomsCount\",\n            key: \"bedrooms\",\n            sorter: (a, b) => a.BedroomsCount - b.BedroomsCount,\n            sortDirections: [\"descend\", \"ascend\"],\n        },\n        {\n            title: \"Bathrooms\",\n            dataIndex: \"BathroomsCount\",\n            key: \"bathrooms\",\n            sorter: (a, b) => a.BathroomsCount - b.BathroomsCount,\n            sortDirections: [\"descend\", \"ascend\"],\n        },\n        {\n            title: \"Orientation\",\n            dataIndex: \"Orientation\",\n            key: \"orientation\",\n            render: (orientation, property) =>\n                transferOrientationToString(property).Orientation,\n            sorter: (a, b) =>\n                transferOrientationToString(a).Orientation >\n                transferOrientationToString(b).Orientation\n                    ? 1\n                    : -1,\n            sortDirections: [\"descend\", \"ascend\"],\n        },\n        {\n            title: \"\",\n            render: (_, property) => (\n                <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                    <Button\n                        type=\"link\"\n                        onClick={() => setEditModalOpen(property)}\n                    >\n                        Edit\n                    </Button>\n                    {admin && (\n                        <Popconfirm\n                            title=\"Are you sure to delete this property?\"\n                            onConfirm={() => deleteProperty(property.id)}\n                            okText=\"Yes\"\n                            cancelText=\"No\"\n                        >\n                            <Button type=\"text\" danger>\n                                Delete\n                            </Button>\n                        </Popconfirm>\n                    )}\n                </div>\n            ),\n        },\n    ];\n    return (\n        <Table\n            dataSource={properties.sort((a, b) => {\n                return a.Name > b.Name ? 1 : -1;\n            })}\n            columns={columns}\n        />\n    );\n};\n\nexport default PropertiesTable;\n","import React, { useEffect, useRef, useState } from \"react\";\n\nimport { Button, Form, Input, Modal, Select } from \"antd\";\n\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport propertyService from \"services/property.service\";\nimport toast from \"react-hot-toast\";\nimport PropertiesTable from \"components/ProjectView/Components/PropertiesTable\";\nimport projectService from \"services/project.service\";\n\nconst Properties = (props) => {\n    const { admin, id, project, properties, setProject, setProperties } = props;\n    const formRef = useRef(null);\n\n    const [editModalOpen, setEditModalOpen] = useState(null);\n    const { isLoggedIn, authData, logout } = useUser();\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        propertyService.getProperty(id).then((response) => {\n            setProperties(response.data);\n        });\n\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n\n    useEffect(() => {\n        if (!isLoggedIn) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n\n        if (!authData?.super) {\n            if (authData?.projectId) {\n                navigate(`/p-admin/${authData.projectId}`);\n                return null;\n            } else {\n                logout();\n                navigate(\"/login\");\n                return null;\n            }\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    useEffect(() => {\n        if (formRef.current) {\n            if (editModalOpen)\n                formRef.current.setFieldsValue(\n                    editModalOpen.id\n                        ? transferOrientationToString(editModalOpen)\n                        : editModalOpen\n                );\n        }\n    }, [editModalOpen?.id]);\n\n    const onFinish = async (values) => {\n        const response = editModalOpen?.id\n            ? await propertyService.saveProperty(\n                  id,\n                  editModalOpen.id,\n                  transferOrientationToObject(values)\n              )\n            : await propertyService.createProperty(\n                  id,\n                  transferOrientationToObject(values)\n              );\n        if (response.data) {\n            toast.success(\"Saved\");\n            setProperties(response.data);\n            setEditModalOpen(null);\n            if (formRef.current) formRef.current.resetFields();\n        }\n    };\n\n    const transferOrientationToObject = (data) => {\n        const o = {};\n        if (data.Orientation.indexOf(\"N\") !== -1) o.N = true;\n        else if (data.Orientation.indexOf(\"S\") !== -1) o.S = true;\n        if (data.Orientation.indexOf(\"E\") !== -1) o.E = true;\n        else if (data.Orientation.indexOf(\"W\") !== -1) o.W = true;\n        return { ...data, Orientation: o };\n    };\n\n    const transferOrientationToString = (data) => {\n        let o = \"\";\n        if (data.Orientation.N) o = o + \"N\";\n        else if (data.Orientation.S) o = o + \"S\";\n        if (data.Orientation.E) o = o + \"E\";\n        else if (data.Orientation.W) o = o + \"W\";\n        return { ...data, Orientation: o };\n    };\n    const { Option } = Select;\n\n    return (\n        <>\n            {admin && (\n                <Button\n                    onClick={() => setEditModalOpen({})}\n                    style={{ margin: \"16px\" }}\n                >\n                    Add property\n                </Button>\n            )}\n            <Modal\n                visible={!!editModalOpen}\n                onCancel={() => setEditModalOpen(null)}\n                footer={null}\n            >\n                <Form\n                    name=\"normal_login\"\n                    onFinish={onFinish}\n                    style={{\n                        padding: \" 16px\",\n                        maxWidth: \"500px\",\n                        margin: \"auto\",\n                    }}\n                    ref={formRef}\n                    labelCol={{ span: 8 }}\n                    wrapperCol={{ span: 16 }}\n                >\n                    <Form.Item\n                        name=\"Name\"\n                        label=\"Name\"\n                        rules={[\n                            {\n                                required: true,\n                                message: \"Please add name!\",\n                            },\n                        ]}\n                    >\n                        <Input placeholder=\"Name\" readOnly={!admin} />\n                    </Form.Item>\n\n                    <Form.Item name=\"Surface\" label=\"Surface\">\n                        <Input placeholder=\"Surface\" type=\"number\" />\n                    </Form.Item>\n                    <Form.Item name=\"Price\" label=\"Price\">\n                        <Input placeholder=\"Price\" type=\"number\" />\n                    </Form.Item>\n                    <Form.Item name=\"BedroomsCount\" label=\"Bedrooms\">\n                        <Input placeholder=\"Bedrooms\" type=\"number\" />\n                    </Form.Item>\n                    <Form.Item name=\"BathroomsCount\" label=\"Bathrooms\">\n                        <Input placeholder=\"Bathrooms\" type=\"number\" />\n                    </Form.Item>\n                    <Form.Item name=\"Orientation\" label=\"Orientation\">\n                        <Select>\n                            <Option value=\"N\">North</Option>\n                            <Option value=\"NE\">North-East</Option>\n                            <Option value=\"E\">East</Option>\n                            <Option value=\"SE\">South-East</Option>\n                            <Option value=\"S\">South</Option>\n                            <Option value=\"SW\">South-West</Option>\n                            <Option value=\"W\">West</Option>\n                            <Option value=\"NW\">North-West</Option>\n                        </Select>\n                    </Form.Item>\n                    <Form.Item\n                        name=\"Availability\"\n                        label=\"Availability\"\n                        rules={[\n                            {\n                                required: true,\n                                message: \"Please set the status!\",\n                            },\n                        ]}\n                    >\n                        <Select>\n                            <Option value=\"available\">Available</Option>\n                            <Option value=\"reserved\">Reserved</Option>\n                            <Option value=\"sold\">Sold</Option>\n                        </Select>\n                    </Form.Item>\n                    <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                        <Button\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                            style={{ width: \"100%\" }}\n                        >\n                            Save\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </Modal>\n            {properties && project && (\n                <PropertiesTable\n                    properties={properties}\n                    setProperties={setProperties}\n                    project={project}\n                    admin={admin}\n                    setEditModalOpen={setEditModalOpen}\n                    transferOrientationToString={transferOrientationToString}\n                />\n            )}\n        </>\n    );\n};\n\nexport default Properties;\n","import React, { useEffect, useState } from \"react\";\n\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport Properties from \"./Properties\";\nimport LayoutHOC from \"layout/Layout\";\nimport { Layout, PageHeader } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport propertyService from \"services/property.service\";\nimport projectService from \"services/project.service\";\n\nconst PropertiesAdmin = (props) => {\n    const { id } = useParams();\n    const { isLoggedIn, authData, logout } = useUser();\n    const navigate = useNavigate();\n    const [project, setProject] = useState(null);\n    const [properties, setProperties] = useState(null);\n    useEffect(() => {\n        if (!isLoggedIn) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n\n        if (!authData?.super) {\n            if (authData?.projectId) {\n                navigate(`/p-admin/${authData.projectId}`);\n                return null;\n            } else {\n                logout();\n                navigate(\"/login\");\n                return null;\n            }\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    useEffect(() => {\n        propertyService.getProperty(id).then((response) => {\n            setProperties(response.data);\n        });\n\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(`/admin/projects/${id}`)}\n                    title={`Properties of project id: ${id}`}\n                    style={{ boxShadow: \"1px 1px 10px 1px #ccc\" }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        maxWidth: \"1200px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Properties\n                        admin\n                        id={id}\n                        setProject={setProject}\n                        setProperties={setProperties}\n                        project={project}\n                        properties={properties}\n                    />\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default PropertiesAdmin;\n","import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { Drawer, Layout, Menu, PageHeader } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport { MenuOutlined } from \"@ant-design/icons\";\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport Properties from \"./Properties\";\nimport projectService from \"services/project.service\";\nimport propertyService from \"services/property.service\";\n\nconst PropertiesClient = (props) => {\n    const { id } = useParams();\n    const { logout, isLoggedIn, authData } = useUser();\n    const navigate = useNavigate();\n    const [project, setProject] = useState(null);\n    const [properties, setProperties] = useState(null);\n\n    const [openDrawer, setOpenDrawer] = useState(false);\n\n    useEffect(() => {\n        propertyService.getProperty(id).then((response) => {\n            setProperties(response.data);\n        });\n\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n\n    useEffect(() => {\n        if (\n            !isLoggedIn ||\n            (!authData?.super &&\n                id.toString() !== authData?.projectId.toString())\n        ) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    return (\n        <LayoutHOC loading={!properties || !project}>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => setOpenDrawer(true)}\n                    backIcon={<MenuOutlined />}\n                    title={\"Appartments\"}\n                    style={{ boxShadow: \"1px 1px 10px 1px #ccc\" }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        maxWidth: \"1200px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Properties\n                        id={id}\n                        setProject={setProject}\n                        setProperties={setProperties}\n                        project={project}\n                        properties={properties}\n                    />\n                </Content>\n            </Layout>\n            <Drawer\n                title=\"Menu\"\n                placement=\"left\"\n                onClose={() => setOpenDrawer(false)}\n                visible={openDrawer}\n            >\n                <Menu\n                    mode=\"inline\"\n                    style={{ width: \"100%\" }}\n                    onClick={({ item, key }) => {\n                        setOpenDrawer(false);\n                        switch (key) {\n                            case \"logout\":\n                                logout();\n                                break;\n                            case \"visit\":\n                                navigate(`/p/${project.url}`);\n                                break;\n                            case \"analytics\":\n                                navigate(`/p-admin/${project.id}/analytics`);\n                                break;\n                            default:\n                                return;\n                        }\n                    }}\n                    activeKey=\"properties\"\n                    selectedKeys={[\"properties\"]}\n                >\n                    <Menu.Item key=\"properties\">Properties</Menu.Item>\n                    <Menu.Item key=\"analytics\">Analytics</Menu.Item>\n                    <Menu.Item key=\"visit\">Visit project</Menu.Item>\n                    <Menu.Item key=\"logout\">Logout</Menu.Item>\n                </Menu>\n            </Drawer>\n        </LayoutHOC>\n    );\n};\n\nexport default PropertiesClient;\n","import history from \"helpers/history\";\nimport Layout from \"layout/Layout\";\nimport Admins from \"pages/Admins\";\nimport AnalyticClient from \"pages/AnalyticClient\";\nimport Constants from \"pages/Constants\";\nimport CreateProject from \"pages/CreateProject\";\nimport Login from \"pages/Login\";\nimport ProjectDetails from \"pages/ProjectDetails\";\nimport Projects from \"pages/Projects\";\nimport Properties from \"pages/Properties\";\nimport PropertiesAdmin from \"pages/PropertiesAdmin\";\nimport PropertiesClient from \"pages/PropertiesClient\";\nimport { lazy, Suspense } from \"react\";\nimport { Toaster } from \"react-hot-toast\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\n\nconst Home = lazy(() => import(\"pages/Home\"));\nconst Project = lazy(() => import(\"pages/Project\"));\n\nconst ResetPassword = lazy(() => import(\"pages/ResetPassword\"));\n// const Preview = lazy(() => import(\"pages/Preview\"));\n\nfunction App() {\n    return (\n        <BrowserRouter history={history}>\n            <Suspense\n                fallback={<Layout>{/* <Spinner size={100} /> */}</Layout>}\n            >\n                <>\n                    <Toaster position=\"top-right\" />\n                    <Routes>\n                        <Route exact path={\"/\"} element={<Home />} />\n                        <Route path=\"/login\" element={<Login />} />\n                        <Route\n                            exact\n                            path=\"/admin\"\n                            element={<Projects />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/projects/:id\"\n                            element={<ProjectDetails />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/projects/create\"\n                            element={<CreateProject />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/projects/:id/properties\"\n                            element={<PropertiesAdmin />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/contant\"\n                            element={<Constants />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/admins\"\n                            element={<Admins />}\n                        ></Route>\n\n                        <Route\n                            path=\"/reset-password\"\n                            element={<ResetPassword />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/p/:id\"\n                            element={<Project />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/p-admin/:id\"\n                            element={<PropertiesClient />}\n                        ></Route>\n\n                        <Route\n                            exact\n                            path=\"/p-admin/:id/analytics\"\n                            element={<AnalyticClient />}\n                        ></Route>\n\n                        <Route\n                            path=\"*\"\n                            element={<h1>404 Error Found</h1>}\n                        ></Route>\n                    </Routes>\n                </>\n            </Suspense>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { UserProvider } from \"context/UserContext\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n    <HelmetProvider>\n        <UserProvider>\n            <App />\n        </UserProvider>\n    </HelmetProvider>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import API from \"api/axios.config\";\r\n\r\nclass ProjectService {\r\n    getProject(id) {\r\n        return API.get(`/projects${id ? \"/\" + id : \"\"}`);\r\n    }\r\n\r\n    getProjectByUrl(id) {\r\n        return API.get(`/projects/url/${id}`);\r\n    }\r\n\r\n    getFeaturedProject() {\r\n        return API.get(`/projects/url/__featured__`);\r\n    }\r\n    saveProject(id, data) {\r\n        return API.put(`/projects/${id}`, data);\r\n    }\r\n    createProject(data) {\r\n        return API.post(`/projects`, data);\r\n    }\r\n    deleteProject(id) {\r\n        return API.delete(`/projects/${id}`);\r\n    }\r\n}\r\n\r\nexport default new ProjectService();\r\n"],"sourceRoot":""}