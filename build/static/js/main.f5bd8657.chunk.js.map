{"version":3,"sources":["services/auth.service.js","services/constant.service.js","api/axios.config.js","helpers/history.js","helpers/WithAxios.js","context/UserContext.jsx","services/admin.service.js","pages/Admins.jsx","pages/Constants.jsx","components/ProjectFormFields.jsx","pages/CreateProject.jsx","components/ForgotPasswordModal.jsx","pages/Login.jsx","pages/ProjectDetails.jsx","pages/Projects.jsx","services/property.service.js","pages/Properties.jsx","components/ProjectView/Components/PropertiesTable.jsx","pages/PropertiesClient.jsx","App.js","reportWebVitals.js","index.js","layout/Layout.jsx","services/project.service.js"],"names":["AuthService","email","password","API","post","data","token","localStorage","removeItem","password2","username","get","ConstantService","put","axios","create","baseURL","withCredentials","interceptors","request","use","req","JSON","parse","getItem","headers","error","Promise","reject","createBrowserHistory","WithAxios","children","useUser","setIsLoggedIn","setUserData","setAuthData","isLoggedIn","useMemo","response","a","originalRequest","config","status","url","resolve","console","log","history","push","_retry","res","setItem","stringify","UserContext","createContext","UserProvider","useState","authData","useEffect","getTokenData","decoded","jwt_decode","Provider","value","setUserState","setUserInfo","logout","authService","context","useContext","undefined","Error","id","delete","Admins","props","formRef","useRef","admins","setAdmins","editModalOpen","setEditModalOpen","navigate","useNavigate","adminService","getAdmin","then","super","projectId","onFinish","values","createAdmin","toast","success","current","resetFields","deleteAdmin","Layout","loading","style","height","display","flex","background","onBack","title","boxShadow","overflow","padding","maxWidth","width","margin","onClick","visible","onCancel","footer","name","ref","Item","rules","required","message","type","placeholder","htmlType","itemLayout","dataSource","sort","b","renderItem","admin","actions","overlay","onConfirm","okText","cancelText","danger","trigger","MoreOutlined","fontSize","borderBottom","paddingLeft","Meta","description","locked","Constants","constants","setConstants","constantService","getConstant","setFieldsValue","catch","saveConstant","initialValues","ProjectFormFields","min","CreateProject","projectService","createProject","ForgotPasswordModal","isOpen","setIsOpen","forgotPassword","prefix","UserOutlined","className","Login","isLoading","setIsLoading","redirectToReferrer","setRedirectToReferrer","login","setTimeout","Title","textAlign","marginBottom","Password","LockOutlined","ProjectDetails","project","setProject","useParams","getProject","saveProject","Projects","projects","setProjects","openDrawer","setOpenDrawer","deleteProject","setFeatured","featured","backIcon","MenuOutlined","Divider","avatar","StarFilled","published","EyeFilled","EyeInvisibleFilled","placement","onClose","mode","item","key","activeKey","selectedKeys","Properties","properties","setProperties","propertyService","getProperty","saveProperty","createProperty","deleteProperty","propertyId","Option","Select","property","PropertiesTable","onChange","saveStatus","columns","dataIndex","render","PropertiesClient","toString","Home","lazy","Project","ResetPassword","App","fallback","position","exact","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","isProject","content","ProjectService"],"mappings":"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","file":"static/js/main.f5bd8657.chunk.js","sourcesContent":["import API from \"api/axios.config\";\r\n\r\nclass AuthService {\r\n  async login(email, password) {\r\n    const { data } = await API.post(\"/auth/login\", {\r\n      email,\r\n      password,\r\n    });\r\n    return data;\r\n  }\r\n\r\n  async googleLogin(token) {\r\n    const { data } = await API.post(\"/auth/google\", {\r\n      token,\r\n    });\r\n    return data;\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem(\"user\");\r\n    localStorage.removeItem('token')\r\n    localStorage.removeItem('expiresAt')\r\n  }\r\n\r\n  forgotPassword(email) {\r\n    return API.post(\"/auth/forgot-password\", {\r\n      email,\r\n    });\r\n  }\r\n\r\n  checkToken(token, email) {\r\n    return API.post(\"auth/check-token\", {\r\n      token,\r\n      email,\r\n    });\r\n  }\r\n\r\n  resetPassword(token, email, password, password2) {\r\n    return API.post(\"auth/reset-password\", {\r\n      token,\r\n      email,\r\n      password,\r\n      password2,\r\n    });\r\n  }\r\n\r\n  register(username, email, password) {\r\n    return API.post(\"auth/signup\", {\r\n      username,\r\n      email,\r\n      password,\r\n    });\r\n  }\r\n\r\n  getCurrentUser() {\r\n    return API.get(\"/users/profile\");\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import API from \"api/axios.config\";\r\n\r\nclass ConstantService {\r\n    getConstant() {\r\n        return API.get(`/constant`);\r\n    }\r\n    saveConstant(data) {\r\n        return API.put(`/constant`, data);\r\n    }\r\n}\r\n\r\nexport default new ConstantService();\r\n","import axios from \"axios\";\r\n\r\nconst baseURL =\r\n    process.env.NODE_ENV === \"production\"\r\n        ? \"https://tour.immersiv.com.au/api\"\r\n        : \"http://localhost:5000/api\";\r\n\r\nconst API = axios.create({\r\n    baseURL,\r\n    withCredentials: true,\r\n});\r\n\r\nAPI.interceptors.request.use(\r\n    function (req) {\r\n        const token = JSON.parse(localStorage.getItem(\"token\"));\r\n        if (token) req.headers[\"auth-token\"] = token;\r\n        return req;\r\n    },\r\n    function (error) {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default API;\r\n","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();\n","import { useMemo } from \"react\";\nimport API from \"api/axios.config\";\nimport { useUser } from \"context/UserContext\";\nimport history from \"helpers/history\";\n\nconst WithAxios = ({ children }) => {\n    const { setIsLoggedIn, setUserData, setAuthData, isLoggedIn } = useUser();\n\n    useMemo(() => {\n        if (isLoggedIn) {\n            API.interceptors.response.use(\n                (response) => response,\n                async (error) => {\n                    const originalRequest = error.config;\n                    if (\n                        error.response.status === 401 &&\n                        originalRequest.url === \"/auth/refresh-token\"\n                    ) {\n                        return new Promise((resolve, reject) => {\n                            setIsLoggedIn(false);\n                            console.log(\"here\");\n                            setAuthData(null);\n                            setUserData(null);\n                            history.push(\"/login\");\n                            reject(error);\n                        });\n                    }\n\n                    if (\n                        error.response.status === 401 &&\n                        !originalRequest._retry\n                    ) {\n                        try {\n                            originalRequest._retry = true;\n                            const res = await API.post(\"/auth/refresh-token\");\n                            localStorage.setItem(\n                                \"token\",\n                                JSON.stringify(res.data.token)\n                            );\n                            return API(originalRequest);\n                        } catch (error) {\n                            localStorage.removeItem(\"token\");\n                            setIsLoggedIn(false);\n                            console.log(\"here2\");\n                            setAuthData(null);\n                            setUserData(null);\n                            history.push(\"/login\");\n                        }\n                    }\n                    return Promise.reject(error);\n                }\n            );\n        }\n    }, [isLoggedIn, setAuthData, setIsLoggedIn, setUserData]);\n\n    return children;\n};\n\nexport default WithAxios;\n","import WithAxios from \"helpers/WithAxios\";\r\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport authService from \"services/auth.service\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nconst UserContext = createContext();\r\n\r\nconst UserProvider = ({ children }) => {\r\n    const [authData, setAuthData] = useState({\r\n        token: \"\",\r\n    });\r\n\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem(\"token\")) {\r\n            setIsLoggedIn(true);\r\n            setAuthData(() =>\r\n                getTokenData(JSON.parse(localStorage.getItem(\"token\")).token)\r\n            );\r\n        }\r\n    }, []);\r\n\r\n    const getTokenData = (token) => {\r\n        if (token) {\r\n            const decoded = jwt_decode(token);\r\n            return {\r\n                ...decoded,\r\n                token,\r\n            };\r\n        } else\r\n            return {\r\n                token: \"\",\r\n            };\r\n    };\r\n\r\n    const setUserInfo = (data) => {\r\n        const { token } = data;\r\n\r\n        setIsLoggedIn(true);\r\n\r\n        setAuthData(() => getTokenData(token));\r\n        localStorage.setItem(\"token\", JSON.stringify(token));\r\n    };\r\n\r\n    const logout = () => {\r\n        console.log(\"logout\");\r\n        setAuthData(null);\r\n        setIsLoggedIn(false);\r\n        authService.logout();\r\n    };\r\n\r\n    return (\r\n        <UserContext.Provider\r\n            value={{\r\n                setUserState: (data) => setUserInfo(data),\r\n                logout,\r\n                isLoggedIn,\r\n                setIsLoggedIn,\r\n                authData,\r\n                setAuthData,\r\n            }}\r\n        >\r\n            <WithAxios>{children}</WithAxios>\r\n        </UserContext.Provider>\r\n    );\r\n};\r\n\r\nconst useUser = () => {\r\n    const context = useContext(UserContext);\r\n\r\n    if (context === undefined) {\r\n        throw new Error(\"useUser must be used within UserProvider\");\r\n    }\r\n    return context;\r\n};\r\n\r\nexport { UserProvider, useUser };\r\n","import API from \"api/axios.config\";\r\n\r\nclass AdminService {\r\n    getAdmin() {\r\n        return API.get(`/admins`);\r\n    }\r\n\r\n    createAdmin(data) {\r\n        return API.post(`/admins`, data);\r\n    }\r\n\r\n    deleteAdmin(id) {\r\n        return API.delete(`/admins/${id}`);\r\n    }\r\n}\r\n\r\nexport default new AdminService();\r\n","import LayoutHOC from \"layout/Layout\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport {\r\n    Button,\r\n    Dropdown,\r\n    Form,\r\n    Input,\r\n    Layout,\r\n    List,\r\n    Menu,\r\n    Modal,\r\n    PageHeader,\r\n    Popconfirm,\r\n} from \"antd\";\r\nimport { Content } from \"antd/lib/layout/layout\";\r\nimport { MoreOutlined } from \"@ant-design/icons\";\r\nimport { useUser } from \"context/UserContext\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport toast from \"react-hot-toast\";\r\nimport adminService from \"services/admin.service\";\r\n\r\nconst Admins = (props) => {\r\n    const formRef = useRef(null);\r\n    const [admins, setAdmins] = useState(null);\r\n    const [editModalOpen, setEditModalOpen] = useState(null);\r\n    const { isLoggedIn, authData, logout } = useUser();\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        adminService.getAdmin().then((response) => {\r\n            setAdmins(response.data);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            logout();\r\n            navigate(\"/login\");\r\n            return null;\r\n        }\r\n\r\n        if (!authData?.super) {\r\n            if (authData?.projectId) {\r\n                navigate(`/p-admin/${authData.projectId}`);\r\n                return null;\r\n            } else {\r\n                logout();\r\n                navigate(\"/login\");\r\n                return null;\r\n            }\r\n        }\r\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\r\n\r\n    const onFinish = async (values) => {\r\n        const response = await adminService.createAdmin(values);\r\n        if (response.data) {\r\n            toast.success(\"Saved\");\r\n            setAdmins(response.data);\r\n            setEditModalOpen(null);\r\n            if (formRef.current) formRef.current.resetFields();\r\n        }\r\n    };\r\n\r\n    const deleteAdmin = async (id) => {\r\n        const response = await adminService.deleteAdmin(id);\r\n        if (response.data) setAdmins(response.data);\r\n    };\r\n\r\n    return (\r\n        <LayoutHOC loading={!admins}>\r\n            <Layout\r\n                style={{\r\n                    height: \"100%\",\r\n                    display: \"flex\",\r\n                    flex: 1,\r\n                    background: \"white\",\r\n                }}\r\n            >\r\n                <PageHeader\r\n                    onBack={() => navigate(`/admin`)}\r\n                    title={`Admins`}\r\n                    style={{ boxShadow: \"1px 1px 10px 1px #ccc\" }}\r\n                />\r\n\r\n                <Content\r\n                    style={{\r\n                        flex: 1,\r\n                        overflow: \"auto\",\r\n                        padding: \"16px\",\r\n                        maxWidth: \"800px\",\r\n                        width: \"100%\",\r\n                        margin: \"auto\",\r\n                    }}\r\n                >\r\n                    <Button\r\n                        onClick={() => setEditModalOpen({})}\r\n                        style={{ margin: \"16px\" }}\r\n                    >\r\n                        Add admin\r\n                    </Button>\r\n                    <Modal\r\n                        visible={!!editModalOpen}\r\n                        onCancel={() => setEditModalOpen(null)}\r\n                        footer={null}\r\n                    >\r\n                        <Form\r\n                            name=\"normal_login\"\r\n                            onFinish={onFinish}\r\n                            style={{\r\n                                padding: \" 16px\",\r\n                                maxWidth: \"500px\",\r\n                                margin: \"auto\",\r\n                            }}\r\n                            ref={formRef}\r\n                        >\r\n                            <Form.Item\r\n                                name=\"email\"\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: \"Please add name!\",\r\n                                        type: \"email\",\r\n                                    },\r\n                                ]}\r\n                            >\r\n                                <Input placeholder=\"Email\" />\r\n                            </Form.Item>\r\n\r\n                            <Form.Item>\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    htmlType=\"submit\"\r\n                                    style={{ width: \"100%\" }}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Modal>\r\n                    {admins && (\r\n                        <List\r\n                            itemLayout=\"horizontal\"\r\n                            dataSource={admins.sort((a, b) =>\r\n                                a.name > b.name ? 1 : -1\r\n                            )}\r\n                            renderItem={(admin) => (\r\n                                <List.Item\r\n                                    actions={[\r\n                                        <Dropdown\r\n                                            overlay={\r\n                                                <Menu>\r\n                                                    <Popconfirm\r\n                                                        title=\"Are you sure to delete this admin?\"\r\n                                                        onConfirm={() =>\r\n                                                            deleteAdmin(\r\n                                                                admin.email\r\n                                                            )\r\n                                                        }\r\n                                                        okText=\"Yes\"\r\n                                                        cancelText=\"No\"\r\n                                                    >\r\n                                                        <Menu.Item\r\n                                                            key=\"3\"\r\n                                                            danger\r\n                                                        >\r\n                                                            Delete\r\n                                                        </Menu.Item>\r\n                                                    </Popconfirm>\r\n                                                </Menu>\r\n                                            }\r\n                                            trigger={[\"click\"]}\r\n                                        >\r\n                                            <MoreOutlined\r\n                                                style={{ fontSize: \"30px\" }}\r\n                                            />\r\n                                        </Dropdown>,\r\n                                    ]}\r\n                                    style={{\r\n                                        borderBottom: \"3px solid #ccc\",\r\n                                        paddingLeft: \"16px\",\r\n                                    }}\r\n                                >\r\n                                    <List.Item.Meta\r\n                                        title={admin.email}\r\n                                        description={\r\n                                            admin.locked\r\n                                                ? \"Locked\"\r\n                                                : \"Not locked\"\r\n                                        }\r\n                                    />\r\n                                </List.Item>\r\n                            )}\r\n                        />\r\n                    )}\r\n                </Content>\r\n            </Layout>\r\n        </LayoutHOC>\r\n    );\r\n};\r\n\r\nexport default Admins;\r\n","import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\nimport { Button, Layout, PageHeader, Form, Input } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport constantService from \"services/constant.service\";\n\nconst Constants = (props) => {\n    const { isLoggedIn, authData, logout } = useUser();\n    const [constants, setConstants] = useState(null);\n    const formRef = useRef(null);\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        constantService\n            .getConstant()\n            .then((response) => {\n                if (response.data) {\n                    setConstants(response.data);\n                    formRef.current &&\n                        formRef.current.setFieldsValue(response.data);\n                } else setConstants({});\n            })\n            .catch(() => {\n                setConstants({});\n            });\n    }, []);\n\n    useEffect(() => {\n        if (!isLoggedIn) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n\n        if (!authData?.super) {\n            if (authData?.projectId) {\n                navigate(`/p-admin/${authData.projectId}`);\n                return null;\n            } else {\n                logout();\n                navigate(\"/login\");\n                return null;\n            }\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n    const onFinish = async (values) => {\n        const response = await constantService.saveConstant(values);\n        if (response.data) {\n            setConstants(response.data);\n            toast.success(\"Saved\");\n        }\n    };\n\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(\"/admin\")}\n                    title=\"Constants\"\n                    style={{ boxShadow: \"1px 1px 10px 1px #ccc\" }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Form\n                        ref={formRef}\n                        name=\"normal_login\"\n                        onFinish={onFinish}\n                        style={{\n                            padding: \" 16px\",\n                            maxWidth: \"500px\",\n                            margin: \"auto\",\n                        }}\n                        initialValues={constants}\n                    >\n                        <Form.Item name=\"email\">\n                            <Input placeholder=\"Email\" />\n                        </Form.Item>\n\n                        <Form.Item name=\"phone\">\n                            <Input placeholder=\"Phone\" />\n                        </Form.Item>\n\n                        <Form.Item name=\"call\">\n                            <Input placeholder=\"Phone in international format\" />\n                        </Form.Item>\n\n                        <Form.Item>\n                            <Button\n                                type=\"primary\"\n                                htmlType=\"submit\"\n                                style={{ width: \"100%\" }}\n                            >\n                                Save\n                            </Button>\n                        </Form.Item>\n                        <Form.Item>\n                            <Button\n                                onClick={() => {\n                                    if (formRef.current)\n                                        formRef.current.resetFields();\n                                }}\n                                style={{ width: \"100%\" }}\n                            >\n                                Reset\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default Constants;\n","import { Button, Checkbox, Form, Input } from \"antd\";\nimport React from \"react\";\n\nconst ProjectFormFields = () => {\n    return (\n        <>\n            <Form.Item\n                name=\"name\"\n                rules={[\n                    {\n                        required: true,\n                        message: \"Please set name!\",\n                    },\n                ]}\n            >\n                <Input placeholder=\"Name\" />\n            </Form.Item>\n            <Form.Item\n                name=\"url\"\n                rules={[\n                    {\n                        required: true,\n                        message: \"Please add url!\",\n                    },\n                ]}\n            >\n                <Input placeholder=\"Url\" />\n            </Form.Item>\n\n            <Form.Item\n                name=\"projectId\"\n                rules={[\n                    {\n                        required: true,\n                        message: \"Please add project id!\",\n                    },\n                ]}\n            >\n                <Input placeholder=\"Project id\" />\n            </Form.Item>\n\n            <Form.Item\n                name=\"modelId\"\n                rules={[\n                    {\n                        required: true,\n                        message: \"Please add model id!\",\n                    },\n                ]}\n            >\n                <Input placeholder=\"Model id\" />\n            </Form.Item>\n\n            <Form.Item name=\"adminEmail\">\n                <Input placeholder=\"Admin email\" />\n            </Form.Item>\n\n            <Form.Item\n                name=\"adminPassword\"\n                rules={[\n                    {\n                        min: 6,\n                        message: \"Must have length at least 6!\",\n                    },\n                ]}\n            >\n                <Input placeholder=\"Admin password\" />\n            </Form.Item>\n\n            <Form.Item name=\"analytic\">\n                <Input placeholder=\"Google analytics property id\" />\n            </Form.Item>\n\n            <Form.Item\n                name=\"published\"\n                rules={[\n                    {\n                        required: true,\n                        message: \"Please add model id!\",\n                    },\n                ]}\n            >\n                <Checkbox>Published</Checkbox>\n            </Form.Item>\n\n            <Form.Item>\n                <Button\n                    type=\"primary\"\n                    htmlType=\"submit\"\n                    style={{ width: \"100%\" }}\n                >\n                    Save\n                </Button>\n            </Form.Item>\n        </>\n    );\n};\n\nexport default ProjectFormFields;\n","import LayoutHOC from \"layout/Layout\";\nimport React, { useRef, useEffect } from \"react\";\nimport projectService from \"services/project.service\";\n\nimport { Button, Layout, PageHeader, Form } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport ProjectFormFields from \"components/ProjectFormFields\";\n\nconst CreateProject = (props) => {\n    const { isLoggedIn, authData, logout } = useUser();\n    const formRef = useRef(null);\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        if (!isLoggedIn) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n\n        if (!authData?.super) {\n            if (authData?.projectId) {\n                navigate(`/p-admin/${authData.projectId}`);\n                return null;\n            } else {\n                logout();\n                navigate(\"/login\");\n                return null;\n            }\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    const onFinish = async (values) => {\n        const response = await projectService.createProject(values);\n        if (response.data) {\n            toast.success(\"Saved\");\n            navigate(\"/admin\");\n        }\n    };\n\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(\"/admin\")}\n                    title=\"Create project\"\n                    style={{ boxShadow: \"1px 1px 10px 1px #ccc\" }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Form\n                        ref={formRef}\n                        name=\"normal_login\"\n                        onFinish={onFinish}\n                        style={{\n                            padding: \" 16px\",\n                            maxWidth: \"500px\",\n                            margin: \"auto\",\n                        }}\n                    >\n                        <ProjectFormFields />\n                        <Form.Item>\n                            <Button\n                                onClick={() => {\n                                    if (formRef.current)\n                                        formRef.current.resetFields();\n                                }}\n                                style={{ width: \"100%\" }}\n                            >\n                                Reset\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default CreateProject;\n","import React, { useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport authService from \"services/auth.service\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport { Button, Form, Input } from \"antd\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\n\r\nconst ForgotPasswordModal = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const onFinish = (data) => {\r\n        authService\r\n            .forgotPassword(data.email)\r\n            .then((data) => {\r\n                if (data.data.status === \"OK\") {\r\n                    toast.success(\"Email has been sent successfully.\");\r\n                    setIsOpen(false);\r\n                }\r\n            })\r\n            .catch((error) => {});\r\n    };\r\n    return (\r\n        <div>\r\n            <>\r\n                <span onClick={() => setIsOpen(!isOpen)}>Forgot password?</span>\r\n                <Modal\r\n                    title=\"Forgot Password\"\r\n                    visible={isOpen}\r\n                    footer={[]}\r\n                    onCancel={() => setIsOpen(false)}\r\n                >\r\n                    <Form\r\n                        name=\"normal_login\"\r\n                        onFinish={onFinish}\r\n                        style={{\r\n                            padding: \"100px 16px\",\r\n                            maxWidth: \"500px\",\r\n                            margin: \"auto\",\r\n                        }}\r\n                    >\r\n                        <Form.Item\r\n                            name=\"email\"\r\n                            rules={[\r\n                                {\r\n                                    type: \"email\",\r\n                                    message: \"The input is not valid E-mail!\",\r\n                                },\r\n                                {\r\n                                    required: true,\r\n                                    message: \"Please input your E-mail!\",\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input\r\n                                prefix={\r\n                                    <UserOutlined className=\"site-form-item-icon\" />\r\n                                }\r\n                                placeholder=\"Email\"\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                style={{ width: \"100%\" }}\r\n                            >\r\n                                Reset password\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ForgotPasswordModal;\r\n","// import { Button, HelperText, Input, Label } from \"@windmill/react-ui\";\r\nimport ForgotPasswordModal from \"components/ForgotPasswordModal\";\r\nimport { useUser } from \"context/UserContext\";\r\nimport Layout from \"layout/Layout\";\r\nimport React, { useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport authService from \"services/auth.service\";\r\nimport { Form, Input, Button, Typography } from \"antd\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\n\r\nconst Login = () => {\r\n    const { isLoggedIn, setUserState, authData } = useUser();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [redirectToReferrer, setRedirectToReferrer] = useState(false);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const onFinish = async (data) => {\r\n        const { email, password } = data;\r\n\r\n        try {\r\n            setIsLoading(true);\r\n            const data = await authService.login(email, password);\r\n            toast.success(\"Login successful 🔓\");\r\n\r\n            setTimeout(() => {\r\n                setUserState(data);\r\n                setRedirectToReferrer(true);\r\n                setIsLoading(false);\r\n            }, 1500);\r\n        } catch (error) {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    if (\r\n        (isLoggedIn || redirectToReferrer) &&\r\n        (authData?.super || authData?.projectId)\r\n    ) {\r\n        navigate(\"/admin\");\r\n    }\r\n\r\n    return (\r\n        <Layout title=\"Login\" loading={isLoading}>\r\n            <Form\r\n                name=\"normal_login\"\r\n                onFinish={onFinish}\r\n                style={{\r\n                    padding: \"100px 16px\",\r\n                    maxWidth: \"500px\",\r\n                    margin: \"auto\",\r\n                }}\r\n            >\r\n                <Typography.Title\r\n                    style={{ textAlign: \"center\", marginBottom: \"50px\" }}\r\n                >\r\n                    Manage IMMERSIVE\r\n                </Typography.Title>\r\n                <Form.Item\r\n                    name=\"email\"\r\n                    rules={[\r\n                        {\r\n                            type: \"email\",\r\n                            message: \"The input is not valid E-mail!\",\r\n                        },\r\n                        {\r\n                            required: true,\r\n                            message: \"Please input your E-mail!\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input\r\n                        prefix={\r\n                            <UserOutlined className=\"site-form-item-icon\" />\r\n                        }\r\n                        placeholder=\"Email\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"password\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: \"Please input your Password!\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input.Password\r\n                        prefix={\r\n                            <LockOutlined className=\"site-form-item-icon\" />\r\n                        }\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <a>\r\n                        <ForgotPasswordModal />\r\n                    </a>\r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        htmlType=\"submit\"\r\n                        style={{ width: \"100%\" }}\r\n                    >\r\n                        Log in\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport projectService from \"services/project.service\";\n\nimport { Button, Layout, PageHeader, Form, Typography } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useParams } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport ProjectFormFields from \"components/ProjectFormFields\";\n\nconst ProjectDetails = (props) => {\n    const [project, setProject] = useState(null);\n    const { isLoggedIn, authData, logout } = useUser();\n    const formRef = useRef(null);\n\n    const { id } = useParams();\n\n    useEffect(() => {\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, [id]);\n\n    const navigate = useNavigate();\n    useEffect(() => {\n        if (!isLoggedIn) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n\n        if (!authData?.super) {\n            if (authData?.projectId) {\n                navigate(`/p-admin/${authData.projectId}`);\n                return null;\n            } else {\n                logout();\n                navigate(\"/login\");\n                return null;\n            }\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    const onFinish = async (values) => {\n        const response = await projectService.saveProject(project.id, values);\n        if (response.data) toast.success(\"Saved\");\n    };\n\n    return (\n        <LayoutHOC loading={!project}>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(\"/admin\")}\n                    title={`Project - ${project?.name}`}\n                    style={{ boxShadow: \"1px 1px 10px 1px #ccc\" }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    {project && (\n                        <>\n                            <Typography.Title>\n                                Project id: {project.id}\n                            </Typography.Title>\n                            <Button\n                                onClick={() => navigate(`/p-admin/${id}`)}\n                                style={{ margin: \"16px\" }}\n                            >\n                                See client admin panel\n                            </Button>\n                            <Button\n                                onClick={() =>\n                                    navigate(\n                                        `/admin/projects/${project.id}/properties`\n                                    )\n                                }\n                                style={{ margin: \"16px\" }}\n                            >\n                                Manage properties\n                            </Button>\n                            <Form\n                                ref={formRef}\n                                name=\"normal_login\"\n                                onFinish={onFinish}\n                                style={{\n                                    padding: \" 16px\",\n                                    maxWidth: \"500px\",\n                                    margin: \"auto\",\n                                }}\n                                initialValues={project}\n                            >\n                                <ProjectFormFields />\n                                <Form.Item>\n                                    <Button\n                                        onClick={() => {\n                                            if (formRef.current)\n                                                formRef.current.resetFields();\n                                        }}\n                                        style={{ width: \"100%\" }}\n                                    >\n                                        Reset\n                                    </Button>\n                                </Form.Item>\n                            </Form>\n                        </>\n                    )}\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default ProjectDetails;\n","import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useState } from \"react\";\nimport projectService from \"services/project.service\";\n\nimport {\n    Button,\n    Drawer,\n    Dropdown,\n    Layout,\n    List,\n    Menu,\n    PageHeader,\n    Popconfirm,\n} from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport {\n    EyeFilled,\n    EyeInvisibleFilled,\n    MenuOutlined,\n    MoreOutlined,\n    StarFilled,\n} from \"@ant-design/icons\";\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst Projects = (props) => {\n    const [projects, setProjects] = useState(null);\n    const { logout, isLoggedIn, authData } = useUser();\n    const navigate = useNavigate();\n\n    const [openDrawer, setOpenDrawer] = useState(false);\n    useEffect(() => {\n        projectService.getProject().then((response) => {\n            setProjects(response.data);\n        });\n    }, []);\n\n    useEffect(() => {\n        if (!isLoggedIn) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n\n        if (!authData?.super) {\n            if (authData?.projectId) {\n                navigate(`/p-admin/${authData.projectId}`);\n                return null;\n            } else {\n                logout();\n                navigate(\"/login\");\n                return null;\n            }\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    const deleteProject = async (id) => {\n        const response = await projectService.deleteProject(id);\n        if (response.data) setProjects(response.data);\n    };\n\n    const setFeatured = async (id) => {\n        const response = await projectService.saveProject(id, {\n            featured: true,\n        });\n\n        if (response.data) setProjects(response.data);\n    };\n\n    return (\n        <LayoutHOC loading={!projects}>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => setOpenDrawer(true)}\n                    backIcon={<MenuOutlined />}\n                    title={\"Projects\"}\n                    style={{ boxShadow: \"1px 1px 10px 1px #ccc\" }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Button\n                        onClick={() => navigate(\"/admin/projects/create\")}\n                        style={{ margin: \"16px\" }}\n                    >\n                        Add project\n                    </Button>\n                    {projects && (\n                        <List\n                            itemLayout=\"horizontal\"\n                            dataSource={projects.sort((a, b) =>\n                                a.url > b.url ? 1 : -1\n                            )}\n                            renderItem={(project) => (\n                                <List.Item\n                                    actions={[\n                                        <Dropdown\n                                            overlay={\n                                                <Menu>\n                                                    <Menu.Item\n                                                        key=\"1\"\n                                                        onClick={() =>\n                                                            setFeatured(\n                                                                project.id\n                                                            )\n                                                        }\n                                                    >\n                                                        Set as featured\n                                                    </Menu.Item>\n                                                    <Menu.Divider />\n                                                    <Popconfirm\n                                                        title=\"Are you sure to delete this project?\"\n                                                        onConfirm={() =>\n                                                            deleteProject(\n                                                                project.id\n                                                            )\n                                                        }\n                                                        okText=\"Yes\"\n                                                        cancelText=\"No\"\n                                                    >\n                                                        <Menu.Item\n                                                            key=\"3\"\n                                                            danger\n                                                        >\n                                                            Delete\n                                                        </Menu.Item>\n                                                    </Popconfirm>\n                                                </Menu>\n                                            }\n                                            trigger={[\"click\"]}\n                                        >\n                                            <MoreOutlined\n                                                style={{ fontSize: \"30px\" }}\n                                            />\n                                        </Dropdown>,\n                                    ]}\n                                >\n                                    <List.Item.Meta\n                                        avatar={\n                                            project.featured ? (\n                                                <StarFilled\n                                                    style={{ fontSize: \"24px\" }}\n                                                />\n                                            ) : project.published ? (\n                                                <EyeFilled\n                                                    style={{ fontSize: \"24px\" }}\n                                                />\n                                            ) : (\n                                                <EyeInvisibleFilled\n                                                    style={{ fontSize: \"24px\" }}\n                                                />\n                                            )\n                                        }\n                                        title={project.name}\n                                        description={project.url}\n                                        onClick={() => {\n                                            navigate(\n                                                `/admin/projects/${project.id}`\n                                            );\n                                        }}\n                                    />\n                                </List.Item>\n                            )}\n                        />\n                    )}\n                </Content>\n            </Layout>\n            <Drawer\n                title=\"Menu\"\n                placement=\"left\"\n                onClose={() => setOpenDrawer(false)}\n                visible={openDrawer}\n            >\n                <Menu\n                    mode=\"inline\"\n                    style={{ width: \"100%\" }}\n                    onClick={({ item, key }) => {\n                        setOpenDrawer(false);\n                        switch (key) {\n                            case \"logout\":\n                                logout();\n                                break;\n                            case \"info\":\n                                navigate(\"/admin/contant\");\n                                break;\n                            case \"admins\":\n                                navigate(\"/admin/admins\");\n                                break;\n                            default:\n                                return;\n                        }\n                    }}\n                    activeKey=\"projects\"\n                    selectedKeys={[\"projects\"]}\n                >\n                    <Menu.Item key=\"projects\">Projects</Menu.Item>\n                    <Menu.Item key=\"info\">Constant</Menu.Item>\n                    <Menu.Item key=\"admins\">Admins</Menu.Item>\n                    <Menu.Item key=\"logout\">Logout</Menu.Item>\n                </Menu>\n            </Drawer>\n        </LayoutHOC>\n    );\n};\n\nexport default Projects;\n","import API from \"api/axios.config\";\r\n\r\nclass PropertyService {\r\n    getProperty(projectId, id) {\r\n        return API.get(`/properties/${projectId}/${id ? \"/\" + id : \"\"}`);\r\n    }\r\n    saveProperty(projectId, id, data) {\r\n        return API.put(`/properties/${projectId}/${id}`, data);\r\n    }\r\n    createProperty(projectId, data) {\r\n        return API.post(`/properties/${projectId}`, data);\r\n    }\r\n    deleteProperty(projectId, id) {\r\n        return API.delete(`/properties/${projectId}/${id}`);\r\n    }\r\n    saveStatus(projectId, id, data) {\r\n        return API.put(`/properties/${projectId}/status/${id}`, data);\r\n    }\r\n}\r\n\r\nexport default new PropertyService();\r\n","import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\nimport {\n    Button,\n    Dropdown,\n    Form,\n    Input,\n    Layout,\n    List,\n    Menu,\n    Modal,\n    PageHeader,\n    Popconfirm,\n    Select,\n} from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport { MoreOutlined } from \"@ant-design/icons\";\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport propertyService from \"services/property.service\";\nimport toast from \"react-hot-toast\";\n\nconst Properties = (props) => {\n    const formRef = useRef(null);\n    const { id } = useParams();\n    const [properties, setProperties] = useState(null);\n    const [editModalOpen, setEditModalOpen] = useState(null);\n    const { isLoggedIn, authData, logout } = useUser();\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        propertyService.getProperty(id).then((response) => {\n            setProperties(response.data);\n        });\n    }, []);\n\n    useEffect(() => {\n        if (!isLoggedIn) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n\n        if (!authData?.super) {\n            if (authData?.projectId) {\n                navigate(`/p-admin/${authData.projectId}`);\n                return null;\n            } else {\n                logout();\n                navigate(\"/login\");\n                return null;\n            }\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    const onFinish = async (values) => {\n        const response = editModalOpen?.id\n            ? await propertyService.saveProperty(id, editModalOpen.id, values)\n            : await propertyService.createProperty(id, values);\n        if (response.data) {\n            toast.success(\"Saved\");\n            setProperties(response.data);\n            setEditModalOpen(null);\n            if (formRef.current) formRef.current.resetFields();\n        }\n    };\n\n    const deleteProperty = async (propertyId) => {\n        const response = await propertyService.deleteProperty(id, propertyId);\n        if (response.data) setProperties(response.data);\n    };\n\n    const { Option } = Select;\n\n    return (\n        <LayoutHOC loading={!properties}>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(`/admin/projects/${id}`)}\n                    title={`Properties of project id: ${id}`}\n                    style={{ boxShadow: \"1px 1px 10px 1px #ccc\" }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Button\n                        onClick={() => setEditModalOpen({})}\n                        style={{ margin: \"16px\" }}\n                    >\n                        Add property\n                    </Button>\n                    <Modal\n                        visible={!!editModalOpen}\n                        onCancel={() => setEditModalOpen(null)}\n                        footer={null}\n                    >\n                        <Form\n                            name=\"normal_login\"\n                            onFinish={onFinish}\n                            style={{\n                                padding: \" 16px\",\n                                maxWidth: \"500px\",\n                                margin: \"auto\",\n                            }}\n                            ref={formRef}\n                        >\n                            <Form.Item\n                                name=\"name\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: \"Please add name!\",\n                                    },\n                                ]}\n                            >\n                                <Input placeholder=\"Name\" />\n                            </Form.Item>\n                            <Form.Item\n                                name=\"propertyId\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: \"Please add id!\",\n                                    },\n                                ]}\n                            >\n                                <Input placeholder=\"Property id\" />\n                            </Form.Item>\n\n                            <Form.Item\n                                name=\"status\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: \"Please set the status!\",\n                                    },\n                                ]}\n                            >\n                                <Select>\n                                    <Option value=\"available\">Available</Option>\n                                    <Option value=\"reserved\">Reserved</Option>\n                                    <Option value=\"sold\">Sold</Option>\n                                </Select>\n                            </Form.Item>\n\n                            <Form.Item>\n                                <Button\n                                    type=\"primary\"\n                                    htmlType=\"submit\"\n                                    style={{ width: \"100%\" }}\n                                >\n                                    Save\n                                </Button>\n                            </Form.Item>\n                        </Form>\n                    </Modal>\n                    {properties && (\n                        <List\n                            itemLayout=\"horizontal\"\n                            dataSource={properties.sort((a, b) =>\n                                a.name > b.name ? 1 : -1\n                            )}\n                            renderItem={(property) => (\n                                <List.Item\n                                    actions={[\n                                        <Dropdown\n                                            overlay={\n                                                <Menu>\n                                                    <Menu.Item\n                                                        onClick={() => {\n                                                            setEditModalOpen(\n                                                                property\n                                                            );\n                                                            formRef.current &&\n                                                                formRef.current.setFieldsValue(\n                                                                    property\n                                                                );\n                                                        }}\n                                                    >\n                                                        Edit\n                                                    </Menu.Item>\n                                                    <Menu.Divider />\n                                                    <Popconfirm\n                                                        title=\"Are you sure to delete this property?\"\n                                                        onConfirm={() =>\n                                                            deleteProperty(\n                                                                property.id\n                                                            )\n                                                        }\n                                                        okText=\"Yes\"\n                                                        cancelText=\"No\"\n                                                    >\n                                                        <Menu.Item\n                                                            key=\"3\"\n                                                            danger\n                                                        >\n                                                            Delete\n                                                        </Menu.Item>\n                                                    </Popconfirm>\n                                                </Menu>\n                                            }\n                                            trigger={[\"click\"]}\n                                        >\n                                            <MoreOutlined\n                                                style={{ fontSize: \"30px\" }}\n                                            />\n                                        </Dropdown>,\n                                    ]}\n                                    style={{\n                                        borderBottom: \"3px solid #ccc\",\n                                        paddingLeft: \"16px\",\n                                    }}\n                                >\n                                    <List.Item.Meta\n                                        title={`${property.name} (${property.status})`}\n                                        description={`Property id: ${property.propertyId}`}\n                                    />\n                                </List.Item>\n                            )}\n                        />\n                    )}\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default Properties;\n","import { Select, Table } from \"antd\";\nimport React from \"react\";\nimport toast from \"react-hot-toast\";\nimport propertyService from \"services/property.service\";\n\nconst PropertiesTable = (props) => {\n    const { properties, project, setProperties } = props;\n\n    const { Option } = Select;\n\n    const onChange = async (value, id) => {\n        const response = await propertyService.saveStatus(project.id, id, {\n            status: value,\n        });\n        if (response.data) {\n            toast.success(\"Saved\");\n            setProperties(response.data);\n        }\n    };\n    const columns = [\n        {\n            title: \"Name\",\n            dataIndex: \"name\",\n            key: \"name\",\n        },\n        {\n            title: \"Status\",\n            dataIndex: \"status\",\n            key: \"status\",\n            render: (status, property) => (\n                <Select\n                    value={status}\n                    onChange={(value) => onChange(value, property.id)}\n                    style={{ width: \"100%\" }}\n                >\n                    <Option value=\"available\">Available</Option>\n                    <Option value=\"reserved\">Reserved</Option>\n                    <Option value=\"sold\">Sold</Option>\n                </Select>\n            ),\n        },\n    ];\n    return (\n        <Table\n            dataSource={properties.sort((a, b) => {\n                return a.name > b.name ? 1 : -1;\n            })}\n            columns={columns}\n        />\n    );\n};\n\nexport default PropertiesTable;\n","import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useState } from \"react\";\nimport projectService from \"services/project.service\";\n\nimport { Drawer, Layout, Menu, PageHeader } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport { MenuOutlined } from \"@ant-design/icons\";\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport propertyService from \"services/property.service\";\nimport PropertiesTable from \"components/ProjectView/Components/PropertiesTable\";\n\nconst PropertiesClient = (props) => {\n    const { id } = useParams();\n    const [project, setProject] = useState(null);\n    const [properties, setProperties] = useState(null);\n    const { logout, isLoggedIn, authData } = useUser();\n    const navigate = useNavigate();\n\n    const [openDrawer, setOpenDrawer] = useState(false);\n    useEffect(() => {\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n\n        propertyService.getProperty(id).then((response) => {\n            setProperties(response.data);\n        });\n    }, []);\n\n    useEffect(() => {\n        if (\n            !isLoggedIn ||\n            (!authData?.super &&\n                id.toString() !== authData?.projectId.toString())\n        ) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    return (\n        <LayoutHOC loading={!project || !properties}>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => setOpenDrawer(true)}\n                    backIcon={<MenuOutlined />}\n                    title={project?.name || \"Project\"}\n                    style={{ boxShadow: \"1px 1px 10px 1px #ccc\" }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    {properties && project && (\n                        <PropertiesTable\n                            properties={properties}\n                            setProperties={setProperties}\n                            project={project}\n                        />\n                    )}\n                </Content>\n            </Layout>\n            <Drawer\n                title=\"Menu\"\n                placement=\"left\"\n                onClose={() => setOpenDrawer(false)}\n                visible={openDrawer}\n            >\n                <Menu\n                    mode=\"inline\"\n                    style={{ width: \"100%\" }}\n                    onClick={({ item, key }) => {\n                        setOpenDrawer(false);\n                        switch (key) {\n                            case \"logout\":\n                                logout();\n                                break;\n                            case \"visit\":\n                                navigate(`/p/${project.url}`);\n                                break;\n                            case \"analytics\":\n                                navigate(`/p-admin/${project.url}/analytics`);\n                                break;\n                            default:\n                                return;\n                        }\n                    }}\n                    activeKey=\"properties\"\n                    selectedKeys={[\"properties\"]}\n                >\n                    <Menu.Item key=\"properties\">Properties</Menu.Item>\n                    <Menu.Item key=\"analytics\">Analytics</Menu.Item>\n                    <Menu.Item key=\"visit\">Visit project</Menu.Item>\n                    <Menu.Item key=\"logout\">Logout</Menu.Item>\n                </Menu>\n            </Drawer>\n        </LayoutHOC>\n    );\n};\n\nexport default PropertiesClient;\n","import history from \"helpers/history\";\nimport Layout from \"layout/Layout\";\nimport Admins from \"pages/Admins\";\nimport Constants from \"pages/Constants\";\nimport CreateProject from \"pages/CreateProject\";\nimport Login from \"pages/Login\";\nimport ProjectDetails from \"pages/ProjectDetails\";\nimport Projects from \"pages/Projects\";\nimport Properties from \"pages/Properties\";\nimport PropertiesClient from \"pages/PropertiesClient\";\nimport { lazy, Suspense } from \"react\";\nimport { Toaster } from \"react-hot-toast\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\n\nconst Home = lazy(() => import(\"pages/Home\"));\nconst Project = lazy(() => import(\"pages/Project\"));\n\nconst ResetPassword = lazy(() => import(\"pages/ResetPassword\"));\n// const Preview = lazy(() => import(\"pages/Preview\"));\n\nfunction App() {\n    return (\n        <BrowserRouter history={history}>\n            <Suspense\n                fallback={<Layout>{/* <Spinner size={100} /> */}</Layout>}\n            >\n                <>\n                    <Toaster position=\"top-right\" />\n                    <Routes>\n                        <Route exact path={\"/\"} element={<Home />} />\n                        <Route path=\"/login\" element={<Login />} />\n                        <Route\n                            exact\n                            path=\"/admin\"\n                            element={<Projects />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/projects/:id\"\n                            element={<ProjectDetails />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/projects/create\"\n                            element={<CreateProject />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/projects/:id/properties\"\n                            element={<Properties />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/contant\"\n                            element={<Constants />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/admins\"\n                            element={<Admins />}\n                        ></Route>\n\n                        <Route\n                            path=\"/reset-password\"\n                            element={<ResetPassword />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/p/:id\"\n                            element={<Project />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/p-admin/:id\"\n                            element={<PropertiesClient />}\n                        ></Route>\n\n                        <Route\n                            path=\"*\"\n                            element={<h1>404 Error Found</h1>}\n                        ></Route>\n                    </Routes>\n                </>\n            </Suspense>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { UserProvider } from \"context/UserContext\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n    <HelmetProvider>\n        <UserProvider>\n            <App />\n        </UserProvider>\n    </HelmetProvider>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\n\r\nconst Layout = ({ children, title, loading, description, isProject }) => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>{title || \"Home\"} | IMMERSIV </title>\r\n                <meta\r\n                    name=\"description\"\r\n                    content={\r\n                        description ||\r\n                        \"IMMERSIV is a digital interactive sales experience for unbuilt environments\"\r\n                    }\r\n                />\r\n            </Helmet>\r\n\r\n            {loading ? null : (\r\n                <div style={{ flex: 1, display: isProject ? \"flex\" : \"block\" }}>\r\n                    {children}\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Layout;\r\n","import API from \"api/axios.config\";\r\n\r\nclass ProjectService {\r\n    getProject(id) {\r\n        return API.get(`/projects${id ? \"/\" + id : \"\"}`);\r\n    }\r\n\r\n    getProjectByUrl(id) {\r\n        return API.get(`/projects/url/${id}`);\r\n    }\r\n\r\n    getFeaturedProject() {\r\n        return API.get(`/projects/__featured__`);\r\n    }\r\n    saveProject(id, data) {\r\n        return API.put(`/projects/${id}`, data);\r\n    }\r\n    createProject(data) {\r\n        return API.post(`/projects`, data);\r\n    }\r\n    deleteProject(id) {\r\n        return API.delete(`/projects/${id}`);\r\n    }\r\n}\r\n\r\nexport default new ProjectService();\r\n"],"sourceRoot":""}