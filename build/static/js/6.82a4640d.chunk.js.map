{"version":3,"sources":["helpers/useQuery.js","pages/ResetPassword.jsx"],"names":["useQuery","URLSearchParams","useLocation","search","ResetPassword","useState","msg","setMsg","isResetting","setIsResetting","query","token","get","email","navigate","useNavigate","useEffect","authService","checkToken","then","data","catch","e","console","error","response","Layout","title","showForm","labelCol","xs","span","sm","wrapperCol","name","onFinish","resetPassword","password","password2","status","toast","success","message","setTimeout","err","style","padding","maxWidth","margin","Title","textAlign","marginBottom","Item","label","rules","required","min","hasFeedback","Password","dependencies","getFieldValue","validator","_","value","Promise","reject","Error","resolve","offset","type","htmlType","width"],"mappings":"6HAMeA,MAJf,WACE,OAAO,IAAIC,gBAAgBC,cAAcC,S,mFCsJ5BC,UAjJO,WAClB,MAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAsCF,oBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAEMC,EAAQV,IACRW,EAAQD,EAAME,IAAI,SAClBC,EAAQH,EAAME,IAAI,SAClBE,EAAWC,cACjBC,qBAAU,WACNC,IACKC,WAAWP,EAAOE,GAClBM,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcb,EAAOa,MAC1BC,OAAM,SAACC,GAAD,OAAOC,QAAQC,MAAMF,EAAEG,eACnC,CAACd,EAAOE,IAoBX,OACI,cAACa,EAAA,EAAD,CAAQC,MAAM,iBAAd,SACKrB,EAAIsB,SACD,eAAC,IAAD,CACIC,SAAU,CACNC,GAAI,CACAC,KAAM,IAEVC,GAAI,CACAD,KAAM,IAGdE,WAAY,CACRH,GAAI,CACAC,KAAM,IAEVC,GAAI,CACAD,KAAM,KAGdG,KAAK,eACLC,SAvCC,SAACf,GACdX,GAAe,GACfQ,IACKmB,cAAczB,EAAOE,EAAOO,EAAKiB,SAAUjB,EAAKkB,WAChDnB,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACe,UAAhBA,EAAKmB,QAITC,IAAMC,QAAQrB,EAAKsB,SACnBC,YAAW,WACP7B,EAAS,YACV,MANCL,GAAe,MAQtBY,OAAM,SAACuB,GACJnC,GAAe,OAyBXoC,MAAO,CACHC,QAAS,aACTC,SAAU,QACVC,OAAQ,QAtBhB,UAyBI,cAAC,IAAWC,MAAZ,CACIJ,MAAO,CAAEK,UAAW,SAAUC,aAAc,QADhD,4BAKA,cAAC,IAAKC,KAAN,CACIlB,KAAK,WACLmB,MAAM,WACNC,MAAO,CACH,CACIC,UAAU,EACVb,QACI,sDACJc,IAAK,IAGbC,aAAW,EAXf,SAaI,cAAC,IAAMC,SAAP,MAGJ,cAAC,IAAKN,KAAN,CACIlB,KAAK,UACLmB,MAAM,mBACNM,aAAc,CAAC,YACfF,aAAW,EACXH,MAAO,CACH,CACIC,UAAU,EACVb,QAAS,iCAEb,gBAAGkB,EAAH,EAAGA,cAAH,MAAwB,CACpBC,UADoB,SACVC,EAAGC,GACT,OACKA,GACDH,EAAc,cAAgBG,EAK3BC,QAAQC,OACX,IAAIC,MACA,qDALGF,QAAQG,cAhBnC,SA4BI,cAAC,IAAMT,SAAP,MAGJ,cAAC,IAAKN,KAAN,CACInB,WAAY,CACRH,GAAI,CACAC,KAAM,GACNqC,OAAQ,GAEZpC,GAAI,CACAD,KAAM,GACNqC,OAAQ,IARpB,SAYK5D,EACG,cAAC,IAAD,IAEA,cAAC,IAAD,CACI6D,KAAK,UACLC,SAAS,SACTzB,MAAO,CAAE0B,MAAO,QAHpB,iCAWZ,8BAAMjE,EAAIoC","file":"static/js/6.82a4640d.chunk.js","sourcesContent":["import { useLocation } from \"react-router-dom\";\r\n\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nexport default useQuery;\r\n","import useQuery from \"helpers/useQuery\";\r\nimport Layout from \"layout/Layout\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport authService from \"services/auth.service\";\r\nimport { Button, Form, Input, Spin, Typography } from \"antd\";\r\n\r\nconst ResetPassword = () => {\r\n    const [msg, setMsg] = useState(\"\");\r\n    const [isResetting, setIsResetting] = useState(false);\r\n\r\n    const query = useQuery();\r\n    const token = query.get(\"token\");\r\n    const email = query.get(\"email\");\r\n    const navigate = useNavigate();\r\n    useEffect(() => {\r\n        authService\r\n            .checkToken(token, email)\r\n            .then(({ data }) => setMsg(data))\r\n            .catch((e) => console.error(e.response));\r\n    }, [token, email]);\r\n\r\n    const onFinish = (data) => {\r\n        setIsResetting(true);\r\n        authService\r\n            .resetPassword(token, email, data.password, data.password2)\r\n            .then(({ data }) => {\r\n                if (data.status === \"error\") {\r\n                    setIsResetting(false);\r\n                    return;\r\n                }\r\n                toast.success(data.message);\r\n                setTimeout(() => {\r\n                    navigate(\"/login\");\r\n                }, 2000);\r\n            })\r\n            .catch((err) => {\r\n                setIsResetting(false);\r\n            });\r\n    };\r\n    return (\r\n        <Layout title=\"Reset Password\">\r\n            {msg.showForm ? (\r\n                <Form\r\n                    labelCol={{\r\n                        xs: {\r\n                            span: 24,\r\n                        },\r\n                        sm: {\r\n                            span: 8,\r\n                        },\r\n                    }}\r\n                    wrapperCol={{\r\n                        xs: {\r\n                            span: 24,\r\n                        },\r\n                        sm: {\r\n                            span: 16,\r\n                        },\r\n                    }}\r\n                    name=\"normal_login\"\r\n                    onFinish={onFinish}\r\n                    style={{\r\n                        padding: \"100px 16px\",\r\n                        maxWidth: \"500px\",\r\n                        margin: \"auto\",\r\n                    }}\r\n                >\r\n                    <Typography.Title\r\n                        style={{ textAlign: \"center\", marginBottom: \"50px\" }}\r\n                    >\r\n                        Reset password\r\n                    </Typography.Title>\r\n                    <Form.Item\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message:\r\n                                    \"Please input your password at least 6 symbols long!\",\r\n                                min: 6,\r\n                            },\r\n                        ]}\r\n                        hasFeedback\r\n                    >\r\n                        <Input.Password />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        name=\"confirm\"\r\n                        label=\"Confirm Password\"\r\n                        dependencies={[\"password\"]}\r\n                        hasFeedback\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: \"Please confirm your password!\",\r\n                            },\r\n                            ({ getFieldValue }) => ({\r\n                                validator(_, value) {\r\n                                    if (\r\n                                        !value ||\r\n                                        getFieldValue(\"password\") === value\r\n                                    ) {\r\n                                        return Promise.resolve();\r\n                                    }\r\n\r\n                                    return Promise.reject(\r\n                                        new Error(\r\n                                            \"The two passwords that you entered do not match!\"\r\n                                        )\r\n                                    );\r\n                                },\r\n                            }),\r\n                        ]}\r\n                    >\r\n                        <Input.Password />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        wrapperCol={{\r\n                            xs: {\r\n                                span: 24,\r\n                                offset: 0,\r\n                            },\r\n                            sm: {\r\n                                span: 16,\r\n                                offset: 8,\r\n                            },\r\n                        }}\r\n                    >\r\n                        {isResetting ? (\r\n                            <Spin />\r\n                        ) : (\r\n                            <Button\r\n                                type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                style={{ width: \"100%\" }}\r\n                            >\r\n                                Reset password\r\n                            </Button>\r\n                        )}\r\n                    </Form.Item>\r\n                </Form>\r\n            ) : (\r\n                <div>{msg.message}</div>\r\n            )}\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default ResetPassword;\r\n"],"sourceRoot":""}