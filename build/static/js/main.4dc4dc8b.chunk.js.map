{"version":3,"sources":["services/auth.service.js","services/constant.service.js","api/axios.config.js","layout/Layout.jsx","helpers/history.js","helpers/WithAxios.js","context/UserContext.jsx","services/admin.service.js","hooks/useLoginCheck.js","pages/Admins.jsx","services/ga.service.js","components/DashboardItem/DataItems/ChartItem/ChartItem.js","pages/AnalyticClient.jsx","pages/Constants.jsx","components/ProjectFormFields.jsx","pages/CreateProject.jsx","components/ForgotPasswordModal.jsx","pages/Login.jsx","pages/ProjectDetails.jsx","pages/Projects.jsx","services/property.service.js","components/ProjectView/Components/PropertiesTable.jsx","pages/Properties.jsx","pages/PropertiesAdmin.jsx","services/utils.service.js","pages/MediaAdmin.jsx","pages/PropertiesClient.jsx","App.js","reportWebVitals.js","index.js","services/project.service.js"],"names":["AuthService","email","password","a","API","post","data","token","localStorage","removeItem","password2","username","get","ConstantService","put","axios","create","baseURL","withCredentials","interceptors","request","use","req","getItem","headers","error","Promise","reject","Layout","children","title","loading","description","isProject","name","content","style","flex","display","createBrowserHistory","WithAxios","useUser","isInitiated","logout","useEffect","response","originalRequest","config","status","url","resolve","history","push","_retry","res","setItem","UserContext","createContext","UserProvider","useState","authData","setAuthData","isLoggedIn","setIsLoggedIn","setIsInitiated","getTokenData","decoded","jwt_decode","Provider","value","setUserState","setUserInfo","authService","context","useContext","undefined","Error","id","delete","useLoginCheck","navigate","useNavigate","super","projectId","Admins","props","formRef","useRef","admins","setAdmins","editModalOpen","setEditModalOpen","adminService","getAdmin","then","onFinish","values","createAdmin","toast","success","current","resetFields","deleteAdmin","height","background","onBack","boxShadow","position","zIndex","width","overflow","padding","paddingTop","maxWidth","margin","onClick","visible","onCancel","footer","ref","Item","rules","required","message","type","placeholder","htmlType","itemLayout","dataSource","sort","b","renderItem","admin","actions","overlay","onConfirm","okText","cancelText","danger","trigger","MoreOutlined","fontSize","borderBottom","paddingLeft","Meta","locked","metrics","dimensions","period","start","finish","ChartItem","column","seconds","isDate","dataRefined","humanizeString","columnHeaders","replace","rows","map","i","moment","format","parseInt","chartType","options","legend","chartArea","allowHtml","AnalyticClient","useParams","project","setProject","dateData","setDateData","cityData","setCityData","deviceData","setDeviceData","sourceData","setSourceData","subtract","setPeriod","toString","projectService","getProject","length","getMetricData","gaService","getGA","catch","err","RangePicker","size","defaultValue","onChange","m","allowClear","textAlign","flexDirection","flexWrap","alignItems","justifyContent","xKey","valKey","Constants","constants","setConstants","constantService","getConstant","setFieldsValue","saveConstant","initialValues","ProjectFormFields","label","extra","min","valuePropName","wrapperCol","offset","span","CreateProject","createProject","labelCol","ForgotPasswordModal","isOpen","setIsOpen","forgotPassword","prefix","UserOutlined","className","Login","isLoading","setIsLoading","redirectToReferrer","setRedirectToReferrer","login","setTimeout","Title","marginBottom","Password","LockOutlined","ProjectDetails","saveProject","projectAddress","galleryAddress","propertiesAddress","Paragraph","copy","Projects","projects","setProjects","openDrawer","setOpenDrawer","deleteProject","setFeatured","featured","backIcon","MenuOutlined","Divider","avatar","StarFilled","published","EyeFilled","EyeInvisibleFilled","placement","onClose","mode","item","key","activeKey","selectedKeys","ids","Option","Select","transferOrientationToObject","o","Orientation","indexOf","N","S","E","W","transferOrientationToString","EditableCell","editing","dataIndex","inputType","property","index","restProps","inputNode","PropertiesTable","properties","setProperties","selectedProperties","setSelectedProperties","editingKey","setEditingKey","Form","useForm","form","isEditing","cancel","save","validateFields","propertyService","saveProperty","console","log","deleteProperty","mergedColumns","sorter","Name","sortDirections","editable","Availability","onFilter","Surface","Price","BathroomsCount","render","_","Link","marginRight","disabled","edit","col","onCell","onAddProperty","createProperty","newProperties","newProperty","document","querySelector","scrollTop","component","components","body","cell","bordered","d","columns","rowClassName","rowSelection","selectedRows","pagination","tableLayout","scroll","y","Properties","getProperty","PropertiesAdmin","MediaAdmin","addMedia","handleMove","mediaId","down","moveMedia","handleDelete","deleteMedia","customUpload","action","file","filename","onError","onProgress","onSuccess","utilsService","signUrl","signedRequest","s3res","thumbnail","media","YouTube","videoId","alt","src","backgroundColor","level","hidden","accept","listType","maxCount","customRequest","icon","UploadOutlined","PropertiesClient","Home","lazy","Project","ResetPassword","App","fallback","exact","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById","ProjectService","params"],"mappings":"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","file":"static/js/main.4dc4dc8b.chunk.js","sourcesContent":["import API from \"api/axios.config\";\r\n\r\nclass AuthService {\r\n    async login(email, password) {\r\n        const { data } = await API.post(\"/auth/login\", {\r\n            email,\r\n            password,\r\n        });\r\n        return data;\r\n    }\r\n\r\n    async googleLogin(token) {\r\n        const { data } = await API.post(\"/auth/google\", {\r\n            token,\r\n        });\r\n        return data;\r\n    }\r\n\r\n    logout() {\r\n        localStorage.removeItem(\"user\");\r\n        localStorage.removeItem(\"token\");\r\n        localStorage.removeItem(\"expiresAt\");\r\n    }\r\n\r\n    forgotPassword(email) {\r\n        return API.post(\"/auth/forgot-password\", {\r\n            email,\r\n        });\r\n    }\r\n\r\n    checkToken(token, email) {\r\n        return API.post(\"auth/check-token\", {\r\n            token,\r\n            email,\r\n        });\r\n    }\r\n\r\n    resetPassword(token, email, password, password2) {\r\n        return API.post(\"auth/reset-password\", {\r\n            token,\r\n            email,\r\n            password,\r\n            password2,\r\n        });\r\n    }\r\n\r\n    register(username, email, password) {\r\n        return API.post(\"auth/signup\", {\r\n            username,\r\n            email,\r\n            password,\r\n        });\r\n    }\r\n\r\n    getCurrentUser() {\r\n        return API.get(\"/users/profile\");\r\n    }\r\n}\r\n\r\nexport default new AuthService();\r\n","import API from \"api/axios.config\";\r\n\r\nclass ConstantService {\r\n    getConstant() {\r\n        return API.get(`/constant`);\r\n    }\r\n    saveConstant(data) {\r\n        return API.put(`/constant`, data);\r\n    }\r\n}\r\n\r\nexport default new ConstantService();\r\n","import axios from \"axios\";\r\n\r\nconst baseURL =\r\n    process.env.NODE_ENV === \"production\"\r\n        ? \"https://tour.immersiv.com.au/api\"\r\n        : \"http://localhost:5000/api\";\r\n\r\nconst API = axios.create({\r\n    baseURL,\r\n    withCredentials: true,\r\n});\r\n\r\nAPI.interceptors.request.use(\r\n    function (req) {\r\n        const token = localStorage.getItem(\"token\");\r\n        if (token) req.headers[\"auth-token\"] = token;\r\n        return req;\r\n    },\r\n    function (error) {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default API;\r\n","import React from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\n\r\nconst Layout = ({ children, title, loading, description, isProject }) => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>{title || \"Home\"} | IMMERSIV </title>\r\n                <meta\r\n                    name=\"description\"\r\n                    content={\r\n                        description ||\r\n                        \"IMMERSIV is a digital interactive sales experience for unbuilt environments\"\r\n                    }\r\n                />\r\n            </Helmet>\r\n\r\n            {loading ? null : (\r\n                <div style={{ flex: 1, display: isProject ? \"flex\" : \"block\" }}>\r\n                    {children}\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Layout;\r\n","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();\n","import { useEffect } from \"react\";\nimport API from \"api/axios.config\";\nimport { useUser } from \"context/UserContext\";\nimport history from \"helpers/history\";\n\nconst WithAxios = ({ children }) => {\n    const { isInitiated, logout } = useUser();\n\n    useEffect(() => {\n        API.interceptors.response.use(\n            (response) => response,\n            async (error) => {\n                const originalRequest = error.config;\n                if (\n                    error.response.status === 401 &&\n                    originalRequest.url === \"/auth/refresh-token\"\n                ) {\n                    return new Promise((resolve, reject) => {\n                        logout();\n                        history.push(\"/login\");\n                        reject(error);\n                    });\n                }\n\n                if (error.response.status === 401 && !originalRequest._retry) {\n                    try {\n                        originalRequest._retry = true;\n                        const res = await API.post(\"/auth/refresh-token\");\n                        localStorage.setItem(\"token\", res.data.token);\n                        return API(originalRequest);\n                    } catch (error) {\n                        logout();\n                        history.push(\"/login\");\n                    }\n                }\n                return Promise.reject(error);\n            }\n        );\n    }, []);\n\n    return isInitiated ? children : null;\n};\n\nexport default WithAxios;\n","import WithAxios from \"helpers/WithAxios\";\r\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport authService from \"services/auth.service\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nconst UserContext = createContext();\r\n\r\nconst UserProvider = ({ children }) => {\r\n    const [authData, setAuthData] = useState({\r\n        token: \"\",\r\n    });\r\n\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    const [isInitiated, setIsInitiated] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem(\"token\")) {\r\n            setIsLoggedIn(true);\r\n            setAuthData(() => getTokenData(localStorage.getItem(\"token\")));\r\n        }\r\n        setIsInitiated(true);\r\n    }, []);\r\n\r\n    const getTokenData = (token) => {\r\n        if (token) {\r\n            const decoded = jwt_decode(token);\r\n            return {\r\n                ...decoded,\r\n                token,\r\n            };\r\n        } else\r\n            return {\r\n                token: \"\",\r\n            };\r\n    };\r\n\r\n    const setUserInfo = (data) => {\r\n        const { token } = data;\r\n\r\n        setIsLoggedIn(true);\r\n\r\n        setAuthData(() => getTokenData(token));\r\n        localStorage.setItem(\"token\", token);\r\n    };\r\n\r\n    const logout = () => {\r\n        setAuthData(null);\r\n        setIsLoggedIn(false);\r\n\r\n        authService.logout();\r\n    };\r\n\r\n    return (\r\n        <UserContext.Provider\r\n            value={{\r\n                setUserState: (data) => setUserInfo(data),\r\n                logout,\r\n                isInitiated,\r\n                isLoggedIn,\r\n                setIsLoggedIn,\r\n                authData,\r\n                setAuthData,\r\n            }}\r\n        >\r\n            <WithAxios>{children}</WithAxios>\r\n        </UserContext.Provider>\r\n    );\r\n};\r\n\r\nconst useUser = () => {\r\n    const context = useContext(UserContext);\r\n\r\n    if (context === undefined) {\r\n        throw new Error(\"useUser must be used within UserProvider\");\r\n    }\r\n    return context;\r\n};\r\n\r\nexport { UserProvider, useUser };\r\n","import API from \"api/axios.config\";\r\n\r\nclass AdminService {\r\n    getAdmin() {\r\n        return API.get(`/admins`);\r\n    }\r\n\r\n    createAdmin(data) {\r\n        return API.post(`/admins`, data);\r\n    }\r\n\r\n    deleteAdmin(id) {\r\n        return API.delete(`/admins/${id}`);\r\n    }\r\n}\r\n\r\nexport default new AdminService();\r\n","import { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useUser } from \"context/UserContext\";\n\nconst useLoginCheck = () => {\n    const navigate = useNavigate();\n    const { isLoggedIn, authData, logout, isInitiated } = useUser();\n    useEffect(() => {\n        if (isInitiated) {\n            if (!isLoggedIn) {\n                logout();\n                navigate(\"/login\");\n                return null;\n            }\n\n            if (!authData?.super) {\n                if (authData?.projectId) {\n                    navigate(`/p-admin/${authData.projectId}`);\n                    return null;\n                } else {\n                    logout();\n                    navigate(\"/login\");\n                    return null;\n                }\n            }\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId, isInitiated]);\n};\n\nexport default useLoginCheck;\n","import LayoutHOC from \"layout/Layout\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport {\r\n    Button,\r\n    Dropdown,\r\n    Form,\r\n    Input,\r\n    Layout,\r\n    List,\r\n    Menu,\r\n    Modal,\r\n    PageHeader,\r\n    Popconfirm,\r\n} from \"antd\";\r\nimport { Content } from \"antd/lib/layout/layout\";\r\nimport { MoreOutlined } from \"@ant-design/icons\";\r\nimport { useUser } from \"context/UserContext\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport toast from \"react-hot-toast\";\r\nimport adminService from \"services/admin.service\";\r\nimport useLoginCheck from \"hooks/useLoginCheck\";\r\n\r\nconst Admins = (props) => {\r\n    const formRef = useRef(null);\r\n    const [admins, setAdmins] = useState(null);\r\n    const [editModalOpen, setEditModalOpen] = useState(null);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        adminService.getAdmin().then((response) => {\r\n            setAdmins(response.data);\r\n        });\r\n    }, []);\r\n\r\n    useLoginCheck();\r\n\r\n    const onFinish = async (values) => {\r\n        const response = await adminService.createAdmin(values);\r\n        if (response.data) {\r\n            toast.success(\"Saved\");\r\n            setAdmins(response.data);\r\n            setEditModalOpen(null);\r\n            if (formRef.current) formRef.current.resetFields();\r\n        }\r\n    };\r\n\r\n    const deleteAdmin = async (id) => {\r\n        const response = await adminService.deleteAdmin(id);\r\n        if (response.data) setAdmins(response.data);\r\n    };\r\n\r\n    return (\r\n        <LayoutHOC loading={!admins}>\r\n            <Layout\r\n                style={{\r\n                    height: \"100%\",\r\n                    display: \"flex\",\r\n                    flex: 1,\r\n                    background: \"white\",\r\n                }}\r\n            >\r\n                <PageHeader\r\n                    onBack={() => navigate(`/admin`)}\r\n                    title={`Admins`}\r\n                    style={{\r\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\r\n                        position: \"fixed\",\r\n                        zIndex: 100,\r\n                        width: \"100%\",\r\n                    }}\r\n                />\r\n\r\n                <Content\r\n                    style={{\r\n                        flex: 1,\r\n                        overflow: \"auto\",\r\n                        padding: \"16px\",\r\n                        paddingTop: \"100px\",\r\n                        maxWidth: \"800px\",\r\n                        width: \"100%\",\r\n                        margin: \"auto\",\r\n                    }}\r\n                >\r\n                    <Button\r\n                        onClick={() => setEditModalOpen({})}\r\n                        style={{ margin: \"16px\" }}\r\n                    >\r\n                        Add admin\r\n                    </Button>\r\n                    <Modal\r\n                        visible={!!editModalOpen}\r\n                        onCancel={() => setEditModalOpen(null)}\r\n                        footer={null}\r\n                    >\r\n                        <Form\r\n                            onFinish={onFinish}\r\n                            style={{\r\n                                padding: \" 16px\",\r\n                                maxWidth: \"500px\",\r\n                                margin: \"auto\",\r\n                            }}\r\n                            ref={formRef}\r\n                        >\r\n                            <Form.Item\r\n                                name=\"email\"\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: \"Please add name!\",\r\n                                        type: \"email\",\r\n                                    },\r\n                                ]}\r\n                            >\r\n                                <Input placeholder=\"Email\" />\r\n                            </Form.Item>\r\n\r\n                            <Form.Item>\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    htmlType=\"submit\"\r\n                                    style={{ width: \"100%\" }}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Modal>\r\n                    {admins && (\r\n                        <List\r\n                            itemLayout=\"horizontal\"\r\n                            dataSource={admins.sort((a, b) =>\r\n                                a.name > b.name ? 1 : -1\r\n                            )}\r\n                            renderItem={(admin) => (\r\n                                <List.Item\r\n                                    actions={[\r\n                                        <Dropdown\r\n                                            overlay={\r\n                                                <Menu>\r\n                                                    <Popconfirm\r\n                                                        title=\"Are you sure to delete this admin?\"\r\n                                                        onConfirm={() =>\r\n                                                            deleteAdmin(\r\n                                                                admin.email\r\n                                                            )\r\n                                                        }\r\n                                                        okText=\"Yes\"\r\n                                                        cancelText=\"No\"\r\n                                                    >\r\n                                                        <Menu.Item\r\n                                                            key=\"3\"\r\n                                                            danger\r\n                                                        >\r\n                                                            Delete\r\n                                                        </Menu.Item>\r\n                                                    </Popconfirm>\r\n                                                </Menu>\r\n                                            }\r\n                                            trigger={[\"click\"]}\r\n                                        >\r\n                                            <MoreOutlined\r\n                                                style={{ fontSize: \"30px\" }}\r\n                                            />\r\n                                        </Dropdown>,\r\n                                    ]}\r\n                                    style={{\r\n                                        borderBottom: \"3px solid #ccc\",\r\n                                        paddingLeft: \"16px\",\r\n                                    }}\r\n                                >\r\n                                    <List.Item.Meta\r\n                                        title={admin.email}\r\n                                        description={\r\n                                            admin.locked\r\n                                                ? \"Locked\"\r\n                                                : \"Not locked\"\r\n                                        }\r\n                                    />\r\n                                </List.Item>\r\n                            )}\r\n                        />\r\n                    )}\r\n                </Content>\r\n            </Layout>\r\n        </LayoutHOC>\r\n    );\r\n};\r\n\r\nexport default Admins;\r\n","import API from \"api/axios.config\";\r\n\r\nclass GAService {\r\n    getGA(projectId, metrics, dimensions, period) {\r\n        return API.post(`/ga/${projectId}`, {\r\n            metrics,\r\n            dimensions,\r\n            start: period[0],\r\n            finish: period[1],\r\n        });\r\n    }\r\n\r\n    getAccessToken() {\r\n        return API.get(`/ga/access-token`);\r\n    }\r\n}\r\n\r\nexport default new GAService();\r\n","import React from \"react\";\n\nimport { Chart } from \"react-google-charts\";\nimport moment from \"moment\";\nimport humanizeString from \"string-humanize\";\n\nexport const ChartItem = (props) => {\n    const {\n        data,\n        title,\n        column,\n        seconds,\n        type = \"LineChart\",\n        isDate = true,\n    } = props;\n\n    const dataRefined = data\n        ? [\n              [\n                  humanizeString(data.columnHeaders[0].name.replace(\"ga:\", \"\")),\n                  humanizeString(\n                      data.columnHeaders[column].name.replace(\"ga:\", \"\")\n                  ),\n              ],\n              ...data.rows\n                  .map((i) => [\n                      isDate ? moment(i[0], \"YYYYMMDD\").format(\"D MMM\") : i[0],\n                      parseInt(i[column]) / (seconds ? 60 : 1),\n                  ])\n                  .sort((a, b) => (isDate ? 0 : b[1] - a[1])),\n          ]\n        : [];\n    return (\n        <div style={{ maxWidth: \"400px\", margin: \"20px\", width: \"100%\" }}>\n            <Chart\n                chartType={type}\n                width=\"100%\"\n                height=\"400px\"\n                data={dataRefined}\n                options={{\n                    title,\n                    legend: {\n                        position: \"none\",\n                    },\n                    chartArea: { width: \"85%\", height: \"80%\" },\n                    allowHtml: true,\n                    width: \"100%\",\n                }}\n            />\n        </div>\n    );\n};\n\nexport default ChartItem;\n","import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { DatePicker, Layout, PageHeader } from \"antd\";\n\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useNavigate, useParams } from \"react-router-dom\";\n\nimport projectService from \"services/project.service\";\nimport moment from \"moment\";\nimport gaService from \"services/ga.service\";\nimport toast from \"react-hot-toast\";\nimport { ChartItem } from \"components/DashboardItem/DataItems\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\nimport { useUser } from \"context/UserContext\";\n\nconst AnalyticClient = (props) => {\n    const { id } = useParams();\n\n    const [project, setProject] = useState(null);\n    const [dateData, setDateData] = useState(null);\n    const [cityData, setCityData] = useState(null);\n    const [deviceData, setDeviceData] = useState(null);\n    const [sourceData, setSourceData] = useState(null);\n    const [period, setPeriod] = useState([\n        moment().subtract(7, \"day\").format(),\n        moment().format(),\n    ]);\n    const navigate = useNavigate();\n    const { logout, isLoggedIn, authData } = useUser();\n\n    useEffect(() => {\n        if (\n            !isLoggedIn ||\n            (!authData?.super &&\n                id.toString() !== authData?.projectId.toString())\n        ) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    useEffect(() => {\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n\n    useEffect(() => {\n        if (period.length === 2 && project?.id) {\n            setDateData(null);\n            setCityData(null);\n            setDeviceData(null);\n            setSourceData(null);\n            getMetricData();\n        }\n    }, [period[0], period[1], project?.id]);\n\n    const getMetricData = () => {\n        gaService\n            .getGA(\n                project.id,\n                \"ga:users,ga:newUsers,ga:pageviews,ga:sessions,ga:sessionDuration\",\n                \"ga:date\",\n                period\n            )\n            .then((res) => {\n                setDateData(res.data.data);\n            })\n            .catch((err) => {\n                toast.error(\"Users analytics data not loaded\");\n            });\n\n        gaService\n            .getGA(project.id, \"ga:users\", \"ga:city\", period)\n            .then((res) => {\n                setCityData(res.data.data);\n            })\n            .catch((err) => {\n                toast.error(\"Location analytics data not loaded\");\n            });\n\n        gaService\n            .getGA(project.id, \"ga:users\", \"ga:deviceCategory\", period)\n            .then((res) => {\n                setDeviceData(res.data.data);\n            })\n            .catch((err) => {\n                toast.error(\"Device analytics data not loaded\");\n            });\n\n        gaService\n            .getGA(project.id, \"ga:users\", \"ga:source\", period)\n            .then((res) => {\n                setSourceData(res.data.data);\n            })\n            .catch((err) => {\n                toast.error(\"Source analytics data not loaded\");\n            });\n    };\n\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(`/p-admin/${id}`)}\n                    title={\n                        <>\n                            Analytics\n                            <br />\n                            <DatePicker.RangePicker\n                                size=\"large\"\n                                defaultValue={[\n                                    moment().subtract(7, \"day\"),\n                                    moment(),\n                                ]}\n                                onChange={(m) =>\n                                    setPeriod([m[0].format(), m[1].format()])\n                                }\n                                allowClear={false}\n                            />\n                        </>\n                    }\n                    style={{ borderBottom: \"1px #ccc solid\" }}\n                />\n                {project && (\n                    <Content\n                        style={{\n                            flex: 1,\n                            overflow: \"auto\",\n                            paddingTop: \"100px\",\n                            padding: \"16px\",\n\n                            width: \"100%\",\n                            margin: \"auto\",\n                        }}\n                    >\n                        <div\n                            style={{\n                                textAlign: \"center\",\n                                display: \"flex\",\n                                flexDirection: \"row\",\n                                flexWrap: \"wrap\",\n                                alignItems: \"center\",\n                                justifyContent: \"center\",\n                            }}\n                        >\n                            <ChartItem\n                                data={dateData}\n                                title=\"Users\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={1}\n                            />\n                            <ChartItem\n                                data={dateData}\n                                title=\"New users\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={2}\n                            />\n                            <ChartItem\n                                data={dateData}\n                                title=\"Page views\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={3}\n                            />\n                            <ChartItem\n                                data={dateData}\n                                title=\"Sessions\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={4}\n                            />\n                            <ChartItem\n                                data={dateData}\n                                title=\"Session duration (minutes)\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={5}\n                                seconds\n                            />\n                            <ChartItem\n                                data={deviceData}\n                                title=\"Device type\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                type=\"PieChart\"\n                                column={1}\n                                seconds\n                                isDate={false}\n                            />\n                            <ChartItem\n                                data={sourceData}\n                                title=\"Source\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                type=\"BarChart\"\n                                column={1}\n                                isDate={false}\n                            />\n                            <ChartItem\n                                data={cityData}\n                                title=\"Source\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                type=\"Table\"\n                                column={1}\n                                isDate={false}\n                            />\n                        </div>\n                    </Content>\n                )}\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default AnalyticClient;\n","import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\nimport { Button, Layout, PageHeader, Form, Input } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useNavigate } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport constantService from \"services/constant.service\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\n\nconst Constants = (props) => {\n    const [constants, setConstants] = useState(null);\n    const formRef = useRef(null);\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        constantService\n            .getConstant()\n            .then((response) => {\n                if (response.data) {\n                    setConstants(response.data);\n                    formRef.current &&\n                        formRef.current.setFieldsValue(response.data);\n                } else setConstants({});\n            })\n            .catch(() => {\n                setConstants({});\n            });\n    }, []);\n\n    useLoginCheck();\n    const onFinish = async (values) => {\n        const response = await constantService.saveConstant(values);\n        if (response.data) {\n            setConstants(response.data);\n            toast.success(\"Saved\");\n        }\n    };\n\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(\"/admin\")}\n                    title=\"Constants\"\n                    style={{\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\n                        position: \"fixed\",\n                        zIndex: 100,\n                        width: \"100%\",\n                    }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        paddingTop: \"100px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Form\n                        ref={formRef}\n                        name=\"normal_login\"\n                        onFinish={onFinish}\n                        style={{\n                            padding: \" 16px\",\n                            maxWidth: \"500px\",\n                            margin: \"auto\",\n                        }}\n                        initialValues={constants}\n                    >\n                        <Form.Item name=\"email\">\n                            <Input placeholder=\"Email\" />\n                        </Form.Item>\n\n                        <Form.Item name=\"phone\">\n                            <Input placeholder=\"Phone\" />\n                        </Form.Item>\n\n                        <Form.Item name=\"call\">\n                            <Input placeholder=\"Phone in international format\" />\n                        </Form.Item>\n\n                        <Form.Item>\n                            <Button\n                                type=\"primary\"\n                                htmlType=\"submit\"\n                                style={{ width: \"100%\" }}\n                            >\n                                Save\n                            </Button>\n                        </Form.Item>\n                        <Form.Item>\n                            <Button\n                                onClick={() => {\n                                    if (formRef.current)\n                                        formRef.current.resetFields();\n                                }}\n                                style={{ width: \"100%\" }}\n                            >\n                                Reset\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default Constants;\n","import { Button, Checkbox, Form, Input, Switch } from \"antd\";\nimport React from \"react\";\n\nconst ProjectFormFields = () => {\n    return (\n        <>\n            <Form.Item\n                name=\"name\"\n                label=\"Name\"\n                rules={[\n                    {\n                        required: true,\n                        message: \"Please set name!\",\n                    },\n                ]}\n            >\n                <Input placeholder=\"Name\" />\n            </Form.Item>\n            <Form.Item\n                name=\"url\"\n                label=\"Url\"\n                rules={[\n                    {\n                        required: true,\n                        message: \"Please add url!\",\n                    },\n                ]}\n                extra=\"This is only what should appear at the end of url, for example 'best-hotel', 'sky_mall'... Do not put https://tour.immersiv.com.au/ here!\"\n            >\n                <Input placeholder=\"Url\" />\n            </Form.Item>\n\n            <Form.Item\n                name=\"projectId\"\n                label=\"Project id\"\n                rules={[\n                    {\n                        required: true,\n                        message: \"Please add project id!\",\n                    },\n                ]}\n            >\n                <Input placeholder=\"Project id\" />\n            </Form.Item>\n\n            <Form.Item\n                name=\"modelId\"\n                label=\"Model id\"\n                rules={[\n                    {\n                        required: true,\n                        message: \"Please add model id!\",\n                    },\n                ]}\n            >\n                <Input placeholder=\"Model id\" />\n            </Form.Item>\n\n            <Form.Item name=\"adminEmail\" label=\"Client login\">\n                <Input placeholder=\"Admin email\" />\n            </Form.Item>\n\n            <Form.Item\n                name=\"adminPassword\"\n                label=\"Client password\"\n                rules={[\n                    {\n                        min: 6,\n                        message: \"Must have length at least 6!\",\n                    },\n                ]}\n            >\n                <Input placeholder=\"Admin password\" />\n            </Form.Item>\n\n            <Form.Item name=\"analytic\" label=\"Analytics property\">\n                <Input placeholder=\"Google analytics property id\" />\n            </Form.Item>\n\n            <Form.Item\n                name=\"mobileNativeEvents\"\n                label=\"Mobile native events\"\n                valuePropName=\"checked\"\n            >\n                <Switch>Mobile native events</Switch>\n            </Form.Item>\n            <Form.Item\n                name=\"desktopNativeEvents\"\n                label=\"Desktop native events\"\n                valuePropName=\"checked\"\n            >\n                <Switch />\n            </Form.Item>\n\n            <Form.Item\n                name=\"published\"\n                valuePropName=\"checked\"\n                label=\"Published\"\n            >\n                <Checkbox />\n            </Form.Item>\n\n            <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                <Button\n                    type=\"primary\"\n                    htmlType=\"submit\"\n                    style={{ width: \"100%\" }}\n                >\n                    Save\n                </Button>\n            </Form.Item>\n        </>\n    );\n};\n\nexport default ProjectFormFields;\n","import LayoutHOC from \"layout/Layout\";\nimport React, { useRef } from \"react\";\nimport projectService from \"services/project.service\";\n\nimport { Button, Layout, PageHeader, Form } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useNavigate } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport ProjectFormFields from \"components/ProjectFormFields\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\n\nconst CreateProject = (props) => {\n    const formRef = useRef(null);\n\n    const navigate = useNavigate();\n\n    useLoginCheck();\n\n    const onFinish = async (values) => {\n        const response = await projectService.createProject(values);\n        if (response.data) {\n            toast.success(\"Saved\");\n            navigate(\"/admin\");\n        }\n    };\n\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(\"/admin\")}\n                    title=\"Create project\"\n                    style={{\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\n                        position: \"fixed\",\n                        zIndex: 100,\n                        width: \"100%\",\n                    }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        paddingTop: \"100px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Form\n                        ref={formRef}\n                        name=\"normal_login\"\n                        onFinish={onFinish}\n                        style={{\n                            padding: \" 16px\",\n                            maxWidth: \"500px\",\n                            margin: \"auto\",\n                        }}\n                        labelCol={{ span: 8 }}\n                        wrapperCol={{ span: 16 }}\n                    >\n                        <ProjectFormFields />\n                        <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                            <Button\n                                onClick={() => {\n                                    if (formRef.current)\n                                        formRef.current.resetFields();\n                                }}\n                                style={{ width: \"100%\" }}\n                            >\n                                Reset\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default CreateProject;\n","import React, { useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport authService from \"services/auth.service\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport { Button, Form, Input } from \"antd\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\n\r\nconst ForgotPasswordModal = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const onFinish = (data) => {\r\n        authService\r\n            .forgotPassword(data.email)\r\n            .then((data) => {\r\n                if (data.data.status === \"OK\") {\r\n                    toast.success(\"Email has been sent successfully.\");\r\n                    setIsOpen(false);\r\n                }\r\n            })\r\n            .catch((error) => {});\r\n    };\r\n    return (\r\n        <div>\r\n            <>\r\n                <span onClick={() => setIsOpen(!isOpen)}>Forgot password?</span>\r\n                <Modal\r\n                    title=\"Forgot Password\"\r\n                    visible={isOpen}\r\n                    footer={[]}\r\n                    onCancel={() => setIsOpen(false)}\r\n                >\r\n                    <Form\r\n                        name=\"normal_login\"\r\n                        onFinish={onFinish}\r\n                        style={{\r\n                            padding: \"100px 16px\",\r\n                            maxWidth: \"500px\",\r\n                            margin: \"auto\",\r\n                        }}\r\n                    >\r\n                        <Form.Item\r\n                            name=\"email\"\r\n                            rules={[\r\n                                {\r\n                                    type: \"email\",\r\n                                    message: \"The input is not valid E-mail!\",\r\n                                },\r\n                                {\r\n                                    required: true,\r\n                                    message: \"Please input your E-mail!\",\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input\r\n                                prefix={\r\n                                    <UserOutlined className=\"site-form-item-icon\" />\r\n                                }\r\n                                placeholder=\"Email\"\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                style={{ width: \"100%\" }}\r\n                            >\r\n                                Reset password\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ForgotPasswordModal;\r\n","// import { Button, HelperText, Input, Label } from \"@windmill/react-ui\";\r\nimport ForgotPasswordModal from \"components/ForgotPasswordModal\";\r\nimport { useUser } from \"context/UserContext\";\r\nimport Layout from \"layout/Layout\";\r\nimport React, { useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport authService from \"services/auth.service\";\r\nimport { Form, Input, Button, Typography } from \"antd\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\n\r\nconst Login = () => {\r\n    const { isLoggedIn, setUserState, authData } = useUser();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [redirectToReferrer, setRedirectToReferrer] = useState(false);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const onFinish = async (data) => {\r\n        const { email, password } = data;\r\n\r\n        try {\r\n            setIsLoading(true);\r\n            const data = await authService.login(email, password);\r\n            toast.success(\"Login successful 🔓\");\r\n\r\n            setTimeout(() => {\r\n                setUserState(data);\r\n                setRedirectToReferrer(true);\r\n                setIsLoading(false);\r\n            }, 1500);\r\n        } catch (error) {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    if (\r\n        (isLoggedIn || redirectToReferrer) &&\r\n        (authData?.super || authData?.projectId)\r\n    ) {\r\n        navigate(\"/admin\");\r\n    }\r\n\r\n    return (\r\n        <Layout title=\"Login\" loading={isLoading}>\r\n            <Form\r\n                name=\"normal_login\"\r\n                onFinish={onFinish}\r\n                style={{\r\n                    padding: \"100px 16px\",\r\n                    maxWidth: \"500px\",\r\n                    margin: \"auto\",\r\n                }}\r\n            >\r\n                <Typography.Title\r\n                    style={{ textAlign: \"center\", marginBottom: \"50px\" }}\r\n                >\r\n                    Manage IMMERSIVE\r\n                </Typography.Title>\r\n                <Form.Item\r\n                    name=\"email\"\r\n                    rules={[\r\n                        {\r\n                            type: \"email\",\r\n                            message: \"The input is not valid E-mail!\",\r\n                        },\r\n                        {\r\n                            required: true,\r\n                            message: \"Please input your E-mail!\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input\r\n                        prefix={\r\n                            <UserOutlined className=\"site-form-item-icon\" />\r\n                        }\r\n                        placeholder=\"Email\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"password\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: \"Please input your Password!\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input.Password\r\n                        prefix={\r\n                            <LockOutlined className=\"site-form-item-icon\" />\r\n                        }\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <a>\r\n                        <ForgotPasswordModal />\r\n                    </a>\r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        htmlType=\"submit\"\r\n                        style={{ width: \"100%\" }}\r\n                    >\r\n                        Log in\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport projectService from \"services/project.service\";\n\nimport { Button, Layout, PageHeader, Form, Typography } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useNavigate } from \"react-router-dom\";\nimport { useParams } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport ProjectFormFields from \"components/ProjectFormFields\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\nimport copy from \"copy-to-clipboard\";\n\nconst ProjectDetails = (props) => {\n    const [project, setProject] = useState(null);\n\n    const formRef = useRef(null);\n\n    const { id } = useParams();\n\n    useEffect(() => {\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, [id]);\n\n    const navigate = useNavigate();\n    useLoginCheck();\n\n    const onFinish = async (values) => {\n        const response = await projectService.saveProject(project.id, values);\n        if (response.data) toast.success(\"Saved\");\n    };\n\n    const projectAddress = project?.url\n        ? `https://tour.immersiv.com.au/p/${project.url}`\n        : \"not set yet\";\n    const galleryAddress = project?.url\n        ? `https://tour.immersiv.com.au/gallery?project=${project.url}`\n        : \"not set yet\";\n    const propertiesAddress = project?.url\n        ? `https://tour.immersiv.com.au/api/properties/properties-ue/${project.url}`\n        : \"not set yet\";\n\n    return (\n        <LayoutHOC loading={!project}>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(\"/admin\")}\n                    title={`Project - ${project?.name}`}\n                    style={{\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\n                        position: \"fixed\",\n                        zIndex: 100,\n                        width: \"100%\",\n                    }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        paddingTop: \"100px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    {project && (\n                        <>\n                            <Button\n                                onClick={() => navigate(`/p-admin/${id}`)}\n                                style={{ margin: \"16px\" }}\n                            >\n                                See client admin panel\n                            </Button>\n                            <Button\n                                onClick={() =>\n                                    navigate(\n                                        `/admin/projects/${project.id}/properties`\n                                    )\n                                }\n                                style={{ margin: \"16px\" }}\n                            >\n                                Manage properties\n                            </Button>\n                            <Button\n                                onClick={() =>\n                                    navigate(\n                                        `/admin/projects/${project.id}/media`\n                                    )\n                                }\n                                style={{ margin: \"16px\" }}\n                            >\n                                Manage media\n                            </Button>\n                            <Typography.Paragraph>\n                                {`The project full url is ${projectAddress}`}\n                                <Button\n                                    onClick={() => copy(projectAddress)}\n                                    type=\"link\"\n                                >\n                                    Copy\n                                </Button>\n                            </Typography.Paragraph>\n\n                            <Typography.Paragraph>\n                                {`The project gallery url is ${galleryAddress}`}{\" \"}\n                                <Button\n                                    onClick={() => copy(galleryAddress)}\n                                    type=\"link\"\n                                >\n                                    Copy\n                                </Button>\n                            </Typography.Paragraph>\n\n                            <Typography.Paragraph>\n                                {`The project properties api link ${propertiesAddress}`}{\" \"}\n                                <Button\n                                    onClick={() => copy(propertiesAddress)}\n                                    type=\"link\"\n                                >\n                                    Copy\n                                </Button>\n                            </Typography.Paragraph>\n\n                            <Form\n                                ref={formRef}\n                                onFinish={onFinish}\n                                style={{\n                                    padding: \" 16px\",\n                                    maxWidth: \"500px\",\n                                    margin: \"auto\",\n                                }}\n                                initialValues={project}\n                                labelCol={{ span: 8 }}\n                                wrapperCol={{ span: 16 }}\n                            >\n                                <ProjectFormFields />\n                                <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                                    <Button\n                                        onClick={() => {\n                                            if (formRef.current)\n                                                formRef.current.resetFields();\n                                        }}\n                                        style={{ width: \"100%\" }}\n                                    >\n                                        Reset\n                                    </Button>\n                                </Form.Item>\n                            </Form>\n                        </>\n                    )}\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default ProjectDetails;\n","import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useState } from \"react\";\nimport projectService from \"services/project.service\";\n\nimport {\n    Button,\n    Drawer,\n    Dropdown,\n    Layout,\n    List,\n    Menu,\n    PageHeader,\n    Popconfirm,\n} from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport {\n    EyeFilled,\n    EyeInvisibleFilled,\n    MenuOutlined,\n    MoreOutlined,\n    StarFilled,\n} from \"@ant-design/icons\";\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\n\nconst Projects = (props) => {\n    const [projects, setProjects] = useState(null);\n    const { logout } = useUser();\n    const navigate = useNavigate();\n\n    const [openDrawer, setOpenDrawer] = useState(false);\n    useEffect(() => {\n        projectService.getProject().then((response) => {\n            setProjects(response.data);\n        });\n    }, []);\n\n    useLoginCheck();\n\n    const deleteProject = async (id) => {\n        const response = await projectService.deleteProject(id);\n        if (response.data) setProjects(response.data);\n    };\n\n    const setFeatured = async (id) => {\n        const response = await projectService.saveProject(id, {\n            featured: true,\n        });\n\n        if (response.data) setProjects(response.data);\n    };\n\n    return (\n        <LayoutHOC loading={!projects}>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => setOpenDrawer(true)}\n                    backIcon={<MenuOutlined />}\n                    title={\"Projects\"}\n                    style={{\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\n                        position: \"fixed\",\n                        zIndex: 100,\n                        width: \"100%\",\n                    }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        paddingTop: \"100px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Button\n                        onClick={() => navigate(\"/admin/projects/create\")}\n                        style={{ margin: \"16px\" }}\n                    >\n                        Add project\n                    </Button>\n                    {projects && (\n                        <List\n                            itemLayout=\"horizontal\"\n                            dataSource={projects.sort((a, b) =>\n                                a.url > b.url ? 1 : -1\n                            )}\n                            renderItem={(project) => (\n                                <List.Item\n                                    actions={[\n                                        <Dropdown\n                                            overlay={\n                                                <Menu>\n                                                    <Menu.Item\n                                                        key=\"1\"\n                                                        onClick={() =>\n                                                            setFeatured(\n                                                                project.id\n                                                            )\n                                                        }\n                                                    >\n                                                        Set as featured\n                                                    </Menu.Item>\n                                                    <Menu.Divider />\n                                                    <Popconfirm\n                                                        title=\"Are you sure to delete this project?\"\n                                                        onConfirm={() =>\n                                                            deleteProject(\n                                                                project.id\n                                                            )\n                                                        }\n                                                        okText=\"Yes\"\n                                                        cancelText=\"No\"\n                                                    >\n                                                        <Menu.Item\n                                                            key=\"3\"\n                                                            danger\n                                                        >\n                                                            Delete\n                                                        </Menu.Item>\n                                                    </Popconfirm>\n                                                </Menu>\n                                            }\n                                            trigger={[\"click\"]}\n                                        >\n                                            <MoreOutlined\n                                                style={{ fontSize: \"30px\" }}\n                                            />\n                                        </Dropdown>,\n                                    ]}\n                                >\n                                    <List.Item.Meta\n                                        avatar={\n                                            project.featured ? (\n                                                <StarFilled\n                                                    style={{ fontSize: \"24px\" }}\n                                                />\n                                            ) : project.published ? (\n                                                <EyeFilled\n                                                    style={{ fontSize: \"24px\" }}\n                                                />\n                                            ) : (\n                                                <EyeInvisibleFilled\n                                                    style={{ fontSize: \"24px\" }}\n                                                />\n                                            )\n                                        }\n                                        title={project.name}\n                                        description={project.url}\n                                        onClick={() => {\n                                            navigate(\n                                                `/admin/projects/${project.id}`\n                                            );\n                                        }}\n                                    />\n                                </List.Item>\n                            )}\n                        />\n                    )}\n                </Content>\n            </Layout>\n            <Drawer\n                title=\"Menu\"\n                placement=\"left\"\n                onClose={() => setOpenDrawer(false)}\n                visible={openDrawer}\n            >\n                <Menu\n                    mode=\"inline\"\n                    style={{ width: \"100%\" }}\n                    onClick={({ item, key }) => {\n                        setOpenDrawer(false);\n                        switch (key) {\n                            case \"logout\":\n                                logout();\n                                break;\n                            case \"info\":\n                                navigate(\"/admin/contant\");\n                                break;\n                            case \"admins\":\n                                navigate(\"/admin/admins\");\n                                break;\n                            default:\n                                return;\n                        }\n                    }}\n                    activeKey=\"projects\"\n                    selectedKeys={[\"projects\"]}\n                >\n                    <Menu.Item key=\"projects\">Projects</Menu.Item>\n                    <Menu.Item key=\"info\">Constant</Menu.Item>\n                    <Menu.Item key=\"admins\">Admins</Menu.Item>\n                    <Menu.Item key=\"logout\">Logout</Menu.Item>\n                </Menu>\n            </Drawer>\n        </LayoutHOC>\n    );\n};\n\nexport default Projects;\n","import API from \"api/axios.config\";\r\n\r\nclass PropertyService {\r\n    getProperty(projectId, id) {\r\n        return API.get(`/properties/${projectId}/${id ? \"/\" + id : \"\"}`);\r\n    }\r\n    saveProperty(projectId, id, data) {\r\n        return API.put(`/properties/${projectId}/${id}`, data);\r\n    }\r\n    createProperty(projectId, id) {\r\n        return API.post(`/properties/${projectId}`, { id });\r\n    }\r\n    deleteProperty(projectId, ids) {\r\n        return API.post(`/properties/${projectId}/delete`, { ids });\r\n    }\r\n    saveStatus(projectId, id, data) {\r\n        return API.put(`/properties/${projectId}/status/${id}`, data);\r\n    }\r\n}\r\n\r\nexport default new PropertyService();\r\n","import {\n    Button,\n    Form,\n    Input,\n    InputNumber,\n    Popconfirm,\n    Select,\n    Table,\n    Typography,\n} from \"antd\";\nimport React, { useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport propertyService from \"services/property.service\";\n\nconst { Option } = Select;\n\nconst transferOrientationToObject = (data) => {\n    const o = {};\n    if (data.Orientation.indexOf(\"N\") !== -1) o.N = true;\n    else if (data.Orientation.indexOf(\"S\") !== -1) o.S = true;\n    if (data.Orientation.indexOf(\"E\") !== -1) o.E = true;\n    else if (data.Orientation.indexOf(\"W\") !== -1) o.W = true;\n    return { ...data, Orientation: o };\n};\n\nconst transferOrientationToString = (data) => {\n    let o = \"\";\n    if (data.Orientation.N) o = o + \"N\";\n    else if (data.Orientation.S) o = o + \"S\";\n    if (data.Orientation.E) o = o + \"E\";\n    else if (data.Orientation.W) o = o + \"W\";\n    return { ...data, Orientation: o };\n};\n\nconst EditableCell = ({\n    editing,\n    dataIndex,\n    title,\n    inputType,\n    property,\n    index,\n    children,\n    ...restProps\n}) => {\n    let inputNode = <InputNumber />;\n\n    switch (inputType) {\n        case \"number\":\n            inputNode = <InputNumber />;\n            break;\n        case \"orientation\":\n            inputNode = (\n                <Select>\n                    <Option value=\"N\">North</Option>\n                    <Option value=\"NE\">North-East</Option>\n                    <Option value=\"E\">East</Option>\n                    <Option value=\"SE\">South-East</Option>\n                    <Option value=\"S\">South</Option>\n                    <Option value=\"SW\">South-West</Option>\n                    <Option value=\"W\">West</Option>\n                    <Option value=\"NW\">North-West</Option>\n                </Select>\n            );\n            break;\n        case \"availability\":\n            inputNode = (\n                <Select>\n                    <Option value=\"available\">Available</Option>\n                    <Option value=\"reserved\">Reserved</Option>\n                    <Option value=\"sold\">Sold</Option>\n                </Select>\n            );\n            break;\n        default:\n            inputNode = <Input />;\n    }\n    return (\n        <td {...restProps}>\n            {editing ? (\n                <Form.Item\n                    name={dataIndex}\n                    style={{\n                        margin: 0,\n                        width: \"100%\",\n                    }}\n                    rules={[\n                        {\n                            required: true,\n                            message: `Please Input ${title}!`,\n                        },\n                    ]}\n                >\n                    {inputNode}\n                </Form.Item>\n            ) : (\n                children\n            )}\n        </td>\n    );\n};\n\nconst PropertiesTable = (props) => {\n    const { properties, project, setProperties, admin, setEditModalOpen } =\n        props;\n    const [selectedProperties, setSelectedProperties] = useState([]);\n    const [editingKey, setEditingKey] = useState(\"\");\n\n    const [form] = Form.useForm();\n    const isEditing = (property) => property.id === editingKey;\n\n    const edit = (property) => {\n        form.setFieldsValue(property);\n        setEditingKey(property.id);\n    };\n\n    const cancel = () => {\n        setEditingKey(\"\");\n    };\n\n    const save = async (key) => {\n        try {\n            const values = await form.validateFields();\n\n            const response = await propertyService.saveProperty(\n                project.id,\n                key,\n                transferOrientationToObject(values)\n            );\n\n            if (response.data) {\n                toast.success(\"Saved\");\n                setProperties(response.data);\n                setEditingKey(\"\");\n            }\n        } catch (errInfo) {\n            console.log(\"Validate Failed:\", errInfo);\n        }\n    };\n\n    const deleteProperty = async () => {\n        const response = await propertyService.deleteProperty(\n            project.id,\n            selectedProperties\n        );\n        if (response.data) setProperties(response.data);\n    };\n\n    const columns = [\n        {\n            title: \"Name\",\n            dataIndex: \"Name\",\n            sorter: (a, b) => (a.Name > b.Name ? 1 : -1),\n            sortDirections: [\"descend\", \"ascend\"],\n            editable: admin,\n            inputType: \"text\",\n            width: 100,\n        },\n        {\n            title: \"Availability\",\n            dataIndex: \"Availability\",\n            sorter: (a, b) => (a.Availability > b.Availability ? 1 : -1),\n            sortDirections: [\"descend\", \"ascend\"],\n            onFilter: (value, property) =>\n                property.Availability.indexOf(value) === 0,\n            editable: true,\n            inputType: \"availability\",\n            width: 100,\n        },\n        {\n            title: \"Surface\",\n            dataIndex: \"Surface\",\n            sorter: (a, b) => a.Surface - b.Surface,\n            sortDirections: [\"descend\", \"ascend\"],\n            editable: admin,\n            inputType: \"number\",\n            width: 100,\n        },\n        {\n            title: \"Price\",\n            dataIndex: \"Price\",\n            sorter: (a, b) => a.Price - b.Price,\n            sortDirections: [\"descend\", \"ascend\"],\n            editable: true,\n            inputType: \"number\",\n            width: 100,\n        },\n        {\n            title: \"Bedrooms\",\n            dataIndex: \"BedroomsCount\",\n            key: \"bedrooms\",\n            sortDirections: [\"descend\", \"ascend\"],\n            editable: admin,\n            inputType: \"number\",\n            width: 100,\n        },\n        {\n            title: \"Bathrooms\",\n            dataIndex: \"BathroomsCount\",\n            sorter: (a, b) => a.BathroomsCount - b.BathroomsCount,\n            sortDirections: [\"descend\", \"ascend\"],\n            editable: admin,\n            inputType: \"number\",\n            width: 100,\n        },\n        {\n            title: \"Orientation\",\n            dataIndex: \"Orientation\",\n\n            sorter: (a, b) =>\n                transferOrientationToString(a).Orientation >\n                transferOrientationToString(b).Orientation\n                    ? 1\n                    : -1,\n            sortDirections: [\"descend\", \"ascend\"],\n            editable: admin,\n            inputType: \"orientation\",\n            width: 100,\n        },\n        {\n            title: \"Actions\",\n            dataIndex: \"actions\",\n            width: 80,\n            render: (_, property) => {\n                const editable = isEditing(property);\n                return editable ? (\n                    <span>\n                        <Typography.Link\n                            onClick={() => save(property.id)}\n                            style={{\n                                marginRight: 8,\n                            }}\n                        >\n                            Save\n                        </Typography.Link>\n\n                        <Typography.Link onClick={cancel}>\n                            Cancel\n                        </Typography.Link>\n                    </span>\n                ) : (\n                    <span>\n                        <Typography.Link\n                            disabled={editingKey !== \"\"}\n                            onClick={() => edit(property)}\n                        >\n                            Edit\n                        </Typography.Link>\n                    </span>\n                );\n            },\n        },\n    ];\n\n    const mergedColumns = columns.map((col) => {\n        if (!col.editable) {\n            return col;\n        }\n\n        return {\n            ...col,\n            onCell: (property) => ({\n                property,\n                inputType: col.inputType,\n                dataIndex: col.dataIndex,\n                title: col.title,\n                editing: isEditing(property),\n            }),\n        };\n    });\n\n    const onAddProperty = async () => {\n        const response = await propertyService.createProperty(\n            project.id,\n            properties.length ? properties[properties.length - 1].id : \"\"\n        );\n        if (response.data) {\n            toast.success(\"Added\");\n            setProperties(response.data.newProperties);\n            setEditingKey(response.data.newProperty.id);\n            form.setFieldsValue(\n                transferOrientationToString(response.data.newProperty)\n            );\n            document.querySelector(\"div.ant-table-body\").scrollTop = 1000000;\n        }\n    };\n    return (\n        <>\n            <Form form={form} component={false}>\n                <Table\n                    components={{\n                        body: {\n                            cell: EditableCell,\n                        },\n                    }}\n                    size=\"small\"\n                    bordered\n                    dataSource={properties.map((i) => {\n                        const d = transferOrientationToString(i);\n                        return { ...d, key: d.id };\n                    })}\n                    columns={mergedColumns}\n                    rowClassName=\"editable-row\"\n                    rowSelection={\n                        admin\n                            ? {\n                                  type: \"checkbox\",\n                                  onChange: (_, selectedRows) => {\n                                      setSelectedProperties(\n                                          selectedRows.map((i) => i.id)\n                                      );\n                                  },\n                              }\n                            : null\n                    }\n                    pagination={false}\n                    tableLayout=\"fixed\"\n                    scroll={{\n                        y: \"calc(100vh - 230px)\",\n                    }}\n                />\n            </Form>\n            {admin && (\n                <Button\n                    onClick={onAddProperty}\n                    style={{ margin: \"16px\" }}\n                    type=\"primary\"\n                >\n                    Add property\n                </Button>\n            )}\n            {!!selectedProperties.length && admin && (\n                <Typography.Link\n                    onClick={() => deleteProperty()}\n                    type=\"danger\"\n                    disabled={editingKey}\n                >\n                    Delete\n                </Typography.Link>\n            )}\n        </>\n    );\n};\n\nexport default PropertiesTable;\n","import React, { useEffect } from \"react\";\n\nimport propertyService from \"services/property.service\";\nimport PropertiesTable from \"components/ProjectView/Components/PropertiesTable\";\nimport projectService from \"services/project.service\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\n\nconst Properties = (props) => {\n    const { admin, id, project, properties, setProject, setProperties } = props;\n\n    useEffect(() => {\n        propertyService.getProperty(id).then((response) => {\n            setProperties(response.data);\n        });\n\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n\n    useLoginCheck();\n\n    return (\n        properties &&\n        project && (\n            <PropertiesTable\n                properties={properties}\n                setProperties={setProperties}\n                project={project}\n                admin={admin}\n            />\n        )\n    );\n};\n\nexport default Properties;\n","import React, { useEffect, useState } from \"react\";\n\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport Properties from \"./Properties\";\nimport LayoutHOC from \"layout/Layout\";\nimport { Layout, PageHeader } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport propertyService from \"services/property.service\";\nimport projectService from \"services/project.service\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\n\nconst PropertiesAdmin = (props) => {\n    const { id } = useParams();\n\n    const navigate = useNavigate();\n    const [project, setProject] = useState(null);\n    const [properties, setProperties] = useState(null);\n    useLoginCheck();\n\n    useEffect(() => {\n        propertyService.getProperty(id).then((response) => {\n            setProperties(response.data);\n        });\n\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(`/admin/projects/${id}`)}\n                    title={`Properties of project id: ${id}`}\n                    style={{\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\n                        position: \"fixed\",\n                        zIndex: 100,\n                        width: \"100%\",\n                    }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        paddingTop: \"100px\",\n                        maxWidth: \"1200px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Properties\n                        admin\n                        id={id}\n                        setProject={setProject}\n                        setProperties={setProperties}\n                        project={project}\n                        properties={properties}\n                    />\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default PropertiesAdmin;\n","import API from \"api/axios.config\";\r\n\r\nclass ProjectService {\r\n    signUrl() {\r\n        return API.get(\"/utils/sign-s3\");\r\n    }\r\n}\r\n\r\nexport default new ProjectService();\r\n","import React, { useEffect, useState, useRef } from \"react\";\n\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport LayoutHOC from \"layout/Layout\";\nimport {\n    Button,\n    Form,\n    Input,\n    Layout,\n    List,\n    PageHeader,\n    Popconfirm,\n    Select,\n    Space,\n    Typography,\n    Upload,\n} from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport projectService from \"services/project.service\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\nimport toast from \"react-hot-toast\";\nimport YouTube from \"react-youtube\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport axios from \"axios\";\nimport utilsService from \"services/utils.service\";\n\nconst MediaAdmin = (props) => {\n    const { id } = useParams();\n    const formRef = useRef(null);\n\n    const navigate = useNavigate();\n    const [project, setProject] = useState(null);\n    useLoginCheck();\n\n    useEffect(() => {\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n\n    const onFinish = async (values) => {\n        const response = await projectService.addMedia(id, values);\n        if (response.data) {\n            toast.success(\"Saved\");\n            setProject(response.data);\n            if (formRef.current) formRef.current.resetFields();\n        }\n    };\n    const handleMove = async (mediaId, down) => {\n        const response = await projectService.moveMedia(id, mediaId, down);\n        if (response.data) {\n            toast.success(\"Moved\");\n            setProject(response.data);\n        }\n    };\n    const handleDelete = async (mediaId) => {\n        const response = await projectService.deleteMedia(id, mediaId);\n        if (response.data) {\n            toast.success(\"Deleted\");\n            setProject(response.data);\n        }\n    };\n\n    const customUpload = async ({\n        action,\n        data,\n        file,\n        filename,\n        headers,\n        onError,\n        onProgress,\n        onSuccess,\n        withCredentials,\n    }) => {\n        try {\n            const res = await utilsService.signUrl();\n\n            axios\n                .put(res.data.signedRequest, file, {\n                    headers: {\n                        \"Content-Type\": file.type,\n                    },\n                })\n                .then((s3res) => {\n                    if (formRef.current) {\n                        formRef.current.setFieldsValue({\n                            ...formRef.current.values,\n                            url: res.data.url,\n                            thumbnail: res.data.thumbnail,\n                        });\n                        onSuccess(data.response, file);\n                    }\n                })\n                .catch((err) => {\n                    console.log(err.message);\n                    onError();\n                });\n        } catch (error) {\n            onError();\n            toast.error(error.message);\n        }\n    };\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(`/admin/projects/${id}`)}\n                    title={`Media of project id: ${id}`}\n                    style={{\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\n                        position: \"fixed\",\n                        zIndex: 100,\n                        width: \"100%\",\n                    }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        paddingTop: \"100px\",\n                        maxWidth: \"1200px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    {project && project.media && (\n                        <div>\n                            <List\n                                itemLayout=\"vertical\"\n                                size=\"large\"\n                                dataSource={project.media}\n                                renderItem={(item, index) => (\n                                    <List.Item\n                                        key={item.id}\n                                        actions={[\n                                            <Button\n                                                size=\"small\"\n                                                key=\"up\"\n                                                onClick={() =>\n                                                    handleMove(item.id, false)\n                                                }\n                                            >\n                                                Move up\n                                            </Button>,\n                                            <Button\n                                                size=\"small\"\n                                                key=\"down\"\n                                                onClick={() =>\n                                                    handleMove(item.id, true)\n                                                }\n                                            >\n                                                Move down\n                                            </Button>,\n                                            <Popconfirm\n                                                title=\"Are you sure to delete this media?\"\n                                                onConfirm={() =>\n                                                    handleDelete(item.id)\n                                                }\n                                                okText=\"Yes\"\n                                                cancelText=\"No\"\n                                                key=\"delete\"\n                                            >\n                                                <Button size=\"small\" danger>\n                                                    Delete\n                                                </Button>\n                                            </Popconfirm>,\n                                        ]}\n                                        extra={\n                                            item.type === \"video\" ? (\n                                                <YouTube\n                                                    videoId={item.url}\n                                                    className=\"youtubeContainer\"\n                                                />\n                                            ) : (\n                                                <img\n                                                    width=\"100%\"\n                                                    style={{\n                                                        maxWidth: \"300px\",\n                                                    }}\n                                                    alt=\"logo\"\n                                                    src={item.url}\n                                                />\n                                            )\n                                        }\n                                    >\n                                        <List.Item.Meta\n                                            description={item.type}\n                                            title={`${index + 1}. ${\n                                                item.name || \"no name\"\n                                            }`}\n                                        />\n                                        {item.url}\n                                    </List.Item>\n                                )}\n                            />\n                            <Form\n                                onFinish={onFinish}\n                                style={{\n                                    padding: \" 16px\",\n                                    maxWidth: \"500px\",\n                                    margin: \"auto\",\n                                    backgroundColor: \"#eee\",\n                                }}\n                                ref={formRef}\n                            >\n                                <Typography.Title level={4}>\n                                    Add new media\n                                </Typography.Title>\n                                <Form.Item\n                                    name=\"type\"\n                                    rules={[{ required: true }]}\n                                >\n                                    <Select placeholder=\"Choose type\">\n                                        <Select.Option value=\"photo\">\n                                            Photo\n                                        </Select.Option>\n                                        <Select.Option value=\"plan\">\n                                            Plan\n                                        </Select.Option>\n                                        <Select.Option value=\"video\">\n                                            Video\n                                        </Select.Option>\n                                    </Select>\n                                </Form.Item>\n                                <Form.Item\n                                    name=\"name\"\n                                    rules={[{ required: true }]}\n                                >\n                                    <Input placeholder=\"Name\" />\n                                </Form.Item>\n                                <Form.Item\n                                    name=\"url\"\n                                    rules={[{ required: true }]}\n                                >\n                                    <Input placeholder=\"Url/Video id\" />\n                                </Form.Item>\n                                <Form.Item name=\"thumbnail\" hidden>\n                                    <Input placeholder=\"Thumbnail\" />\n                                </Form.Item>\n                                <Form.Item>\n                                    <Upload\n                                        accept=\"image/*\"\n                                        listType=\"picture\"\n                                        maxCount={1}\n                                        customRequest={customUpload}\n                                    >\n                                        <Button icon={<UploadOutlined />}>\n                                            Upload (Max: 1)\n                                        </Button>\n                                    </Upload>\n                                </Form.Item>\n\n                                <Form.Item>\n                                    <Button\n                                        type=\"primary\"\n                                        htmlType=\"submit\"\n                                        style={{ width: \"100%\" }}\n                                    >\n                                        Add media\n                                    </Button>\n                                </Form.Item>\n                            </Form>\n                        </div>\n                    )}\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default MediaAdmin;\n","import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { Drawer, Layout, Menu, PageHeader } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport { MenuOutlined } from \"@ant-design/icons\";\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport Properties from \"./Properties\";\nimport projectService from \"services/project.service\";\nimport propertyService from \"services/property.service\";\n\nconst PropertiesClient = (props) => {\n    const { id } = useParams();\n    const { logout, isLoggedIn, authData } = useUser();\n    const navigate = useNavigate();\n    const [project, setProject] = useState(null);\n    const [properties, setProperties] = useState(null);\n\n    const [openDrawer, setOpenDrawer] = useState(false);\n\n    useEffect(() => {\n        propertyService.getProperty(id).then((response) => {\n            setProperties(response.data);\n        });\n\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n\n    useEffect(() => {\n        if (\n            !isLoggedIn ||\n            (!authData?.super &&\n                id.toString() !== authData?.projectId.toString())\n        ) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    return (\n        <LayoutHOC loading={!properties || !project}>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => setOpenDrawer(true)}\n                    backIcon={<MenuOutlined />}\n                    title={\"Appartments\"}\n                    style={{\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\n                        position: \"fixed\",\n                        zIndex: 100,\n                        width: \"100%\",\n                    }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        paddingTop: \"100px\",\n                        maxWidth: \"1200px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Properties\n                        id={id}\n                        setProject={setProject}\n                        setProperties={setProperties}\n                        project={project}\n                        properties={properties}\n                    />\n                </Content>\n            </Layout>\n            <Drawer\n                title=\"Menu\"\n                placement=\"left\"\n                onClose={() => setOpenDrawer(false)}\n                visible={openDrawer}\n            >\n                <Menu\n                    mode=\"inline\"\n                    style={{ width: \"100%\" }}\n                    onClick={({ item, key }) => {\n                        setOpenDrawer(false);\n                        switch (key) {\n                            case \"logout\":\n                                logout();\n                                break;\n                            case \"visit\":\n                                navigate(`/p/${project.url}`);\n                                break;\n                            case \"analytics\":\n                                navigate(`/p-admin/${project.id}/analytics`);\n                                break;\n                            default:\n                                return;\n                        }\n                    }}\n                    activeKey=\"properties\"\n                    selectedKeys={[\"properties\"]}\n                >\n                    <Menu.Item key=\"properties\">Properties</Menu.Item>\n                    <Menu.Item key=\"analytics\">Analytics</Menu.Item>\n                    <Menu.Item key=\"visit\">Visit project</Menu.Item>\n                    <Menu.Item key=\"logout\">Logout</Menu.Item>\n                </Menu>\n            </Drawer>\n        </LayoutHOC>\n    );\n};\n\nexport default PropertiesClient;\n","import history from \"helpers/history\";\nimport Layout from \"layout/Layout\";\nimport Admins from \"pages/Admins\";\nimport AnalyticClient from \"pages/AnalyticClient\";\nimport Constants from \"pages/Constants\";\nimport CreateProject from \"pages/CreateProject\";\nimport Login from \"pages/Login\";\nimport ProjectDetails from \"pages/ProjectDetails\";\nimport Projects from \"pages/Projects\";\nimport PropertiesAdmin from \"pages/PropertiesAdmin\";\nimport MediaAdmin from \"pages/MediaAdmin\";\nimport PropertiesClient from \"pages/PropertiesClient\";\nimport { lazy, Suspense } from \"react\";\nimport { Toaster } from \"react-hot-toast\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\n\nconst Home = lazy(() => import(\"pages/Home\"));\nconst Project = lazy(() => import(\"pages/Project\"));\n\nconst ResetPassword = lazy(() => import(\"pages/ResetPassword\"));\n// const Preview = lazy(() => import(\"pages/Preview\"));\n\nfunction App() {\n    return (\n        <BrowserRouter history={history}>\n            <Suspense\n                fallback={<Layout>{/* <Spinner size={100} /> */}</Layout>}\n            >\n                <>\n                    <Toaster position=\"top-right\" />\n                    <Routes>\n                        <Route exact path={\"/\"} element={<Home />} />\n                        <Route path=\"/login\" element={<Login />} />\n                        <Route\n                            exact\n                            path=\"/admin\"\n                            element={<Projects />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/projects/:id\"\n                            element={<ProjectDetails />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/projects/create\"\n                            element={<CreateProject />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/projects/:id/properties\"\n                            element={<PropertiesAdmin />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/projects/:id/media\"\n                            element={<MediaAdmin />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/contant\"\n                            element={<Constants />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/admins\"\n                            element={<Admins />}\n                        ></Route>\n\n                        <Route\n                            path=\"/reset-password\"\n                            element={<ResetPassword />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/p/:id\"\n                            element={<Project />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/p-admin/:id\"\n                            element={<PropertiesClient />}\n                        ></Route>\n\n                        <Route\n                            exact\n                            path=\"/p-admin/:id/analytics\"\n                            element={<AnalyticClient />}\n                        ></Route>\n\n                        <Route\n                            path=\"*\"\n                            element={<h1>404 Error Found</h1>}\n                        ></Route>\n                    </Routes>\n                </>\n            </Suspense>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { UserProvider } from \"context/UserContext\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n    <HelmetProvider>\n        <UserProvider>\n            <App />\n        </UserProvider>\n    </HelmetProvider>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import API from \"api/axios.config\";\r\n\r\nclass ProjectService {\r\n    getProject(id) {\r\n        return API.get(`/projects${id ? \"/\" + id : \"\"}`);\r\n    }\r\n\r\n    getProjectByUrl(id) {\r\n        return API.get(`/projects/url/${id}`);\r\n    }\r\n\r\n    getFeaturedProject() {\r\n        return API.get(`/projects/url/__featured__`);\r\n    }\r\n    saveProject(id, data) {\r\n        return API.put(`/projects/${id}`, data);\r\n    }\r\n    createProject(data) {\r\n        return API.post(`/projects`, data);\r\n    }\r\n    deleteProject(id) {\r\n        return API.delete(`/projects/${id}`);\r\n    }\r\n\r\n    addMedia(id, data) {\r\n        return API.post(`/projects/${id}/media`, data);\r\n    }\r\n    deleteMedia(id, mediaId) {\r\n        return API.delete(`/projects/${id}/media/${mediaId}`);\r\n    }\r\n    moveMedia(id, mediaId, down) {\r\n        return API.put(`/projects/${id}/media/${mediaId}`, null, {\r\n            params: { down: down ? \"true\" : \"false\" },\r\n        });\r\n    }\r\n}\r\n\r\nexport default new ProjectService();\r\n"],"sourceRoot":""}