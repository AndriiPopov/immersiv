{"version":3,"sources":["components/ForgotPasswordModal.jsx","pages/Login.jsx","routes/protected.route.jsx","App.js","reportWebVitals.js","index.js","api/axios.config.js","services/auth.service.js","helpers/WithAxios.js","context/UserContext.jsx","helpers/history.js","layout/Layout.jsx"],"names":["ForgotPasswordModal","useState","isOpen","setIsOpen","onClick","title","visible","footer","onCancel","name","onFinish","data","authService","forgotPassword","email","then","status","toast","success","catch","error","style","padding","maxWidth","margin","Item","rules","type","message","required","prefix","UserOutlined","className","placeholder","htmlType","width","Login","useUser","isLoggedIn","setUserState","isLoading","setIsLoading","redirectToReferrer","setRedirectToReferrer","a","password","login","setTimeout","to","Layout","loading","Title","textAlign","marginBottom","Password","LockOutlined","ProtectedRoute","children","rest","render","location","pathname","state","from","Home","lazy","Project","Admin","ResetPassword","App","history","fallback","position","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","mdTheme","createTheme","ReactDOM","ThemeProvider","theme","document","getElementById","API","axios","create","baseURL","withCredentials","interceptors","request","use","req","token","JSON","parse","localStorage","getItem","headers","Promise","reject","AuthService","post","removeItem","password2","username","get","WithAxios","setIsLoggedIn","setUserData","setAuthData","useMemo","response","originalRequest","config","url","resolve","push","_retry","res","setItem","stringify","UserContext","createContext","UserProvider","authData","useEffect","Provider","value","setUserInfo","logout","context","useContext","undefined","Error","createBrowserHistory","description","isProject","content","flex","display"],"mappings":"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","file":"static/js/main.777608ab.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport authService from \"services/auth.service\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport { Button, Form, Input } from \"antd\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\n\r\nconst ForgotPasswordModal = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const onFinish = (data) => {\r\n        authService\r\n            .forgotPassword(data.email)\r\n            .then((data) => {\r\n                if (data.data.status === \"OK\") {\r\n                    toast.success(\"Email has been sent successfully.\");\r\n                    setIsOpen(false);\r\n                }\r\n            })\r\n            .catch((error) => {});\r\n    };\r\n    return (\r\n        <div>\r\n            <>\r\n                <span onClick={() => setIsOpen(!isOpen)}>Forgot password?</span>\r\n                <Modal\r\n                    title=\"Forgot Password\"\r\n                    visible={isOpen}\r\n                    footer={[]}\r\n                    onCancel={() => setIsOpen(false)}\r\n                >\r\n                    <Form\r\n                        name=\"normal_login\"\r\n                        onFinish={onFinish}\r\n                        style={{\r\n                            padding: \"100px 16px\",\r\n                            maxWidth: \"500px\",\r\n                            margin: \"auto\",\r\n                        }}\r\n                    >\r\n                        <Form.Item\r\n                            name=\"email\"\r\n                            rules={[\r\n                                {\r\n                                    type: \"email\",\r\n                                    message: \"The input is not valid E-mail!\",\r\n                                },\r\n                                {\r\n                                    required: true,\r\n                                    message: \"Please input your E-mail!\",\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input\r\n                                prefix={\r\n                                    <UserOutlined className=\"site-form-item-icon\" />\r\n                                }\r\n                                placeholder=\"Email\"\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                style={{ width: \"100%\" }}\r\n                            >\r\n                                Reset password\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ForgotPasswordModal;\r\n","// import { Button, HelperText, Input, Label } from \"@windmill/react-ui\";\r\nimport ForgotPasswordModal from \"components/ForgotPasswordModal\";\r\nimport { useUser } from \"context/UserContext\";\r\nimport Layout from \"layout/Layout\";\r\nimport React, { useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport authService from \"services/auth.service\";\r\nimport { Form, Input, Button, Typography } from \"antd\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\n\r\nconst Login = () => {\r\n    const { isLoggedIn, setUserState } = useUser();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [redirectToReferrer, setRedirectToReferrer] = useState(false);\r\n\r\n    const onFinish = async (data) => {\r\n        const { email, password } = data;\r\n\r\n        try {\r\n            setIsLoading(true);\r\n            const data = await authService.login(email, password);\r\n            toast.success(\"Login successful 🔓\");\r\n\r\n            setTimeout(() => {\r\n                setUserState(data);\r\n                setRedirectToReferrer(true);\r\n                setIsLoading(false);\r\n            }, 1500);\r\n        } catch (error) {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    if (redirectToReferrer) {\r\n        return <Redirect to=\"/admin\" />;\r\n    }\r\n    if (isLoggedIn) {\r\n        return <Redirect to=\"/admin\" />;\r\n    }\r\n\r\n    return (\r\n        <Layout title=\"Login\" loading={isLoading}>\r\n            <Form\r\n                name=\"normal_login\"\r\n                onFinish={onFinish}\r\n                style={{\r\n                    padding: \"100px 16px\",\r\n                    maxWidth: \"500px\",\r\n                    margin: \"auto\",\r\n                }}\r\n            >\r\n                <Typography.Title\r\n                    style={{ textAlign: \"center\", marginBottom: \"50px\" }}\r\n                >\r\n                    Manage IMMERSIVE\r\n                </Typography.Title>\r\n                <Form.Item\r\n                    name=\"email\"\r\n                    rules={[\r\n                        {\r\n                            type: \"email\",\r\n                            message: \"The input is not valid E-mail!\",\r\n                        },\r\n                        {\r\n                            required: true,\r\n                            message: \"Please input your E-mail!\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input\r\n                        prefix={\r\n                            <UserOutlined className=\"site-form-item-icon\" />\r\n                        }\r\n                        placeholder=\"Email\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"password\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: \"Please input your Password!\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input.Password\r\n                        prefix={\r\n                            <LockOutlined className=\"site-form-item-icon\" />\r\n                        }\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <a>\r\n                        <ForgotPasswordModal />\r\n                    </a>\r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        htmlType=\"submit\"\r\n                        style={{ width: \"100%\" }}\r\n                    >\r\n                        Log in\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import { useUser } from \"context/UserContext\";\r\nimport React from \"react\";\r\nimport { Redirect, Route } from \"react-router-dom\";\r\n\r\nexport const ProtectedRoute = ({ children, ...rest }) => {\r\n  const { isLoggedIn} = useUser()\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={({ location }) => {\r\n        return isLoggedIn ? (\r\n          children\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: \"/login\",\r\n              state: { from: location },\r\n            }}\r\n          />\r\n        );\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import Spinner from \"components/Spinner\";\nimport history from \"helpers/history\";\nimport Layout from \"layout/Layout\";\nimport Login from \"pages/Login\";\nimport { lazy, Suspense } from \"react\";\nimport { Toaster } from \"react-hot-toast\";\nimport { Router, Switch, Route } from \"react-router-dom\";\nimport { ProtectedRoute } from \"routes/protected.route\";\n\nconst Home = lazy(() => import(\"pages/Home\"));\nconst Project = lazy(() => import(\"pages/Project\"));\nconst Admin = lazy(() => import(\"pages/Admin\"));\nconst ResetPassword = lazy(() => import(\"pages/ResetPassword\"));\n// const Preview = lazy(() => import(\"pages/Preview\"));\n\nfunction App() {\n    return (\n        <Router history={history}>\n            <Suspense\n                fallback={<Layout>{/* <Spinner size={100} /> */}</Layout>}\n            >\n                <>\n                    <Toaster position=\"top-right\" />\n                    <Switch>\n                        <Route exact path={\"/\"}>\n                            <Home />\n                        </Route>\n                        <Route path=\"/login\">\n                            <Login />\n                        </Route>\n                        <ProtectedRoute exact path=\"/admin\">\n                            <Admin />\n                        </ProtectedRoute>\n                        <Route path=\"/reset-password\">\n                            <ResetPassword />\n                        </Route>\n                        <Route exact path=\"/p/:id\">\n                            <Project />\n                        </Route>\n\n                        <Route path=\"*\">\n                            <h1>404 Error Found</h1>\n                        </Route>\n                    </Switch>\n                </>\n            </Suspense>\n        </Router>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { UserProvider } from \"context/UserContext\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"antd/dist/antd.css\";\nimport { ThemeProvider } from \"@mui/material/styles\";\nimport { createTheme } from \"@mui/material/styles\";\nconst mdTheme = createTheme();\nReactDOM.render(\n    <ThemeProvider theme={mdTheme}>\n        <HelmetProvider>\n            <UserProvider>\n                <App />\n            </UserProvider>\n        </HelmetProvider>\n    </ThemeProvider>,\n\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import axios from \"axios\";\r\n\r\nconst baseURL =\r\n    process.env.NODE_ENV === \"production\"\r\n        ? \"https://tour.immersiv.com.au/api\"\r\n        : \"http://localhost:5000/api\";\r\n\r\nconst API = axios.create({\r\n    baseURL,\r\n    withCredentials: true,\r\n});\r\n\r\nAPI.interceptors.request.use(\r\n    function (req) {\r\n        const token = JSON.parse(localStorage.getItem(\"token\"));\r\n        if (token) req.headers[\"auth-token\"] = token;\r\n        return req;\r\n    },\r\n    function (error) {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default API;\r\n","import API from \"api/axios.config\";\r\n\r\nclass AuthService {\r\n  async login(email, password) {\r\n    const { data } = await API.post(\"/auth/login\", {\r\n      email,\r\n      password,\r\n    });\r\n    return data;\r\n  }\r\n\r\n  async googleLogin(token) {\r\n    const { data } = await API.post(\"/auth/google\", {\r\n      token,\r\n    });\r\n    return data;\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem(\"user\");\r\n    localStorage.removeItem('token')\r\n    localStorage.removeItem('expiresAt')\r\n  }\r\n\r\n  forgotPassword(email) {\r\n    return API.post(\"/auth/forgot-password\", {\r\n      email,\r\n    });\r\n  }\r\n\r\n  checkToken(token, email) {\r\n    return API.post(\"auth/check-token\", {\r\n      token,\r\n      email,\r\n    });\r\n  }\r\n\r\n  resetPassword(token, email, password, password2) {\r\n    return API.post(\"auth/reset-password\", {\r\n      token,\r\n      email,\r\n      password,\r\n      password2,\r\n    });\r\n  }\r\n\r\n  register(username, email, password) {\r\n    return API.post(\"auth/signup\", {\r\n      username,\r\n      email,\r\n      password,\r\n    });\r\n  }\r\n\r\n  getCurrentUser() {\r\n    return API.get(\"/users/profile\");\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import { useMemo } from \"react\";\nimport API from \"api/axios.config\";\nimport { useUser } from \"context/UserContext\";\nimport history from \"helpers/history\";\n\nconst WithAxios = ({ children }) => {\n  const { setIsLoggedIn, setUserData, setAuthData, isLoggedIn } = useUser();\n\n  useMemo(() => {\n    if (isLoggedIn) {\n      API.interceptors.response.use(\n        (response) => response,\n        async (error) => {\n          const originalRequest = error.config;\n          if (\n            error.response.status === 401 &&\n            originalRequest.url === \"/auth/refresh-token\"\n          ) {\n            return new Promise((resolve, reject) => {\n              setIsLoggedIn(false);\n              setAuthData(null);\n              setUserData(null);\n              history.push(\"/login\");\n              reject(error);\n            });\n          }\n\n          if (error.response.status === 401 && !originalRequest._retry) {\n            try {\n              originalRequest._retry = true;\n              const res = await API.post(\"/auth/refresh-token\");\n              localStorage.setItem(\"token\", JSON.stringify(res.data.token));\n              return API(originalRequest);\n            } catch (error) {\n              localStorage.removeItem(\"token\");\n              setIsLoggedIn(false);\n              setAuthData(null);\n              setUserData(null);\n              history.push(\"/login\");\n            }\n          }\n          return Promise.reject(error);\n        }\n      );\n    }\n  }, [isLoggedIn, setAuthData, setIsLoggedIn, setUserData]);\n\n  return children;\n};\n\nexport default WithAxios;\n","import WithAxios from \"helpers/WithAxios\";\r\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport authService from \"services/auth.service\";\r\n\r\nconst UserContext = createContext();\r\n\r\nconst UserProvider = ({ children }) => {\r\n    const [authData, setAuthData] = useState({\r\n        token: \"\",\r\n    });\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem(\"token\")) {\r\n            setIsLoggedIn(true);\r\n            setAuthData(JSON.parse(localStorage.getItem(\"token\")));\r\n        }\r\n    }, []);\r\n\r\n    const setUserInfo = (data) => {\r\n        const { token } = data;\r\n        setIsLoggedIn(true);\r\n\r\n        setAuthData({\r\n            token,\r\n        });\r\n        localStorage.setItem(\"token\", JSON.stringify(token));\r\n    };\r\n\r\n    const logout = () => {\r\n        setAuthData(null);\r\n        setIsLoggedIn(false);\r\n        authService.logout();\r\n    };\r\n\r\n    return (\r\n        <UserContext.Provider\r\n            value={{\r\n                setUserState: (data) => setUserInfo(data),\r\n                logout,\r\n                isLoggedIn,\r\n                setIsLoggedIn,\r\n                authData,\r\n                setAuthData,\r\n            }}\r\n        >\r\n            <WithAxios>{children}</WithAxios>\r\n        </UserContext.Provider>\r\n    );\r\n};\r\n\r\nconst useUser = () => {\r\n    const context = useContext(UserContext);\r\n\r\n    if (context === undefined) {\r\n        throw new Error(\"useUser must be used within UserProvider\");\r\n    }\r\n    return context;\r\n};\r\n\r\nexport { UserProvider, useUser };\r\n","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();\n","import Spinner from \"components/Spinner\";\r\nimport React from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\n\r\nconst Layout = ({ children, title, loading, description, isProject }) => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>{title || \"Home\"} | IMMERSIV </title>\r\n                <meta\r\n                    name=\"description\"\r\n                    content={\r\n                        description ||\r\n                        \"Ecommerce store built with React, Node, Express and Postgres\"\r\n                    }\r\n                />\r\n\r\n                {/* <meta property=\"og:locale\" content=\"en_US\" />\r\n                <meta property=\"og:type\" content=\"website\" />\r\n                <meta property=\"og:title\" content=\"PERN Store\" />\r\n                <meta\r\n                    property=\"og:description\"\r\n                    content=\"Ecommerce store built with React, Node, Express and Postgres\"\r\n                />\r\n                <meta\r\n                    property=\"og:url\"\r\n                    content=\"https://pern-store.netlify.app/\"\r\n                />\r\n                <meta property=\"og:site_name\" content=\"PERN Store\" />\r\n                <meta\r\n                    property=\"og:image\"\r\n                    content=\"android-chrome-512x512.png\"\r\n                />\r\n                <meta\r\n                    property=\"og:image:secure_url\"\r\n                    content=\"android-chrome-512x512.png\"\r\n                />\r\n                <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n                <meta name=\"twitter:site\" content=\"@_odunsi_\" />\r\n                <meta name=\"twitter:creator\" content=\"@_odunsi_\" />\r\n                <meta\r\n                    name=\"twitter:description\"\r\n                    content=\"Ecommerce store built with React, Node, Express and Postgres\"\r\n                />\r\n                <meta name=\"twitter:title\" content=\"PERN Store\" />\r\n                <meta\r\n                    name=\"twitter:image\"\r\n                    content=\"android-chrome-512x512.png\"\r\n                /> */}\r\n            </Helmet>\r\n\r\n            {loading ? null : (\r\n                // (\r\n                //     <>\r\n                //         <Spinner size={100} loading />\r\n                //     </>\r\n                // )\r\n                <div style={{ flex: 1, display: isProject ? \"flex\" : \"block\" }}>\r\n                    {children}\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Layout;\r\n"],"sourceRoot":""}