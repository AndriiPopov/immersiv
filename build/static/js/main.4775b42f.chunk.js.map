{"version":3,"sources":["services/auth.service.js","services/constant.service.js","pages/ProjectA.jsx","api/axios.config.js","helpers/history.js","helpers/WithAxios.js","context/UserContext.jsx","services/admin.service.js","hooks/useLoginCheck.js","pages/Admins.jsx","services/ga.service.js","components/DashboardItem/DataItems/ChartItem/ChartItem.js","pages/AnalyticClient.jsx","pages/Constants.jsx","services/utils.service.js","helpers/uploadMedia.js","components/ProjectFormFields.jsx","pages/CreateProject.jsx","components/ForgotPasswordModal.jsx","pages/Login.jsx","pages/ProjectDetails.jsx","pages/Projects.jsx","services/property.service.js","components/ProjectView/Components/PropertiesTable.jsx","pages/Properties.jsx","pages/PropertiesAdmin.jsx","pages/MediaAdmin.jsx","pages/PropertiesClient.jsx","App.js","reportWebVitals.js","index.js","services/project.service.js","layout/Layout.jsx"],"names":["AuthService","email","password","a","API","post","data","token","localStorage","removeItem","password2","username","get","ConstantService","put","ProjectA","props","useState","setProjectData","setConstant","featured","setVideoInitialized","id","useParams","useEffect","projectService","getFeaturedProject","then","response","getProjectByUrl","constantService","getConstant","sizeContainerRef","useRef","containerRef","videoRef","webrtcClient","setWebrtcClient","responses","setResponses","webrtcClientInit","responseCallback","message","videoInitialized","emitUIInteraction","time","args","address","project","arcwareAddress","packageId","arcwarePackageId","settings","autoplay","video","audio","sizeContainer","current","container","playOverlay","loader","applicationResponse","videoInitializeCallback","WebRTCClient","ref","style","flex","zIndex","axios","create","baseURL","withCredentials","interceptors","request","use","req","getItem","headers","error","Promise","reject","createBrowserHistory","WithAxios","children","useUser","isInitiated","logout","originalRequest","config","status","url","resolve","history","push","_retry","res","setItem","UserContext","createContext","UserProvider","authData","setAuthData","isLoggedIn","setIsLoggedIn","setIsInitiated","getTokenData","decoded","jwt_decode","Provider","value","setUserState","setUserInfo","authService","context","useContext","undefined","Error","delete","useLoginCheck","navigate","useNavigate","super","projectId","Admins","formRef","admins","setAdmins","editModalOpen","setEditModalOpen","adminService","getAdmin","onFinish","values","createAdmin","toast","success","resetFields","deleteAdmin","Layout","loading","height","display","background","onBack","title","boxShadow","position","width","overflow","padding","paddingTop","maxWidth","margin","onClick","visible","onCancel","footer","Item","name","rules","required","type","placeholder","htmlType","itemLayout","dataSource","sort","b","renderItem","admin","actions","overlay","onConfirm","okText","cancelText","danger","trigger","MoreOutlined","fontSize","borderBottom","paddingLeft","Meta","description","locked","metrics","dimensions","period","start","finish","ChartItem","column","seconds","isDate","dataRefined","humanizeString","columnHeaders","replace","rows","map","i","moment","format","parseInt","chartType","options","legend","chartArea","allowHtml","AnalyticClient","setProject","dateData","setDateData","cityData","setCityData","deviceData","setDeviceData","sourceData","setSourceData","subtract","setPeriod","toString","getProject","length","getMetricData","gaService","getGA","catch","err","RangePicker","size","defaultValue","onChange","m","allowClear","textAlign","flexDirection","flexWrap","alignItems","justifyContent","xKey","valKey","Constants","constants","setConstants","setFieldsValue","saveConstant","initialValues","isVideo","isLogo","params","uploadMedia","cb","action","file","filename","onError","onProgress","onSuccess","utilsService","signUrl","signedRequest","s3res","thumbnail","console","log","Logo","customUploadClientLogo","image","setImage","setTimeout","class","controls","preload","src","href","target","rel","maxHeight","LoadingOutlined","marginTop","customRequest","showUploadList","maxCount","getValueFromEvent","ProjectFormFields","label","extra","valuePropName","hidden","min","wrapperCol","offset","span","CreateProject","createProject","labelCol","ForgotPasswordModal","isOpen","setIsOpen","forgotPassword","prefix","UserOutlined","className","Login","isLoading","setIsLoading","redirectToReferrer","setRedirectToReferrer","login","Title","marginBottom","Password","LockOutlined","ProjectDetails","Form","useForm","form","saveProject","projectAddress","galleryAddress","propertiesAddress","projectName","useWatch","clientLogo","clientLogoMaxWidth","clientLogoMaxHeight","projectLogo","projectLogoMaxWidth","projectLogoMaxHeight","Paragraph","copy","val","getFieldsValue","alt","Projects","projects","setProjects","openDrawer","setOpenDrawer","deleteProject","setFeatured","backIcon","MenuOutlined","Divider","avatar","StarFilled","published","EyeFilled","EyeInvisibleFilled","placement","onClose","mode","item","key","activeKey","selectedKeys","ids","Option","Select","transferOrientationToObject","Orientation","o","indexOf","N","S","E","W","transferOrientationToString","EditableCell","editing","dataIndex","inputType","property","index","restProps","inputNode","PropertiesTable","properties","setProperties","selectedProperties","setSelectedProperties","editingKey","setEditingKey","isEditing","cancel","save","validateFields","propertyService","saveProperty","deleteProperty","mergedColumns","sorter","Name","sortDirections","editable","Availability","onFilter","render","_","str","charAt","toUpperCase","slice","Surface","Price","BathroomsCount","toLowerCase","Frontage","Depth","Link","marginRight","disabled","edit","col","onCell","onAddProperty","createProperty","newProperties","newProperty","document","querySelector","scrollTop","component","components","body","cell","bordered","d","columns","rowClassName","rowSelection","selectedRows","pagination","tableLayout","scroll","y","Properties","getProperty","PropertiesAdmin","MediaAdmin","addMedia","handleMove","mediaId","down","moveMedia","handleDelete","deleteMedia","customUpload","getFieldValue","media","backgroundColor","level","readOnly","accept","listType","icon","UploadOutlined","PropertiesClient","Home","lazy","Project","ResetPassword","App","fallback","exact","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById","ProjectService","isProject","content"],"mappings":"uJAEMA,E,4HACF,WAAYC,EAAOC,GAAnB,iBAAAC,EAAA,sEAC2BC,IAAIC,KAAK,cAAe,CAC3CJ,QACAC,aAHR,uBACYI,EADZ,EACYA,KADZ,kBAKWA,GALX,2C,yHAQA,WAAkBC,GAAlB,iBAAAJ,EAAA,sEAC2BC,IAAIC,KAAK,eAAgB,CAC5CE,UAFR,uBACYD,EADZ,EACYA,KADZ,kBAIWA,GAJX,2C,2EAOA,WACIE,aAAaC,WAAW,QACxBD,aAAaC,WAAW,SACxBD,aAAaC,WAAW,e,4BAG5B,SAAeR,GACX,OAAOG,IAAIC,KAAK,wBAAyB,CACrCJ,Y,wBAIR,SAAWM,EAAON,GACd,OAAOG,IAAIC,KAAK,mBAAoB,CAChCE,QACAN,Y,2BAIR,SAAcM,EAAON,EAAOC,EAAUQ,GAClC,OAAON,IAAIC,KAAK,sBAAuB,CACnCE,QACAN,QACAC,WACAQ,gB,sBAIR,SAASC,EAAUV,EAAOC,GACtB,OAAOE,IAAIC,KAAK,cAAe,CAC3BM,WACAV,QACAC,e,4BAIR,WACI,OAAOE,IAAIQ,IAAI,sB,KAIR,QAAIZ,G,6DCzDba,E,2FACF,WACI,OAAOT,IAAIQ,IAAJ,e,0BAEX,SAAaN,GACT,OAAOF,IAAIU,IAAJ,YAAqBR,O,KAIrB,QAAIO,G,4GCsIJE,IAnFE,SAACC,GACd,MAAsCC,mBAAS,MAA/C,mBAAoBC,GAApB,WACA,EAAgCD,mBAAS,IAAzC,mBAAiBE,GAAjB,WAEQC,EAAkCJ,EAAlCI,SAAUC,EAAwBL,EAAxBK,oBAEVC,EAAOC,cAAPD,GAERE,qBAAU,WACNN,EAAe,MACXE,EACAK,IAAeC,qBAAqBC,MAAK,SAACC,GACtCV,EAAeU,EAAStB,SAG5BmB,IAAeI,gBAAgBP,GAAIK,MAAK,SAACC,GACrCV,EAAeU,EAAStB,SAGhCwB,IAAgBC,cAAcJ,MAAK,SAACC,GAC5BA,EAAStB,MAAMa,EAAYS,EAAStB,WAE7C,CAACgB,EAAIF,IAER,IAAMY,EAAmBC,iBAAO,MAC1BC,EAAeD,iBAAO,MACtBE,EAAWF,iBAAO,MACxB,EAAwChB,qBAAxC,mBAAOmB,EAAP,KAAqBC,EAArB,KACA,EAAkCpB,mBAAS,IAA3C,mBAAOqB,EAAP,KAAkBC,EAAlB,KACIC,GAAmB,EAEjBC,EAAmB,SAACC,GACtBH,EAAa,CAACG,GAAF,mBAAcJ,MAGxBK,EAAmB,WACjBP,GACAA,EAAaQ,kBAAkB,CAAEC,KAAM,KAE3CxB,GAAoB,IA6BxB,OA1BAG,qBAAU,WACN,IAAMsB,EAAO,CACTC,QACI/B,EAAMgC,QAAQC,gBACd,kDACJC,UACIlC,EAAMgC,QAAQG,kBACd,uCACJC,SAAU,GACVC,SAAU,CAAEC,OAAO,EAAMC,OAAO,GAChCC,cAAexB,EAAiByB,QAChCC,UAAWxB,EAAauB,QACxBtB,SAAUA,EAASsB,QACnBE,aAAa,EACbC,OAAQ,aACRC,oBAAqBpB,EACrBqB,wBAAyBnB,GAIxBH,IACDA,GAAmB,EACnBH,EAAgB,IAAI0B,IAAajB,OAEtC,IAGC,mCACI,qBAAKkB,IAAKhC,EAAkBiC,MAAO,CAAEC,KAAM,GAA3C,SACI,qBAAKF,IAAK9B,EAAc+B,MAAO,CAAEE,OAAQ,GAAzC,SACI,uBAAOH,IAAK7B,Y,gCCtIhC,aAOM/B,EAPN,OAOYgE,EAAMC,OAAO,CACrBC,QAJM,mCAKNC,iBAAiB,IAGrBnE,EAAIoE,aAAaC,QAAQC,KACrB,SAAUC,GACN,IAAMpE,EAAQC,aAAaoE,QAAQ,SAEnC,OADIrE,IAAOoE,EAAIE,QAAQ,cAAgBtE,GAChCoE,KAEX,SAAUG,GACN,OAAOC,QAAQC,OAAOF,MAIf1E,O,+HCtBA6E,gBC0CAC,EAtCG,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjB,EAAgCC,IAAxBC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAkCrB,OAhCA9D,qBAAU,WACNpB,IAAIoE,aAAa5C,SAAS8C,KACtB,SAAC9C,GAAD,OAAcA,IADlB,uCAEI,WAAOkD,GAAP,iBAAA3E,EAAA,yDACUoF,EAAkBT,EAAMU,OAEA,MAA1BV,EAAMlD,SAAS6D,QACS,wBAAxBF,EAAgBG,IAJxB,yCAMe,IAAIX,SAAQ,SAACY,EAASX,GACzBM,IACAM,EAAQC,KAAK,UACbb,EAAOF,OATnB,UAakC,MAA1BA,EAAMlD,SAAS6D,QAAmBF,EAAgBO,OAb1D,iCAeYP,EAAgBO,QAAS,EAfrC,SAgB8B1F,IAAIC,KAAK,uBAhBvC,cAgBkB0F,EAhBlB,OAiBYvF,aAAawF,QAAQ,QAASD,EAAIzF,KAAKC,OAjBnD,kBAkBmBH,YAAImF,IAlBvB,kCAoBYD,IACAM,EAAQC,KAAK,UArBzB,iCAwBWd,QAAQC,OAAOF,IAxB1B,0DAFJ,yDA6BD,IAEIO,EAAcF,EAAW,M,yBCnC9Bc,EAAcC,0BAEdC,EAAe,SAAC,GAAkB,IAAhBhB,EAAe,EAAfA,SACpB,EAAgClE,mBAAS,CACrCV,MAAO,KADX,mBAAO6F,EAAP,KAAiBC,EAAjB,KAIA,EAAoCpF,oBAAS,GAA7C,mBAAOqF,EAAP,KAAmBC,EAAnB,KACA,EAAsCtF,oBAAS,GAA/C,mBAAOoE,EAAP,KAAoBmB,EAApB,KAEAhF,qBAAU,WACFhB,aAAaoE,QAAQ,WACrB2B,GAAc,GACdF,GAAY,kBAAMI,EAAajG,aAAaoE,QAAQ,cAExD4B,GAAe,KAChB,IAEH,IAAMC,EAAe,SAAClG,GAClB,GAAIA,EAAO,CACP,IAAMmG,EAAUC,YAAWpG,GAC3B,OAAO,2BACAmG,GADP,IAEInG,UAGJ,MAAO,CACHA,MAAO,KAoBnB,OACI,cAAC0F,EAAYW,SAAb,CACIC,MAAO,CACHC,aAAc,SAACxG,GAAD,OAnBN,SAACA,GACjB,IAAQC,EAAUD,EAAVC,MAERgG,GAAc,GAEdF,GAAY,kBAAMI,EAAalG,MAC/BC,aAAawF,QAAQ,QAASzF,GAaEwG,CAAYzG,IACpCgF,OAXG,WACXe,EAAY,MACZE,GAAc,GAEdS,IAAY1B,UAQJD,cACAiB,aACAC,gBACAH,WACAC,eARR,SAWI,cAAC,EAAD,UAAYlB,OAKlBC,EAAU,WACZ,IAAM6B,EAAUC,qBAAWjB,GAE3B,QAAgBkB,IAAZF,EACA,MAAM,IAAIG,MAAM,4CAEpB,OAAOH,G,4KC3DI,M,wFAbX,WACI,OAAO7G,IAAIQ,IAAJ,a,yBAGX,SAAYN,GACR,OAAOF,IAAIC,KAAJ,UAAoBC,K,yBAG/B,SAAYgB,GACR,OAAOlB,IAAIiH,OAAJ,kBAAsB/F,Q,MCiBtBgG,EAzBO,WAClB,IAAMC,EAAWC,cACjB,EAAsDpC,IAA9CkB,EAAR,EAAQA,WAAYF,EAApB,EAAoBA,SAAUd,EAA9B,EAA8BA,OAAQD,EAAtC,EAAsCA,YACtC7D,qBAAU,WACN,GAAI6D,EAAa,CACb,IAAKiB,EAGD,OAFAhB,IACAiC,EAAS,UACF,KAGX,GAAI,OAACnB,QAAD,IAACA,MAAUqB,MACX,cAAIrB,QAAJ,IAAIA,KAAUsB,WACVH,EAAS,YAAD,OAAanB,EAASsB,YACvB,OAEPpC,IACAiC,EAAS,UACF,SAIpB,CAACjB,EAAD,OAAaF,QAAb,IAAaA,OAAb,EAAaA,EAAUqB,MAAvB,OAA8BrB,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAUsB,UAAWrC,KCmK3CsC,EAtKA,SAAC3G,GACZ,IAAM4G,EAAU3F,iBAAO,MACvB,EAA4BhB,mBAAS,MAArC,mBAAO4G,EAAP,KAAeC,EAAf,KACA,EAA0C7G,mBAAS,MAAnD,mBAAO8G,EAAP,KAAsBC,EAAtB,KACMT,EAAWC,cAEjBhG,qBAAU,WACNyG,EAAaC,WAAWvG,MAAK,SAACC,GAC1BkG,EAAUlG,EAAStB,WAExB,IAEHgH,IAEA,IAAMa,EAAQ,uCAAG,WAAOC,GAAP,eAAAjI,EAAA,sEACU8H,EAAaI,YAAYD,GADnC,QACPxG,EADO,QAEAtB,OACTgI,IAAMC,QAAQ,SACdT,EAAUlG,EAAStB,MACnB0H,EAAiB,MACbJ,EAAQnE,SAASmE,EAAQnE,QAAQ+E,eAN5B,2CAAH,sDAURC,EAAW,uCAAG,WAAOnH,GAAP,eAAAnB,EAAA,sEACO8H,EAAaQ,YAAYnH,GADhC,QACVM,EADU,QAEHtB,MAAMwH,EAAUlG,EAAStB,MAFtB,2CAAH,sDAKjB,OACI,cAACoI,EAAA,EAAD,CAAWC,SAAUd,EAArB,SACI,eAAC,IAAD,CACI5D,MAAO,CACH2E,OAAQ,OACRC,QAAS,OACT3E,KAAM,EACN4E,WAAY,SALpB,UAQI,cAAC,IAAD,CACIC,OAAQ,kBAAMxB,EAAS,WACvByB,MAAK,SACL/E,MAAO,CACHgF,UAAW,wBACXC,SAAU,QACV/E,OAAQ,IACRgF,MAAO,UAIf,eAAC,UAAD,CACIlF,MAAO,CACHC,KAAM,EACNkF,SAAU,OACVC,QAAS,OACTC,WAAY,QACZC,SAAU,QACVJ,MAAO,OACPK,OAAQ,QARhB,UAWI,cAAC,IAAD,CACIC,QAAS,kBAAMzB,EAAiB,KAChC/D,MAAO,CAAEuF,OAAQ,QAFrB,uBAMA,cAAC,IAAD,CACIE,UAAW3B,EACX4B,SAAU,kBAAM3B,EAAiB,OACjC4B,OAAQ,KAHZ,SAKI,eAAC,IAAD,CACIzB,SAAUA,EACVlE,MAAO,CACHoF,QAAS,QACTE,SAAU,QACVC,OAAQ,QAEZxF,IAAK4D,EAPT,UASI,cAAC,IAAKiC,KAAN,CACIC,KAAK,QACLC,MAAO,CACH,CACIC,UAAU,EACVtH,QAAS,mBACTuH,KAAM,UANlB,SAUI,cAAC,IAAD,CAAOC,YAAY,YAGvB,cAAC,IAAKL,KAAN,UACI,cAAC,IAAD,CACII,KAAK,UACLE,SAAS,SACTlG,MAAO,CAAEkF,MAAO,QAHpB,yBAUXtB,GACG,cAAC,IAAD,CACIuC,WAAW,aACXC,WAAYxC,EAAOyC,MAAK,SAACnK,EAAGoK,GAAJ,OACpBpK,EAAE2J,KAAOS,EAAET,KAAO,GAAK,KAE3BU,WAAY,SAACC,GAAD,OACR,cAAC,IAAKZ,KAAN,CACIa,QAAS,CACL,cAAC,IAAD,CACIC,QACI,cAAC,IAAD,UACI,cAAC,IAAD,CACI3B,MAAM,qCACN4B,UAAW,kBACPnC,EACIgC,EAAMxK,QAGd4K,OAAO,MACPC,WAAW,KARf,SAUI,cAAC,IAAKjB,KAAN,CAEIkB,QAAM,EAFV,mBACQ,SAQpBC,QAAS,CAAC,SAtBd,SAwBI,cAACC,EAAA,EAAD,CACIhH,MAAO,CAAEiH,SAAU,aAI/BjH,MAAO,CACHkH,aAAc,iBACdC,YAAa,QAjCrB,SAoCI,cAAC,IAAKvB,KAAKwB,KAAX,CACIrC,MAAOyB,EAAMxK,MACbqL,YACIb,EAAMc,OACA,SACA,6B,kCC/JnC,M,qFAdX,SAAM7D,EAAW8D,EAASC,EAAYC,GAClC,OAAOtL,IAAIC,KAAJ,cAAgBqH,GAAa,CAChC8D,UACAC,aACAE,MAAOD,EAAO,GACdE,OAAQF,EAAO,O,4BAIvB,WACI,OAAOtL,IAAIQ,IAAJ,wB,wCCPFiL,EAAY,SAAC7K,GACtB,IACIV,EAMAU,EANAV,KACA0I,EAKAhI,EALAgI,MACA8C,EAIA9K,EAJA8K,OACAC,EAGA/K,EAHA+K,QAJJ,EAOI/K,EAFAiJ,YALJ,MAKW,YALX,IAOIjJ,EADAgL,cANJ,SASMC,EAAc3L,EAAI,CAEd,CACI4L,IAAe5L,EAAK6L,cAAc,GAAGrC,KAAKsC,QAAQ,MAAO,KACzDF,IACI5L,EAAK6L,cAAcL,GAAQhC,KAAKsC,QAAQ,MAAO,OALzC,mBAQX9L,EAAK+L,KACHC,KAAI,SAACC,GAAD,MAAO,CACRP,EAASQ,IAAOD,EAAE,GAAI,YAAYE,OAAO,SAAWF,EAAE,GACtDG,SAASH,EAAET,KAAYC,EAAU,GAAK,OAEzCzB,MAAK,SAACnK,EAAGoK,GAAJ,OAAWyB,EAAS,EAAIzB,EAAE,GAAKpK,EAAE,QAE/C,GACN,OACI,qBAAK8D,MAAO,CAAEsF,SAAU,QAASC,OAAQ,OAAQL,MAAO,QAAxD,SACI,cAAC,IAAD,CACIwD,UAAW1C,EACXd,MAAM,OACNP,OAAO,QACPtI,KAAM2L,EACNW,QAAS,CACL5D,QACA6D,OAAQ,CACJ3D,SAAU,QAEd4D,UAAW,CAAE3D,MAAO,MAAOP,OAAQ,OACnCmE,WAAW,EACX5D,MAAO,aCsLZ6D,EAnNQ,SAAChM,GACpB,IAAQM,EAAOC,cAAPD,GAER,EAA8BL,mBAAS,MAAvC,mBAAO+B,EAAP,KAAgBiK,EAAhB,KACA,EAAgChM,mBAAS,MAAzC,mBAAOiM,EAAP,KAAiBC,EAAjB,KACA,EAAgClM,mBAAS,MAAzC,mBAAOmM,EAAP,KAAiBC,EAAjB,KACA,EAAoCpM,mBAAS,MAA7C,mBAAOqM,EAAP,KAAmBC,EAAnB,KACA,EAAoCtM,mBAAS,MAA7C,mBAAOuM,EAAP,KAAmBC,EAAnB,KACA,EAA4BxM,mBAAS,CACjCuL,MAASkB,SAAS,EAAG,OAAOjB,SAC5BD,MAASC,WAFb,mBAAOf,EAAP,KAAeiC,EAAf,KAIMpG,EAAWC,cACjB,EAAyCpC,IAAjCE,EAAR,EAAQA,OAAQgB,EAAhB,EAAgBA,WAAYF,EAA5B,EAA4BA,SAE5B5E,qBAAU,WACN,IACK8E,IACA,OAACF,QAAD,IAACA,MAAUqB,QACRnG,EAAGsM,cAAH,OAAkBxH,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAUsB,UAAUkG,YAI1C,OAFAtI,IACAiC,EAAS,UACF,OAEZ,CAACjB,EAAD,OAAaF,QAAb,IAAaA,OAAb,EAAaA,EAAUqB,MAAvB,OAA8BrB,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAUsB,YAE3ClG,qBAAU,WACNC,IAAeoM,WAAWvM,GAAIK,MAAK,SAACC,GAChCqL,EAAWrL,EAAStB,WAEzB,IAEHkB,qBAAU,WACgB,IAAlBkK,EAAOoC,QAAP,OAAuB9K,QAAvB,IAAuBA,KAAS1B,KAChC6L,EAAY,MACZE,EAAY,MACZE,EAAc,MACdE,EAAc,MACdM,OAEL,CAACrC,EAAO,GAAIA,EAAO,GAAnB,OAAuB1I,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAS1B,KAEnC,IAAMyM,EAAgB,WAClBC,EACKC,MACGjL,EAAQ1B,GACR,mEACA,UACAoK,GAEH/J,MAAK,SAACoE,GACHoH,EAAYpH,EAAIzF,KAAKA,SAExB4N,OAAM,SAACC,GACJ7F,IAAMxD,MAAM,sCAGpBkJ,EACKC,MAAMjL,EAAQ1B,GAAI,WAAY,UAAWoK,GACzC/J,MAAK,SAACoE,GACHsH,EAAYtH,EAAIzF,KAAKA,SAExB4N,OAAM,SAACC,GACJ7F,IAAMxD,MAAM,yCAGpBkJ,EACKC,MAAMjL,EAAQ1B,GAAI,WAAY,oBAAqBoK,GACnD/J,MAAK,SAACoE,GACHwH,EAAcxH,EAAIzF,KAAKA,SAE1B4N,OAAM,SAACC,GACJ7F,IAAMxD,MAAM,uCAGpBkJ,EACKC,MAAMjL,EAAQ1B,GAAI,WAAY,YAAaoK,GAC3C/J,MAAK,SAACoE,GACH0H,EAAc1H,EAAIzF,KAAKA,SAE1B4N,OAAM,SAACC,GACJ7F,IAAMxD,MAAM,wCAIxB,OACI,cAAC4D,EAAA,EAAD,UACI,eAAC,IAAD,CACIzE,MAAO,CACH2E,OAAQ,OACRC,QAAS,OACT3E,KAAM,EACN4E,WAAY,SALpB,UAQI,cAAC,IAAD,CACIC,OAAQ,kBAAMxB,EAAS,YAAD,OAAajG,KACnC0H,MACI,iDAEI,uBACA,cAAC,IAAWoF,YAAZ,CACIC,KAAK,QACLC,aAAc,CACV9B,MAASkB,SAAS,EAAG,OACrBlB,OAEJ+B,SAAU,SAACC,GAAD,OACNb,EAAU,CAACa,EAAE,GAAG/B,SAAU+B,EAAE,GAAG/B,YAEnCgC,YAAY,OAIxBxK,MAAO,CAAEkH,aAAc,oBAE1BnI,GACG,cAAC,UAAD,CACIiB,MAAO,CACHC,KAAM,EACNkF,SAAU,OACVE,WAAY,QACZD,QAAS,OAETF,MAAO,OACPK,OAAQ,QARhB,SAWI,sBACIvF,MAAO,CACHyK,UAAW,SACX7F,QAAS,OACT8F,cAAe,MACfC,SAAU,OACVC,WAAY,SACZC,eAAgB,UAPxB,UAUI,cAAC,EAAD,CACIxO,KAAM4M,EACNlE,MAAM,QACN+F,KAAK,QACLC,OAAO,QACPlD,OAAQ,IAEZ,cAAC,EAAD,CACIxL,KAAM4M,EACNlE,MAAM,YACN+F,KAAK,QACLC,OAAO,QACPlD,OAAQ,IAEZ,cAAC,EAAD,CACIxL,KAAM4M,EACNlE,MAAM,aACN+F,KAAK,QACLC,OAAO,QACPlD,OAAQ,IAEZ,cAAC,EAAD,CACIxL,KAAM4M,EACNlE,MAAM,WACN+F,KAAK,QACLC,OAAO,QACPlD,OAAQ,IAEZ,cAAC,EAAD,CACIxL,KAAM4M,EACNlE,MAAM,6BACN+F,KAAK,QACLC,OAAO,QACPlD,OAAQ,EACRC,SAAO,IAEX,cAAC,EAAD,CACIzL,KAAMgN,EACNtE,MAAM,cACN+F,KAAK,QACLC,OAAO,QACP/E,KAAK,WACL6B,OAAQ,EACRC,SAAO,EACPC,QAAQ,IAEZ,cAAC,EAAD,CACI1L,KAAMkN,EACNxE,MAAM,SACN+F,KAAK,QACLC,OAAO,QACP/E,KAAK,WACL6B,OAAQ,EACRE,QAAQ,IAEZ,cAAC,EAAD,CACI1L,KAAM8M,EACNpE,MAAM,SACN+F,KAAK,QACLC,OAAO,QACP/E,KAAK,QACL6B,OAAQ,EACRE,QAAQ,e,SC/FzBiD,GAhHG,SAACjO,GACf,MAAkCC,mBAAS,MAA3C,mBAAOiO,EAAP,KAAkBC,EAAlB,KACMvH,EAAU3F,iBAAO,MAEjBsF,EAAWC,cAEjBhG,qBAAU,WACNM,IACKC,cACAJ,MAAK,SAACC,GACCA,EAAStB,MACT6O,EAAavN,EAAStB,MACtBsH,EAAQnE,SACJmE,EAAQnE,QAAQ2L,eAAexN,EAAStB,OACzC6O,EAAa,OAEvBjB,OAAM,WACHiB,EAAa,SAEtB,IAEH7H,IACA,IAAMa,EAAQ,uCAAG,WAAOC,GAAP,eAAAjI,EAAA,sEACU2B,IAAgBuN,aAAajH,GADvC,QACPxG,EADO,QAEAtB,OACT6O,EAAavN,EAAStB,MACtBgI,IAAMC,QAAQ,UAJL,2CAAH,sDAQd,OACI,cAACG,EAAA,EAAD,UACI,eAAC,IAAD,CACIzE,MAAO,CACH2E,OAAQ,OACRC,QAAS,OACT3E,KAAM,EACN4E,WAAY,SALpB,UAQI,cAAC,IAAD,CACIC,OAAQ,kBAAMxB,EAAS,WACvByB,MAAM,YACN/E,MAAO,CACHgF,UAAW,wBACXC,SAAU,QACV/E,OAAQ,IACRgF,MAAO,UAIf,cAAC,UAAD,CACIlF,MAAO,CACHC,KAAM,EACNkF,SAAU,OACVC,QAAS,OACTC,WAAY,QACZC,SAAU,QACVJ,MAAO,OACPK,OAAQ,QARhB,SAWI,eAAC,IAAD,CACIxF,IAAK4D,EACLkC,KAAK,eACL3B,SAAUA,EACVlE,MAAO,CACHoF,QAAS,QACTE,SAAU,QACVC,OAAQ,QAEZ8F,cAAeJ,EATnB,UAWI,cAAC,IAAKrF,KAAN,CAAWC,KAAK,QAAhB,SACI,cAAC,IAAD,CAAOI,YAAY,YAGvB,cAAC,IAAKL,KAAN,CAAWC,KAAK,QAAhB,SACI,cAAC,IAAD,CAAOI,YAAY,YAGvB,cAAC,IAAKL,KAAN,CAAWC,KAAK,OAAhB,SACI,cAAC,IAAD,CAAOI,YAAY,oCAGvB,cAAC,IAAKL,KAAN,UACI,cAAC,IAAD,CACII,KAAK,UACLE,SAAS,SACTlG,MAAO,CAAEkF,MAAO,QAHpB,oBAQJ,cAAC,IAAKU,KAAN,UACI,cAAC,IAAD,CACIJ,QAAS,WACD7B,EAAQnE,SACRmE,EAAQnE,QAAQ+E,eAExBvE,MAAO,CAAEkF,MAAO,QALpB,gC,mGChGb,O,uFAPX,SAAQoG,EAASC,GACb,OAAOpP,IAAIQ,IAAI,iBAAkB,CAC7B6O,OAAQ,CAAEF,UAAWA,EAASC,SAAUA,S,MC+BrCE,GA/BX,SAACC,EAAIJ,EAASC,GAAd,8CACA,mCAAArP,EAAA,+DACIyP,OADJ,EAEItP,KACAuP,EAHJ,EAGIA,KAHJ,EAIIC,SAJJ,EAKIjL,QACAkL,EANJ,EAMIA,QANJ,EAOIC,WACAC,EARJ,EAQIA,UARJ,EASI1L,gBATJ,kBAY0B2L,GAAaC,QAAQZ,EAASC,GAZxD,OAYczJ,EAZd,OAcQ3B,KACKtD,IAAIiF,EAAIzF,KAAK8P,cAAeP,EAAM,IAClClO,MAAK,SAAC0O,GACHV,EAAG,CAAEjK,IAAKK,EAAIzF,KAAKoF,IAAK4K,UAAWvK,EAAIzF,KAAKgQ,YAC5CL,EAAUlK,EAAIzF,KAAKgQ,cAEtBpC,OAAM,SAACC,GACJoC,QAAQC,IAAIrC,EAAIzL,SAChBqN,OAtBhB,gDAyBQA,IACAzH,IAAMxD,MAAM,KAAMpC,SA1B1B,yDADA,uDCCE+N,GAAO,SAACzP,GACV,IAAM0P,EAAyBhB,IAC3B,SAACtH,GACGpH,EAAMoO,eAAN,gBAAwBpO,EAAMM,GAAK8G,EAAO1C,QAE9C1E,EAAMuO,SACN,GAEJ,EAA0BtO,mBAAS,IAAnC,mBAAO0P,EAAP,KAAcC,EAAd,KAIA,OAHApP,qBAAU,WACNqP,YAAW,kBAAMD,EAAS5P,EAAMA,EAAMM,OAAM,OAC7C,CAACN,EAAMA,EAAMM,MAEZ,qCACKqP,IAAU3P,EAAMA,EAAMM,IACnBN,EAAMuO,QACF,wBACIjO,GAAG,YACHwP,MAAM,WACNC,UAAQ,EACRC,QAAQ,OACR,aAAW,KALf,UAOI,wBAAQC,IAAKN,EAAO1G,KAAK,cACzB,oBAAG6G,MAAM,YAAT,sGAGI,mBACII,KAAK,2CACLC,OAAO,SACPC,IAAI,aAHR,wCAUR,cAAC,KAAD,CAAOH,IAAKN,EAAO1M,MAAO,CAAEoN,UAAW,UAG3C,cAACC,GAAA,EAAD,IAEJ,qBAAKrN,MAAO,CAAEsN,UAAW,QAAzB,SACI,cAAC,KAAD,CACIC,cAAed,EACfe,gBAAgB,EAChBC,SAAU,EACVC,kBAAmB,aAJvB,SAMI,cAAC,IAAD,6BAoNLC,GA7MW,SAAC,GAAwB,IAAtBxC,EAAqB,EAArBA,eACzB,OACI,qCACI,cAAC,IAAKvF,KAAN,CACIC,KAAK,OACL+H,MAAM,OACN9H,MAAO,CACH,CACIC,UAAU,EACVtH,QAAS,qBANrB,SAUI,cAAC,IAAD,CAAOwH,YAAY,WAGvB,cAAC,IAAKL,KAAN,CACIC,KAAK,MACL+H,MAAM,MACN9H,MAAO,CACH,CACIC,UAAU,EACVtH,QAAS,oBAGjBoP,MAAM,4IATV,SAWI,cAAC,IAAD,CAAO5H,YAAY,UAGvB,cAAC,IAAKL,KAAN,CACIgI,MAAM,kBACN/H,KAAK,YACLiI,cAAc,UAHlB,SAKI,cAAC,KAAD,MAGJ,cAAC,IAAKlI,KAAN,CAAWC,KAAK,iBAAiB+H,MAAM,kBAAvC,SACI,cAAC,IAAD,CAAO3H,YAAY,sBAGvB,cAAC,IAAKL,KAAN,CAAWC,KAAK,mBAAmB+H,MAAM,qBAAzC,SACI,cAAC,IAAD,CAAO3H,YAAY,yBAGvB,cAAC,IAAKL,KAAN,CAAWC,KAAK,YAAY+H,MAAM,aAAaG,QAAM,EAArD,SACI,cAAC,IAAD,CAAO9H,YAAY,iBAGvB,cAAC,IAAKL,KAAN,CAAWC,KAAK,UAAU+H,MAAM,WAAWG,QAAM,EAAjD,SACI,cAAC,IAAD,CAAO9H,YAAY,eAGvB,cAAC,IAAKL,KAAN,CACIgI,MAAM,oBACN/H,KAAK,eACLiI,cAAc,UAHlB,SAKI,cAAC,KAAD,MAEJ,cAAC,IAAKlI,KAAN,CACIgI,MAAM,mBACN/H,KAAK,sBACLiI,cAAc,UAHlB,SAKI,cAAC,KAAD,MAEJ,cAAC,IAAKlI,KAAN,CACIgI,MAAM,mBACNE,cAAc,kBACdjI,KAAK,kBAHT,SAKI,cAAC,GAAD,CAAMsF,eAAgBA,EAAgBG,SAAO,MAEjD,cAAC,IAAK1F,KAAN,CACIgI,MAAM,mBACNE,cAAc,kBACdjI,KAAK,kBAHT,SAKI,cAAC,GAAD,CAAMsF,eAAgBA,MAG1B,cAAC,IAAKvF,KAAN,CAAWC,KAAK,aAAa+H,MAAM,eAAnC,SACI,cAAC,IAAD,CAAO3H,YAAY,kBAGvB,cAAC,IAAKL,KAAN,CACIC,KAAK,gBACL+H,MAAM,kBACN9H,MAAO,CACH,CACIkI,IAAK,EACLvP,QAAS,iCANrB,SAUI,cAAC,IAAD,CAAOwH,YAAY,qBAGvB,cAAC,IAAKL,KAAN,CAAWC,KAAK,WAAW+H,MAAM,qBAAjC,SACI,cAAC,IAAD,CAAO3H,YAAY,mCAGvB,cAAC,IAAKL,KAAN,CACIC,KAAK,qBACL+H,MAAM,uBACNE,cAAc,UAHlB,SAKI,cAAC,KAAD,qCAEJ,cAAC,IAAKlI,KAAN,CACIC,KAAK,sBACL+H,MAAM,wBACNE,cAAc,UAHlB,SAKI,cAAC,KAAD,MAGJ,cAAC,IAAKlI,KAAN,CACIC,KAAK,YACLiI,cAAc,UACdF,MAAM,YAHV,SAKI,cAAC,KAAD,MAGJ,cAAC,IAAKhI,KAAN,CACIgI,MAAM,qBACN/H,KAAK,mBACLiI,cAAc,UAHlB,SAKI,cAAC,KAAD,MAEJ,cAAC,IAAKlI,KAAN,CACIgI,MAAM,2BACN/H,KAAK,wBAFT,SAII,cAAC,IAAD,CAAOG,KAAK,aAGhB,cAAC,IAAKJ,KAAN,CACIgI,MAAM,cACNE,cAAc,aACdjI,KAAK,aAHT,SAKI,cAAC,GAAD,CAAMsF,eAAgBA,MAE1B,cAAC,IAAKvF,KAAN,CAAWgI,MAAM,wBAAwB/H,KAAK,qBAA9C,SACI,cAAC,IAAD,CAAOG,KAAK,aAEhB,cAAC,IAAKJ,KAAN,CACIgI,MAAM,yBACN/H,KAAK,sBAFT,SAII,cAAC,IAAD,CAAOG,KAAK,aAGhB,cAAC,IAAKJ,KAAN,CACIgI,MAAM,eACNE,cAAc,cACdjI,KAAK,cAHT,SAKI,cAAC,GAAD,CAAMsF,eAAgBA,MAE1B,cAAC,IAAKvF,KAAN,CACIgI,MAAM,yBACN/H,KAAK,sBAFT,SAII,cAAC,IAAD,CAAOG,KAAK,aAEhB,cAAC,IAAKJ,KAAN,CACIgI,MAAM,0BACN/H,KAAK,uBAFT,SAII,cAAC,IAAD,CAAOG,KAAK,aAEhB,cAAC,IAAKJ,KAAN,CACIC,KAAK,cACL+H,MAAM,eACNC,MAAM,4FAHV,SAKI,cAAC,IAAD,CAAO5H,YAAY,kBAEvB,cAAC,IAAKL,KAAN,CACIC,KAAK,cACL+H,MAAM,cACNC,MAAM,wEAHV,SAKI,cAAC,KAAD,CAAU5H,YAAY,cAAcmC,KAAM,MAG9C,cAAC,IAAKxC,KAAN,CAAWqI,WAAY,CAAEC,OAAQ,EAAGC,KAAM,IAA1C,SACI,cAAC,IAAD,CACInI,KAAK,UACLE,SAAS,SACTlG,MAAO,CAAEkF,MAAO,QAHpB,wBCrKDkJ,GA9EO,SAACrR,GACnB,IAAM4G,EAAU3F,iBAAO,MAEjBsF,EAAWC,cAEjBF,IAEA,IAAMa,EAAQ,uCAAG,WAAOC,GAAP,SAAAjI,EAAA,sEACUsB,IAAe6Q,cAAclK,GADvC,cAEA9H,OACTgI,IAAMC,QAAQ,SACdhB,EAAS,WAJA,2CAAH,sDAQd,OACI,cAACmB,EAAA,EAAD,UACI,eAAC,IAAD,CACIzE,MAAO,CACH2E,OAAQ,OACRC,QAAS,OACT3E,KAAM,EACN4E,WAAY,SALpB,UAQI,cAAC,IAAD,CACIC,OAAQ,kBAAMxB,EAAS,WACvByB,MAAM,iBACN/E,MAAO,CACHgF,UAAW,wBACXC,SAAU,QACV/E,OAAQ,IACRgF,MAAO,UAIf,cAAC,UAAD,CACIlF,MAAO,CACHC,KAAM,EACNkF,SAAU,OACVC,QAAS,OACTC,WAAY,QACZC,SAAU,QACVJ,MAAO,OACPK,OAAQ,QARhB,SAWI,eAAC,IAAD,CACIxF,IAAK4D,EACLkC,KAAK,eACL3B,SAAUA,EACVlE,MAAO,CACHoF,QAAS,QACTE,SAAU,QACVC,OAAQ,QAEZ+I,SAAU,CAAEH,KAAM,GAClBF,WAAY,CAAEE,KAAM,IAVxB,UAYI,cAAC,GAAD,IACA,cAAC,IAAKvI,KAAN,CAAWqI,WAAY,CAAEC,OAAQ,EAAGC,KAAM,IAA1C,SACI,cAAC,IAAD,CACI3I,QAAS,WACD7B,EAAQnE,SACRmE,EAAQnE,QAAQ+E,eAExBvE,MAAO,CAAEkF,MAAO,QALpB,gC,+BCIbqJ,GAtEa,WACxB,MAA4BvR,oBAAS,GAArC,mBAAOwR,EAAP,KAAeC,EAAf,KAaA,OACI,8BACI,qCACI,sBAAMjJ,QAAS,kBAAMiJ,GAAWD,IAAhC,8BACA,cAAC,KAAD,CACIzJ,MAAM,kBACNU,QAAS+I,EACT7I,OAAQ,GACRD,SAAU,kBAAM+I,GAAU,IAJ9B,SAMI,eAAC,IAAD,CACI5I,KAAK,eACL3B,SAvBH,SAAC7H,GACd0G,IACK2L,eAAerS,EAAKL,OACpB0B,MAAK,SAACrB,GACsB,OAArBA,EAAKA,KAAKmF,SACV6C,IAAMC,QAAQ,qCACdmK,GAAU,OAGjBxE,OAAM,SAACpJ,QAeIb,MAAO,CACHoF,QAAS,aACTE,SAAU,QACVC,OAAQ,QANhB,UASI,cAAC,IAAKK,KAAN,CACIC,KAAK,QACLC,MAAO,CACH,CACIE,KAAM,QACNvH,QAAS,kCAEb,CACIsH,UAAU,EACVtH,QAAS,8BATrB,SAaI,cAAC,IAAD,CACIkQ,OACI,cAACC,GAAA,EAAD,CAAcC,UAAU,wBAE5B5I,YAAY,YAIpB,cAAC,IAAKL,KAAN,UACI,cAAC,IAAD,CACII,KAAK,UACLE,SAAS,SACTlG,MAAO,CAAEkF,MAAO,QAHpB,yC,oBCsDb4J,GAzGD,WACV,MAA+C3N,IAAvCkB,EAAR,EAAQA,WAAYQ,EAApB,EAAoBA,aAAcV,EAAlC,EAAkCA,SAClC,EAAkCnF,oBAAS,GAA3C,mBAAO+R,EAAP,KAAkBC,EAAlB,KACA,EAAoDhS,oBAAS,GAA7D,mBAAOiS,EAAP,KAA2BC,EAA3B,KAEM5L,EAAWC,cAEXW,EAAQ,uCAAG,WAAO7H,GAAP,mBAAAH,EAAA,6DACLF,EAAoBK,EAApBL,MAAOC,EAAaI,EAAbJ,SADF,SAIT+S,GAAa,GAJJ,SAKUjM,IAAYoM,MAAMnT,EAAOC,GALnC,OAKHI,EALG,OAMTgI,IAAMC,QAAQ,iCAEdsI,YAAW,WACP/J,EAAaxG,GACb6S,GAAsB,GACtBF,GAAa,KACd,MAZM,kDAcTA,GAAa,GAdJ,0DAAH,sDAyBd,OANK3M,GAAc4M,KACN,OAAR9M,QAAQ,IAARA,KAAUqB,OAAV,OAAmBrB,QAAnB,IAAmBA,KAAUsB,YAE9BH,EAAS,UAIT,cAACmB,EAAA,EAAD,CAAQM,MAAM,QAAQL,QAASqK,EAA/B,SACI,eAAC,IAAD,CACIlJ,KAAK,eACL3B,SAAUA,EACVlE,MAAO,CACHoF,QAAS,aACTE,SAAU,QACVC,OAAQ,QANhB,UASI,cAAC,KAAW6J,MAAZ,CACIpP,MAAO,CAAEyK,UAAW,SAAU4E,aAAc,QADhD,8BAKA,cAAC,IAAKzJ,KAAN,CACIC,KAAK,QACLC,MAAO,CACH,CACIE,KAAM,QACNvH,QAAS,kCAEb,CACIsH,UAAU,EACVtH,QAAS,8BATrB,SAaI,cAAC,IAAD,CACIkQ,OACI,cAACC,GAAA,EAAD,CAAcC,UAAU,wBAE5B5I,YAAY,YAGpB,cAAC,IAAKL,KAAN,CACIC,KAAK,WACLC,MAAO,CACH,CACIC,UAAU,EACVtH,QAAS,gCALrB,SASI,cAAC,IAAM6Q,SAAP,CACIX,OACI,cAACY,GAAA,EAAD,CAAcV,UAAU,wBAE5B7I,KAAK,WACLC,YAAY,eAGpB,cAAC,IAAKL,KAAN,UACI,4BACI,cAAC,GAAD,QAIR,cAAC,IAAKA,KAAN,UACI,cAAC,IAAD,CACII,KAAK,UACLE,SAAS,SACTlG,MAAO,CAAEkF,MAAO,QAHpB,4B,qBC+HLsK,GAxNQ,SAACzS,GACpB,MAA8BC,mBAAS,MAAvC,mBAAO+B,EAAP,KAAgBiK,EAAhB,KAEA,EAAeyG,IAAKC,UAAbC,EAAP,oBAEQtS,EAAOC,cAAPD,GAERE,qBAAU,WACNC,IAAeoM,WAAWvM,GAAIK,MAAK,SAACC,GAChCqL,EAAWrL,EAAStB,WAEzB,CAACgB,IAEJ,IAAMiG,EAAWC,cACjBF,IAEA,IAAMa,EAAQ,uCAAG,WAAOC,GAAP,SAAAjI,EAAA,sEACUsB,IAAeoS,YAAY7Q,EAAQ1B,GAAI8G,GADjD,cAEA9H,MAAMgI,IAAMC,QAAQ,SAFpB,2CAAH,sDAKRuL,EAAwB,OAAP9Q,QAAO,IAAPA,KAAS0C,IAAT,yCACiB1C,EAAQ0C,KAC1C,cACAqO,EAAwB,OAAP/Q,QAAO,IAAPA,KAAS0C,IAAT,uDAC+B1C,EAAQ0C,KACxD,cACAsO,EAA2B,OAAPhR,QAAO,IAAPA,KAAS0C,IAAT,oEACyC1C,EAAQ0C,KACrE,cAYAuO,GADcP,IAAKQ,SAAS,cAAeN,GAC7BF,IAAKQ,SAAS,cAAeN,IAC3CO,EAAaT,IAAKQ,SAAS,aAAcN,GACzCQ,EAAqBV,IAAKQ,SAAS,qBAAsBN,GACzDS,EAAsBX,IAAKQ,SAAS,sBAAuBN,GAC3DU,EAAcZ,IAAKQ,SAAS,cAAeN,GAC3CW,EAAsBb,IAAKQ,SAAS,sBAAuBN,GAC3DY,EAAuBd,IAAKQ,SAAS,uBAAwBN,GACnE,OACI,cAAClL,EAAA,EAAD,CAAWC,SAAU3F,EAArB,SACI,eAAC,IAAD,CACIiB,MAAO,CACH2E,OAAQ,OACRC,QAAS,OACT3E,KAAM,EACN4E,WAAY,SALpB,UAQI,cAAC,IAAD,CACIC,OAAQ,kBAAMxB,EAAS,WACvByB,MAAK,2BAAehG,QAAf,IAAeA,OAAf,EAAeA,EAAS8G,MAC7B7F,MAAO,CACHgF,UAAW,wBACXC,SAAU,QACV/E,OAAQ,IACRgF,MAAO,UAIf,cAAC,UAAD,CACIlF,MAAO,CACHC,KAAM,EACNkF,SAAU,OACVC,QAAS,OACTC,WAAY,QACZC,SAAU,QACVJ,MAAO,OACPK,OAAQ,QARhB,SAWKxG,GACG,qCACI,cAAC,IAAD,CACIyG,QAAS,kBAAMlC,EAAS,YAAD,OAAajG,KACpC2C,MAAO,CAAEuF,OAAQ,QAFrB,oCAMA,cAAC,IAAD,CACIC,QAAS,kBACLlC,EAAS,mBAAD,OACevE,EAAQ1B,GADvB,iBAIZ2C,MAAO,CAAEuF,OAAQ,QANrB,+BAUA,cAAC,IAAD,CACIC,QAAS,kBACLlC,EAAS,mBAAD,OACevE,EAAQ1B,GADvB,YAIZ2C,MAAO,CAAEuF,OAAQ,QANrB,0BAUA,eAAC,KAAWiL,UAAZ,6CACgCX,GAC5B,cAAC,IAAD,CACIrK,QAAS,kBAAMiL,KAAKZ,IACpB7J,KAAK,OAFT,qBAQJ,eAAC,KAAWwK,UAAZ,gDACmCV,GAAkB,IACjD,cAAC,IAAD,CACItK,QAAS,kBAAMiL,KAAKX,IACpB9J,KAAK,OAFT,qBAQJ,eAAC,KAAWwK,UAAZ,qDACwCT,GAAqB,IACzD,cAAC,IAAD,CACIvK,QAAS,kBAAMiL,KAAKV,IACpB/J,KAAK,OAFT,qBAQJ,eAAC,IAAD,CACI2J,KAAMA,EACNzL,SAAUA,EACVlE,MAAO,CACHoF,QAAS,QACTE,SAAU,QACVC,OAAQ,QAEZ8F,cAAetM,EACfuP,SAAU,CAAEH,KAAM,GAClBF,WAAY,CAAEE,KAAM,IAVxB,UAYI,cAAC,GAAD,CACIhD,eAxHT,SAACuF,GAChBf,GACAA,EAAKxE,eAAL,2BACOwE,EAAKgB,kBACLD,OAuHa,cAAC,IAAK9K,KAAN,CAAWqI,WAAY,CAAEC,OAAQ,EAAGC,KAAM,IAA1C,SACI,cAAC,IAAD,CACI3I,QAAS,WACDmK,EAAKnQ,SACLmQ,EAAKnQ,QAAQ+E,eAErBvE,MAAO,CAAEkF,MAAO,QALpB,wBAWR,gCACI,0DACA,sBACIlF,MAAO,CACH4E,QAAS,OACT8F,cAAe,SACfzK,KAAM,EACN2K,WAAY,UALpB,UAQI,qBACIoC,IAAKkD,EACLU,IAAI,OACJ5Q,MAAO,CACHoN,UACIgD,EAAsB,KAC1B9K,SAAU6K,EAAqB,KAC/Bd,aAAc,UAGrBgB,EACG,qBACIrD,IAAKqD,EACLO,IAAI,OACJ5Q,MAAO,CACHoN,UACImD,EAAuB,KAC3BjL,SACIgL,EAAsB,KAC1BjB,aAAc,UAItB,oBAAIrP,MAAO,CAAEyK,UAAW,UAAxB,SACKuF,qB,kDCJ9Ba,GAxLE,SAAC9T,GACd,MAAgCC,mBAAS,MAAzC,mBAAO8T,EAAP,KAAiBC,EAAjB,KACQ1P,EAAWF,IAAXE,OACFiC,EAAWC,cAEjB,EAAoCvG,oBAAS,GAA7C,mBAAOgU,EAAP,KAAmBC,EAAnB,KACA1T,qBAAU,WACNC,IAAeoM,aAAalM,MAAK,SAACC,GAC9BoT,EAAYpT,EAAStB,WAE1B,IAEHgH,IAEA,IAAM6N,EAAa,uCAAG,WAAO7T,GAAP,eAAAnB,EAAA,sEACKsB,IAAe0T,cAAc7T,GADlC,QACZM,EADY,QAELtB,MAAM0U,EAAYpT,EAAStB,MAFtB,2CAAH,sDAKb8U,EAAW,uCAAG,WAAO9T,GAAP,eAAAnB,EAAA,sEACOsB,IAAeoS,YAAYvS,EAAI,CAClDF,UAAU,IAFE,QACVQ,EADU,QAKHtB,MAAM0U,EAAYpT,EAAStB,MALxB,2CAAH,sDAQjB,OACI,eAACoI,EAAA,EAAD,CAAWC,SAAUoM,EAArB,UACI,eAAC,IAAD,CACI9Q,MAAO,CACH2E,OAAQ,OACRC,QAAS,OACT3E,KAAM,EACN4E,WAAY,SALpB,UAQI,cAAC,IAAD,CACIC,OAAQ,kBAAMmM,GAAc,IAC5BG,SAAU,cAACC,GAAA,EAAD,IACVtM,MAAO,WACP/E,MAAO,CACHgF,UAAW,wBACXC,SAAU,QACV/E,OAAQ,IACRgF,MAAO,UAIf,eAAC,UAAD,CACIlF,MAAO,CACHC,KAAM,EACNkF,SAAU,OACVC,QAAS,OACTC,WAAY,QACZC,SAAU,QACVJ,MAAO,OACPK,OAAQ,QARhB,UAWI,cAAC,IAAD,CACIC,QAAS,kBAAMlC,EAAS,2BACxBtD,MAAO,CAAEuF,OAAQ,QAFrB,yBAMCuL,GACG,cAAC,IAAD,CACI3K,WAAW,aACXC,WAAY0K,EAASzK,MAAK,SAACnK,EAAGoK,GAAJ,OACtBpK,EAAEuF,IAAM6E,EAAE7E,IAAM,GAAK,KAEzB8E,WAAY,SAACxH,GAAD,OACR,cAAC,IAAK6G,KAAN,CACIa,QAAS,CACL,cAAC,IAAD,CACIC,QACI,eAAC,IAAD,WACI,cAAC,IAAKd,KAAN,CAEIJ,QAAS,kBACL2L,EACIpS,EAAQ1B,KAJpB,4BACQ,KASR,cAAC,IAAKiU,QAAN,IACA,cAAC,IAAD,CACIvM,MAAM,uCACN4B,UAAW,kBACPuK,EACInS,EAAQ1B,KAGhBuJ,OAAO,MACPC,WAAW,KARf,SAUI,cAAC,IAAKjB,KAAN,CAEIkB,QAAM,EAFV,mBACQ,UAQpBC,QAAS,CAAC,SAjCd,SAmCI,cAACC,EAAA,EAAD,CACIhH,MAAO,CAAEiH,SAAU,aAtCnC,SA2CI,cAAC,IAAKrB,KAAKwB,KAAX,CACImK,OACIxS,EAAQ5B,SACJ,cAACqU,GAAA,EAAD,CACIxR,MAAO,CAAEiH,SAAU,UAEvBlI,EAAQ0S,UACR,cAACC,GAAA,EAAD,CACI1R,MAAO,CAAEiH,SAAU,UAGvB,cAAC0K,GAAA,EAAD,CACI3R,MAAO,CAAEiH,SAAU,UAI/BlC,MAAOhG,EAAQ8G,KACfwB,YAAatI,EAAQ0C,IACrB+D,QAAS,WACLlC,EAAS,mBAAD,OACevE,EAAQ1B,mBAU/D,cAAC,KAAD,CACI0H,MAAM,OACN6M,UAAU,OACVC,QAAS,kBAAMZ,GAAc,IAC7BxL,QAASuL,EAJb,SAMI,eAAC,IAAD,CACIc,KAAK,SACL9R,MAAO,CAAEkF,MAAO,QAChBM,QAAS,YAAmB,EAAhBuM,KAAiB,IAAXC,EAAU,EAAVA,IAEd,OADAf,GAAc,GACNe,GACJ,IAAK,SACD3Q,IACA,MACJ,IAAK,OACDiC,EAAS,kBACT,MACJ,IAAK,SACDA,EAAS,iBACT,MACJ,QACI,SAGZ2O,UAAU,WACVC,aAAc,CAAC,YApBnB,UAsBI,cAAC,IAAKtM,KAAN,sBAAe,YACf,cAAC,IAAKA,KAAN,sBAAe,QACf,cAAC,IAAKA,KAAN,oBAAe,UACf,cAAC,IAAKA,KAAN,oBAAe,mBCvLpB,O,2FAjBX,SAAYnC,EAAWpG,GACnB,OAAOlB,IAAIQ,IAAJ,sBAAuB8G,EAAvB,YAAoCpG,EAAK,IAAMA,EAAK,O,0BAE/D,SAAaoG,EAAWpG,EAAIhB,GACxB,OAAOF,IAAIU,IAAJ,sBAAuB4G,EAAvB,YAAoCpG,GAAMhB,K,4BAErD,SAAeoH,EAAWpG,GACtB,OAAOlB,IAAIC,KAAJ,sBAAwBqH,GAAa,CAAEpG,S,4BAElD,SAAeoG,EAAW0O,GACtB,OAAOhW,IAAIC,KAAJ,sBAAwBqH,EAAxB,WAA4C,CAAE0O,U,wBAEzD,SAAW1O,EAAWpG,EAAIhB,GACtB,OAAOF,IAAIU,IAAJ,sBAAuB4G,EAAvB,mBAA2CpG,GAAMhB,O,0HCFxD+V,GAAWC,KAAXD,OAEFE,GAA8B,SAACjW,GACjC,IAAKA,EAAKkW,YAAa,OAAOlW,EAC9B,IAAMmW,EAAI,GAKV,OAJuC,IAAnCnW,EAAKkW,YAAYE,QAAQ,KAAaD,EAAEE,GAAI,GACJ,IAAnCrW,EAAKkW,YAAYE,QAAQ,OAAaD,EAAEG,GAAI,IACd,IAAnCtW,EAAKkW,YAAYE,QAAQ,KAAaD,EAAEI,GAAI,GACJ,IAAnCvW,EAAKkW,YAAYE,QAAQ,OAAaD,EAAEK,GAAI,GAC9C,2BAAKxW,GAAZ,IAAkBkW,YAAaC,KAG7BM,GAA8B,SAACzW,GACjC,IAAImW,EAAI,GAKR,OAJInW,EAAKkW,YAAYG,EAAGF,GAAQ,IACvBnW,EAAKkW,YAAYI,IAAGH,GAAQ,KACjCnW,EAAKkW,YAAYK,EAAGJ,GAAQ,IACvBnW,EAAKkW,YAAYM,IAAGL,GAAQ,KAC9B,2BAAKnW,GAAZ,IAAkBkW,YAAaC,KAG7BO,GAAe,SAAC,GASf,IARHC,EAQE,EARFA,QACAC,EAOE,EAPFA,UACAlO,EAME,EANFA,MACAmO,EAKE,EALFA,UAGAhS,GAEE,EAJFiS,SAIE,EAHFC,MAGE,EAFFlS,UACGmS,EACD,mBACEC,EAAY,cAAC,KAAD,IAEhB,OAAQJ,GACJ,IAAK,SACDI,EAAY,cAAC,KAAD,IACZ,MACJ,IAAK,cACDA,EACI,eAAC,KAAD,WACI,cAAClB,GAAD,CAAQxP,MAAM,IAAd,mBACA,cAACwP,GAAD,CAAQxP,MAAM,KAAd,wBACA,cAACwP,GAAD,CAAQxP,MAAM,IAAd,kBACA,cAACwP,GAAD,CAAQxP,MAAM,KAAd,wBACA,cAACwP,GAAD,CAAQxP,MAAM,IAAd,mBACA,cAACwP,GAAD,CAAQxP,MAAM,KAAd,wBACA,cAACwP,GAAD,CAAQxP,MAAM,IAAd,kBACA,cAACwP,GAAD,CAAQxP,MAAM,KAAd,2BAGR,MACJ,IAAK,eACD0Q,EACI,eAAC,KAAD,WACI,cAAClB,GAAD,CAAQxP,MAAM,YAAd,uBACA,cAACwP,GAAD,CAAQxP,MAAM,WAAd,sBACA,cAACwP,GAAD,CAAQxP,MAAM,OAAd,qBAGR,MACJ,QACI0Q,EAAY,cAAC,IAAD,IAEpB,OACI,8CAAQD,GAAR,aACKL,EACG,cAAC,IAAKpN,KAAN,CACIC,KAAMoN,EACNjT,MAAO,CACHuF,OAAQ,EACRL,MAAO,QAEXY,MAAO,CACH,CACIC,UAAU,EACVtH,QAAQ,gBAAD,OAAkBsG,EAAlB,OATnB,SAaKuO,IAGLpS,MAgRDqS,GAxQS,SAACxW,GACrB,IAAQyW,EACJzW,EADIyW,WAAYzU,EAChBhC,EADgBgC,QAAS0U,EACzB1W,EADyB0W,cAAejN,EACxCzJ,EADwCyJ,MAE5C,GADIzJ,EAD+CgH,iBAEC/G,mBAAS,KAA7D,mBAAO0W,EAAP,KAA2BC,EAA3B,KACA,EAAoC3W,mBAAS,IAA7C,mBAAO4W,EAAP,KAAmBC,EAAnB,KAEA,EAAepE,IAAKC,UAAbC,EAAP,oBACMmE,EAAY,SAACX,GAAD,OAAcA,EAAS9V,KAAOuW,GAO1CG,EAAS,WACXF,EAAc,KAGZG,EAAI,uCAAG,WAAOhC,GAAP,iBAAA9V,EAAA,+EAEgByT,EAAKsE,iBAFrB,cAEC9P,EAFD,gBAGkB+P,GAAgBC,aACnCpV,EAAQ1B,GACR2U,EACAM,GAA4BnO,IAN3B,QAGCxG,EAHD,QASQtB,OACTgI,IAAMC,QAAQ,SACdmP,EAAc9V,EAAStB,MACvBwX,EAAc,KAZb,kDAeLvH,QAAQC,IAAI,mBAAZ,MAfK,0DAAH,sDAmBJ6H,EAAc,uCAAG,4BAAAlY,EAAA,sEACIgY,GAAgBE,eACnCrV,EAAQ1B,GACRqW,GAHe,QACb/V,EADa,QAKNtB,MAAMoX,EAAc9V,EAAStB,MALvB,2CAAH,qDAyIdgY,EAjIO,CACT,CACItP,MAAO,OACPkO,UAAW,OACXqB,OAAQ,SAACpY,EAAGoK,GAAJ,OAAWpK,EAAEqY,KAAOjO,EAAEiO,KAAO,GAAK,GAC1CC,eAAgB,CAAC,UAAW,UAC5BC,SAAUjO,EACV0M,UAAW,OACXhO,MAAO,KAEX,CACIH,MAAO,eACPkO,UAAW,eACXqB,OAAQ,SAACpY,EAAGoK,GAAJ,OAAWpK,EAAEwY,aAAepO,EAAEoO,aAAe,GAAK,GAC1DF,eAAgB,CAAC,UAAW,UAC5BG,SAAU,SAAC/R,EAAOuQ,GAAR,OACmC,IAAzCA,EAASuB,aAAajC,QAAQ7P,IAClC6R,UAAU,EACVvB,UAAW,eACXhO,MAAO,IACP0P,OAAQ,SAACC,EAAG1B,GAAJ,OAnEA2B,EAmE4B3B,EAASuB,cAnEzBK,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,GAAjD,IAACH,IAqEZ,CACI/P,MAAO,UACPkO,UAAW,UACXqB,OAAQ,SAACpY,EAAGoK,GAAJ,OAAUpK,EAAEgZ,QAAU5O,EAAE4O,SAChCV,eAAgB,CAAC,UAAW,UAC5BC,SAAUjO,EACV0M,UAAW,SACXhO,MAAO,KAEX,CACIH,MAAO,QACPkO,UAAW,QACXqB,OAAQ,SAACpY,EAAGoK,GAAJ,OAAUpK,EAAEiZ,MAAQ7O,EAAE6O,OAC9BX,eAAgB,CAAC,UAAW,UAC5BC,UAAU,EACVvB,UAAW,SACXhO,MAAO,KAEX,CACIH,MAAO,WACPkO,UAAW,gBACXjB,IAAK,WACLwC,eAAgB,CAAC,UAAW,UAC5BC,SAAUjO,EACV0M,UAAW,SACXhO,MAAO,KAEX,CACIH,MAAO,YACPkO,UAAW,iBACXqB,OAAQ,SAACpY,EAAGoK,GAAJ,OAAUpK,EAAEkZ,eAAiB9O,EAAE8O,gBACvCZ,eAAgB,CAAC,UAAW,UAC5BC,SAAUjO,EACV0M,UAAW,SACXhO,MAAO,MAxDF,mBA0DLnG,EAAQ0C,IAAI4T,gBAAkB,kBAAkBA,cAC9C,GACA,CACI,CACItQ,MAAO,WACPkO,UAAW,WACXqB,OAAQ,SAACpY,EAAGoK,GAAJ,OAAUpK,EAAEoZ,SAAWhP,EAAEgP,UACjCd,eAAgB,CAAC,UAAW,UAC5BC,SAAUjO,EACV0M,UAAW,SACXhO,MAAO,KAEX,CACIH,MAAO,QACPkO,UAAW,QACXqB,OAAQ,SAACpY,EAAGoK,GAAJ,OAAUpK,EAAEqZ,MAAQjP,EAAEiP,OAC9Bf,eAAgB,CAAC,UAAW,UAC5BC,SAAUjO,EACV0M,UAAW,SACXhO,MAAO,OA7EZ,CAgFT,CACIH,MAAO,cACPkO,UAAW,cAEXqB,OAAQ,SAACpY,EAAGoK,GAAJ,OACJwM,GAA4B5W,GAAGqW,YAC/BO,GAA4BxM,GAAGiM,YACzB,GACC,GACXiC,eAAgB,CAAC,UAAW,UAC5BC,SAAUjO,EACV0M,UAAW,cACXhO,MAAO,KAEX,CACIH,MAAO,UACPkO,UAAW,UACX/N,MAAO,GACP0P,OAAQ,SAACC,EAAG1B,GAER,OADiBW,EAAUX,GAEvB,iCACI,cAAC,KAAWqC,KAAZ,CACIhQ,QAAS,kBAAMwO,EAAKb,EAAS9V,KAC7B2C,MAAO,CACHyV,YAAa,GAHrB,kBASA,cAAC,KAAWD,KAAZ,CAAiBhQ,QAASuO,EAA1B,uBAKJ,+BACI,cAAC,KAAWyB,KAAZ,CACIE,SAAyB,KAAf9B,EACVpO,QAAS,kBA3JpB,SAAC2N,GACVxD,EAAKxE,eAAegI,GACpBU,EAAcV,EAAS9V,IAyJYsY,CAAKxC,IAFxB,wBAYU9K,KAAI,SAACuN,GAC/B,OAAKA,EAAInB,SAIF,2BACAmB,GADP,IAEIC,OAAQ,SAAC1C,GAAD,MAAe,CACnBA,WACAD,UAAW0C,EAAI1C,UACfD,UAAW2C,EAAI3C,UACflO,MAAO6Q,EAAI7Q,MACXiO,QAASc,EAAUX,OAVhByC,KAeTE,EAAa,uCAAG,4BAAA5Z,EAAA,sEACKgY,GAAgB6B,eACnChX,EAAQ1B,GACRmW,EAAW3J,OAAS2J,EAAWA,EAAW3J,OAAS,GAAGxM,GAAK,IAH7C,QACZM,EADY,QAKLtB,OACTgI,IAAMC,QAAQ,SACdmP,EAAc9V,EAAStB,KAAK2Z,eAC5BnC,EAAclW,EAAStB,KAAK4Z,YAAY5Y,IACxCsS,EAAKxE,eACD2H,GAA4BnV,EAAStB,KAAK4Z,cAE9CC,SAASC,cAAc,sBAAsBC,UAAY,KAZ3C,2CAAH,qDAenB,OACI,qCACI,cAAC,IAAD,CAAMzG,KAAMA,EAAM0G,WAAW,EAA7B,SACI,cAAC,KAAD,CACIC,WAAY,CACRC,KAAM,CACFC,KAAMzD,KAGd3I,KAAK,QACLqM,UAAQ,EACRrQ,WAAYoN,EAAWnL,KAAI,SAACC,GACxB,IAAMoO,EAAI5D,GAA4BxK,GACtC,OAAO,2BAAKoO,GAAZ,IAAe1E,IAAK0E,EAAErZ,QAE1BsZ,QAAStC,EACTuC,aAAa,eACbC,aACIrQ,EACM,CACIR,KAAM,WACNsE,SAAU,SAACuK,EAAGiC,GACVnD,EACImD,EAAazO,KAAI,SAACC,GAAD,OAAOA,EAAEjL,SAItC,KAEV0Z,YAAY,EACZC,YAAY,QACZC,OAAQ,CACJC,EAAG,2BAId1Q,GACG,cAAC,IAAD,CACIhB,QAASsQ,EACT9V,MAAO,CAAEuF,OAAQ,QACjBS,KAAK,UAHT,4BAQD0N,EAAmB7J,QAAUrD,GAC5B,cAAC,KAAWgP,KAAZ,CACIhQ,QAAS,kBAAM4O,KACfpO,KAAK,SACL0P,SAAU9B,EAHd,wBCjUDuD,GA5BI,SAACpa,GAChB,IAAQyJ,EAA8DzJ,EAA9DyJ,MAAOnJ,EAAuDN,EAAvDM,GAAI0B,EAAmDhC,EAAnDgC,QAASyU,EAA0CzW,EAA1CyW,WAAYxK,EAA8BjM,EAA9BiM,WAAYyK,EAAkB1W,EAAlB0W,cAcpD,OAZAlW,qBAAU,WACN2W,GAAgBkD,YAAY/Z,GAAIK,MAAK,SAACC,GAClC8V,EAAc9V,EAAStB,SAG3BmB,IAAeoM,WAAWvM,GAAIK,MAAK,SAACC,GAChCqL,EAAWrL,EAAStB,WAEzB,IAEHgH,IAGImQ,GACAzU,GACI,cAAC,GAAD,CACIyU,WAAYA,EACZC,cAAeA,EACf1U,QAASA,EACTyH,MAAOA,KC6CR6Q,GA/DS,SAACta,GACrB,IAAQM,EAAOC,cAAPD,GAEFiG,EAAWC,cACjB,EAA8BvG,mBAAS,MAAvC,mBAAO+B,EAAP,KAAgBiK,EAAhB,KACA,EAAoChM,mBAAS,MAA7C,mBAAOwW,EAAP,KAAmBC,EAAnB,KAYA,OAXApQ,IAEA9F,qBAAU,WACN2W,GAAgBkD,YAAY/Z,GAAIK,MAAK,SAACC,GAClC8V,EAAc9V,EAAStB,SAG3BmB,IAAeoM,WAAWvM,GAAIK,MAAK,SAACC,GAChCqL,EAAWrL,EAAStB,WAEzB,IAEC,cAACoI,EAAA,EAAD,UACI,eAAC,IAAD,CACIzE,MAAO,CACH2E,OAAQ,OACRC,QAAS,OACT3E,KAAM,EACN4E,WAAY,SALpB,UAQI,cAAC,IAAD,CACIC,OAAQ,kBAAMxB,EAAS,mBAAD,OAAoBjG,KAC1C0H,MAAK,oCAA+B1H,GACpC2C,MAAO,CACHgF,UAAW,wBACXC,SAAU,QACV/E,OAAQ,IACRgF,MAAO,UAIf,cAAC,UAAD,CACIlF,MAAO,CACHC,KAAM,EACNkF,SAAU,OACVC,QAAS,OACTC,WAAY,QACZC,SAAU,SACVJ,MAAO,OACPK,OAAQ,QARhB,SAWI,cAAC,GAAD,CACIiB,OAAK,EACLnJ,GAAIA,EACJ2L,WAAYA,EACZyK,cAAeA,EACf1U,QAASA,EACTyU,WAAYA,Y,UCgNrB8D,I,cArPI,SAACva,GAAW,IAAD,EAClBM,EAAOC,cAAPD,GACFsG,EAAU3F,iBAAO,MAEjBsF,EAAWC,cACjB,EAA8BvG,mBAAS,MAAvC,mBAAO+B,EAAP,KAAgBiK,EAAhB,KACA3F,IAEA9F,qBAAU,WACNC,IAAeoM,WAAWvM,GAAIK,MAAK,SAACC,GAChCqL,EAAWrL,EAAStB,WAEzB,IAEH,IAAM6H,EAAQ,uCAAG,WAAOC,GAAP,eAAAjI,EAAA,sEACUsB,IAAe+Z,SAASla,EAAI8G,GADtC,QACPxG,EADO,QAEAtB,OACTgI,IAAMC,QAAQ,SACd0E,EAAWrL,EAAStB,MAChBsH,EAAQnE,SAASmE,EAAQnE,QAAQ+E,eAL5B,2CAAH,sDAQRiT,EAAU,uCAAG,WAAOC,EAASC,GAAhB,eAAAxb,EAAA,sEACQsB,IAAema,UAAUta,EAAIoa,EAASC,GAD9C,QACT/Z,EADS,QAEFtB,OACTgI,IAAMC,QAAQ,SACd0E,EAAWrL,EAAStB,OAJT,2CAAH,wDAOVub,EAAY,uCAAG,WAAOH,GAAP,eAAAvb,EAAA,sEACMsB,IAAeqa,YAAYxa,EAAIoa,GADrC,QACX9Z,EADW,QAEJtB,OACTgI,IAAMC,QAAQ,WACd0E,EAAWrL,EAAStB,OAJP,2CAAH,sDAQZyb,EAAerM,IAAY,SAACtH,GAC1BR,EAAQnE,SACRmE,EAAQnE,QAAQ2L,eAAhB,2BACOxH,EAAQnE,QAAQ2E,QAChBA,MAGgC,WAArC,OAAPR,QAAO,IAAPA,GAAA,UAAAA,EAASnE,eAAT,eAAkBuY,cAAc,UAEnC,OACI,cAACtT,EAAA,EAAD,UACI,eAAC,IAAD,CACIzE,MAAO,CACH2E,OAAQ,OACRC,QAAS,OACT3E,KAAM,EACN4E,WAAY,SALpB,UAQI,cAAC,IAAD,CACIC,OAAQ,kBAAMxB,EAAS,mBAAD,OAAoBjG,KAC1C0H,MAAK,+BAA0B1H,GAC/B2C,MAAO,CACHgF,UAAW,wBACXC,SAAU,QACV/E,OAAQ,IACRgF,MAAO,UAIf,cAAC,UAAD,CACIlF,MAAO,CACHC,KAAM,EACNkF,SAAU,OACVC,QAAS,OACTC,WAAY,QACZC,SAAU,SACVJ,MAAO,OACPK,OAAQ,QARhB,SAWKxG,GAAWA,EAAQiZ,OAChB,gCACI,cAAC,IAAD,CACI7R,WAAW,WACXiE,KAAK,QACLhE,WAAYrH,EAAQiZ,MACpBzR,WAAY,SAACwL,EAAMqB,GAAP,OACR,eAAC,IAAKxN,KAAN,CAEIa,QAAS,CACL,cAAC,IAAD,CACI2D,KAAK,QAEL5E,QAAS,kBACLgS,EAAWzF,EAAK1U,IAAI,IAJ5B,oBAEQ,MAOR,cAAC,IAAD,CACI+M,KAAK,QAEL5E,QAAS,kBACLgS,EAAWzF,EAAK1U,IAAI,IAJ5B,sBAEQ,QAOR,cAAC,IAAD,CACI0H,MAAM,qCACN4B,UAAW,kBACPiR,EAAa7F,EAAK1U,KAEtBuJ,OAAO,MACPC,WAAW,KANf,SASI,cAAC,IAAD,CAAQuD,KAAK,QAAQtD,QAAM,EAA3B,qBAFI,WAOZ+G,MACkB,UAAdkE,EAAK/L,KACD,wBACI3I,GAAG,YACHwP,MAAM,WACNC,UAAQ,EACRC,QAAQ,OACR,aAAW,KALf,UAOI,wBACIC,IAAK+E,EAAKtQ,IACVuE,KAAK,cAET,oBAAG6G,MAAM,YAAT,sGAMI,mBACII,KAAK,2CACLC,OAAO,SACPC,IAAI,aAHR,wCAUR,qBACIjI,MAAM,OACNlF,MAAO,CACHsF,SAAU,SAEdsL,IAAI,OACJ5D,IAAK+E,EAAKtQ,MAtE1B,UA2EI,cAAC,IAAKmE,KAAKwB,KAAX,CACIC,YAAa0K,EAAK/L,KAClBjB,MAAK,UAAKqO,EAAQ,EAAb,aACDrB,EAAKlM,MAAQ,aAGpBkM,EAAKtQ,MAhFDsQ,EAAK1U,OAoFtB,eAAC,IAAD,CACI6G,SAAUA,EACVlE,MAAO,CACHoF,QAAS,QACTE,SAAU,QACVC,OAAQ,OACR0S,gBAAiB,QAErBlY,IAAK4D,EART,UAUI,cAAC,KAAWyL,MAAZ,CAAkB8I,MAAO,EAAzB,2BAGA,cAAC,IAAKtS,KAAN,CACIC,KAAK,OACLC,MAAO,CAAC,CAAEC,UAAU,IAFxB,SAII,eAAC,KAAD,CAAQE,YAAY,cAApB,UACI,cAAC,KAAOmM,OAAR,CAAexP,MAAM,QAArB,mBAGA,cAAC,KAAOwP,OAAR,CAAexP,MAAM,OAArB,kBAGA,cAAC,KAAOwP,OAAR,CAAexP,MAAM,QAArB,wBAKR,cAAC,IAAKgD,KAAN,CACIC,KAAK,OACLC,MAAO,CAAC,CAAEC,UAAU,IAFxB,SAII,cAAC,IAAD,CAAOE,YAAY,WAEvB,cAAC,IAAKL,KAAN,CACIC,KAAK,MACLC,MAAO,CAAC,CAAEC,UAAU,IAFxB,SAII,cAAC,IAAD,CAAOE,YAAY,MAAMkS,UAAQ,MAErC,cAAC,IAAKvS,KAAN,CAAWC,KAAK,YAAYkI,QAAM,EAAlC,SACI,cAAC,IAAD,CAAO9H,YAAY,gBAEvB,cAAC,IAAKL,KAAN,UACI,cAAC,KAAD,CACIwS,OAAO,kBACPC,SAAS,UACT5K,SAAU,EACVF,cAAeuK,EAJnB,SAMI,cAAC,IAAD,CAAQQ,KAAM,cAACC,GAAA,EAAD,IAAd,iCAMR,cAAC,IAAK3S,KAAN,UACI,cAAC,IAAD,CACII,KAAK,UACLE,SAAS,SACTlG,MAAO,CAAEkF,MAAO,QAHpB,wCCtIrBsT,GA/GU,SAACzb,GACtB,IAAQM,EAAOC,cAAPD,GACR,EAAyC8D,IAAjCE,EAAR,EAAQA,OAAQgB,EAAhB,EAAgBA,WAAYF,EAA5B,EAA4BA,SACtBmB,EAAWC,cACjB,EAA8BvG,mBAAS,MAAvC,mBAAO+B,EAAP,KAAgBiK,EAAhB,KACA,EAAoChM,mBAAS,MAA7C,mBAAOwW,EAAP,KAAmBC,EAAnB,KAEA,EAAoCzW,oBAAS,GAA7C,mBAAOgU,EAAP,KAAmBC,EAAnB,KAwBA,OAtBA1T,qBAAU,WACN2W,GAAgBkD,YAAY/Z,GAAIK,MAAK,SAACC,GAClC8V,EAAc9V,EAAStB,SAG3BmB,IAAeoM,WAAWvM,GAAIK,MAAK,SAACC,GAChCqL,EAAWrL,EAAStB,WAEzB,IAEHkB,qBAAU,WACN,IACK8E,IACA,OAACF,QAAD,IAACA,MAAUqB,QACRnG,EAAGsM,cAAH,OAAkBxH,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAUsB,UAAUkG,YAI1C,OAFAtI,IACAiC,EAAS,UACF,OAEZ,CAACjB,EAAD,OAAaF,QAAb,IAAaA,OAAb,EAAaA,EAAUqB,MAAvB,OAA8BrB,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAUsB,YAGvC,eAACgB,EAAA,EAAD,CAAWC,SAAU8O,IAAezU,EAApC,UACI,eAAC,IAAD,CACIiB,MAAO,CACH2E,OAAQ,OACRC,QAAS,OACT3E,KAAM,EACN4E,WAAY,SALpB,UAQI,cAAC,IAAD,CACIC,OAAQ,kBAAMmM,GAAc,IAC5BG,SAAU,cAACC,GAAA,EAAD,IACVtM,MAAO,cACP/E,MAAO,CACHgF,UAAW,wBACXC,SAAU,QACV/E,OAAQ,IACRgF,MAAO,UAIf,cAAC,UAAD,CACIlF,MAAO,CACHC,KAAM,EACNkF,SAAU,OACVC,QAAS,OACTC,WAAY,QACZC,SAAU,SACVJ,MAAO,OACPK,OAAQ,QARhB,SAWI,cAAC,GAAD,CACIlI,GAAIA,EACJ2L,WAAYA,EACZyK,cAAeA,EACf1U,QAASA,EACTyU,WAAYA,SAIxB,cAAC,KAAD,CACIzO,MAAM,OACN6M,UAAU,OACVC,QAAS,kBAAMZ,GAAc,IAC7BxL,QAASuL,EAJb,SAMI,eAAC,IAAD,CACIc,KAAK,SACL9R,MAAO,CAAEkF,MAAO,QAChBM,QAAS,YAAmB,EAAhBuM,KAAiB,IAAXC,EAAU,EAAVA,IAEd,OADAf,GAAc,GACNe,GACJ,IAAK,SACD3Q,IACA,MACJ,IAAK,QACDiC,EAAS,MAAD,OAAOvE,EAAQ0C,MACvB,MACJ,IAAK,YACD6B,EAAS,YAAD,OAAavE,EAAQ1B,GAArB,eACR,MACJ,QACI,SAGZ4U,UAAU,aACVC,aAAc,CAAC,cApBnB,UAsBI,cAAC,IAAKtM,KAAN,wBAAe,cACf,cAAC,IAAKA,KAAN,uBAAe,aACf,cAAC,IAAKA,KAAN,2BAAe,SACf,cAAC,IAAKA,KAAN,oBAAe,mB,mBCnG7B6S,GAAOC,gBAAK,kBAAM,+DAClBC,GAAUD,gBAAK,kBAAM,wDAErBE,GAAgBF,gBAAK,kBAAM,kCAmFlBG,OAhFf,WACI,OACI,cAAC,KAAD,CAAelX,QAASA,EAAxB,SACI,cAAC,WAAD,CACImX,SAAU,cAACrU,EAAA,EAAD,IADd,SAGI,qCACI,cAAC,IAAD,CAASQ,SAAS,cAClB,eAAC,IAAD,WACI,cAAC,IAAD,CAAO8T,OAAK,EAACC,KAAM,IAAKC,QAAS,cAACR,GAAD,MACjC,cAAC,IAAD,CAAOO,KAAK,SAASC,QAAS,cAAC,GAAD,MAC9B,cAAC,IAAD,CACIF,OAAK,EACLC,KAAK,SACLC,QAAS,cAAC,GAAD,MAEb,cAAC,IAAD,CACIF,OAAK,EACLC,KAAK,sBACLC,QAAS,cAAC,GAAD,MAEb,cAAC,IAAD,CACIF,OAAK,EACLC,KAAK,yBACLC,QAAS,cAAC,GAAD,MAEb,cAAC,IAAD,CACIF,OAAK,EACLC,KAAK,iCACLC,QAAS,cAAC,GAAD,MAEb,cAAC,IAAD,CACIF,OAAK,EACLC,KAAK,4BACLC,QAAS,cAAC,GAAD,MAEb,cAAC,IAAD,CACIF,OAAK,EACLC,KAAK,iBACLC,QAAS,cAAC,GAAD,MAEb,cAAC,IAAD,CACIF,OAAK,EACLC,KAAK,gBACLC,QAAS,cAAC,EAAD,MAGb,cAAC,IAAD,CACID,KAAK,kBACLC,QAAS,cAACL,GAAD,MAEb,cAAC,IAAD,CACIG,OAAK,EACLC,KAAK,SACLC,QAAS,cAACN,GAAD,MAEb,cAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,MAAMC,QAAS,cAACnc,GAAA,EAAD,MACjC,cAAC,IAAD,CACIic,OAAK,EACLC,KAAK,eACLC,QAAS,cAAC,GAAD,MAGb,cAAC,IAAD,CACIF,OAAK,EACLC,KAAK,yBACLC,QAAS,cAAC,EAAD,MAGb,cAAC,IAAD,CACID,KAAK,IACLC,QAAS,8DClFtBC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqB1b,MAAK,YAAkD,IAA/C2b,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCEdO,IAAS9E,OACL,cAAC,IAAD,UACI,cAAC,EAAD,UACI,cAAC,GAAD,QAGRsB,SAASyD,eAAe,SAM5BT,M,4DCnBMU,E,0FACF,SAAWvc,GACP,OAAOlB,IAAIQ,IAAJ,mBAAoBU,EAAK,IAAMA,EAAK,O,6BAG/C,SAAgBA,GACZ,OAAOlB,IAAIQ,IAAJ,wBAAyBU,M,gCAGpC,WACI,OAAOlB,IAAIQ,IAAJ,gC,yBAEX,SAAYU,EAAIhB,GACZ,OAAOF,IAAIU,IAAJ,oBAAqBQ,GAAMhB,K,2BAEtC,SAAcA,GACV,OAAOF,IAAIC,KAAJ,YAAsBC,K,2BAEjC,SAAcgB,GACV,OAAOlB,IAAIiH,OAAJ,oBAAwB/F,M,sBAGnC,SAASA,EAAIhB,GACT,OAAOF,IAAIC,KAAJ,oBAAsBiB,EAAtB,UAAkChB,K,yBAE7C,SAAYgB,EAAIoa,GACZ,OAAOtb,IAAIiH,OAAJ,oBAAwB/F,EAAxB,kBAAoCoa,M,uBAE/C,SAAUpa,EAAIoa,EAASC,GACnB,OAAOvb,IAAIU,IAAJ,oBAAqBQ,EAArB,kBAAiCoa,GAAW,KAAM,CACrDjM,OAAQ,CAAEkM,KAAMA,EAAO,OAAS,e,KAK7B,QAAIkC,G,gCCrCnB,yBA0BenV,IAvBA,SAAC,GAA0D,IAAxDvD,EAAuD,EAAvDA,SAAU6D,EAA6C,EAA7CA,MAAOL,EAAsC,EAAtCA,QAAS2C,EAA6B,EAA7BA,YAAawS,EAAgB,EAAhBA,UACrD,OACI,qCACI,eAAC,IAAD,WACI,kCAAQ9U,GAAS,OAAjB,kBACA,sBACIc,KAAK,cACLiU,QACIzS,GACA,mFAKX3C,EAAU,KACP,qBAAK1E,MAAO,CAAEC,KAAM,EAAG2E,QAASiV,EAAY,OAAS,SAArD,SACK3Y,U","file":"static/js/main.4775b42f.chunk.js","sourcesContent":["import API from \"api/axios.config\";\r\n\r\nclass AuthService {\r\n    async login(email, password) {\r\n        const { data } = await API.post(\"/auth/login\", {\r\n            email,\r\n            password,\r\n        });\r\n        return data;\r\n    }\r\n\r\n    async googleLogin(token) {\r\n        const { data } = await API.post(\"/auth/google\", {\r\n            token,\r\n        });\r\n        return data;\r\n    }\r\n\r\n    logout() {\r\n        localStorage.removeItem(\"user\");\r\n        localStorage.removeItem(\"token\");\r\n        localStorage.removeItem(\"expiresAt\");\r\n    }\r\n\r\n    forgotPassword(email) {\r\n        return API.post(\"/auth/forgot-password\", {\r\n            email,\r\n        });\r\n    }\r\n\r\n    checkToken(token, email) {\r\n        return API.post(\"auth/check-token\", {\r\n            token,\r\n            email,\r\n        });\r\n    }\r\n\r\n    resetPassword(token, email, password, password2) {\r\n        return API.post(\"auth/reset-password\", {\r\n            token,\r\n            email,\r\n            password,\r\n            password2,\r\n        });\r\n    }\r\n\r\n    register(username, email, password) {\r\n        return API.post(\"auth/signup\", {\r\n            username,\r\n            email,\r\n            password,\r\n        });\r\n    }\r\n\r\n    getCurrentUser() {\r\n        return API.get(\"/users/profile\");\r\n    }\r\n}\r\n\r\nexport default new AuthService();\r\n","import API from \"api/axios.config\";\r\n\r\nclass ConstantService {\r\n    getConstant() {\r\n        return API.get(`/constant`);\r\n    }\r\n    saveConstant(data) {\r\n        return API.put(`/constant`, data);\r\n    }\r\n}\r\n\r\nexport default new ConstantService();\r\n","import React, { useEffect, useRef, useState } from \"react\";\nimport projectService from \"services/project.service\";\nimport { useParams } from \"react-router-dom\";\nimport constantService from \"services/constant.service\";\nimport { WebRTCClient } from \"@arcware/webrtc-plugin\";\nimport { Slider } from \"antd\";\n\nconst descriptors = {\n    color: {\n        black: {\n            Change_Attribute_Event: true,\n            Attribute_Key: \"Color\",\n            Attribute_Value: \"Black\",\n        },\n        white: {\n            Change_Attribute_Event: true,\n            Attribute_Key: \"Color\",\n            Attribute_Value: \"White\",\n        },\n        yellow: {\n            Change_Attribute_Event: true,\n            Attribute_Key: \"Color\",\n            Attribute_Value: \"Metro_Exodus\",\n        },\n    },\n};\n\nfunction AppUI(props) {\n    const { emitUIInteraction } = props;\n\n    return (\n        <Slider\n            style={{\n                position: \"absolute\",\n                marginLeft: \"auto\",\n                marginRight: \"auto\",\n                left: 0,\n                right: 0,\n                textAlign: \"center\",\n                zIndex: 1,\n            }}\n            defaultValue={30}\n            onChange={(value) => emitUIInteraction({ time: value })}\n        />\n    );\n}\n\nfunction Responses(props) {\n    const { responses } = props;\n\n    return (\n        <div className=\"responses-block\">\n            <h4>Response log from UE app:</h4>\n            <div className=\"responses-list\">\n                {responses.map((v) => (\n                    <p>{v}</p>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nconst ProjectA = (props) => {\n    const [projectData, setProjectData] = useState(null);\n    const [constant, setConstant] = useState({});\n\n    const { featured, setVideoInitialized } = props;\n\n    const { id } = useParams();\n\n    useEffect(() => {\n        setProjectData(null);\n        if (featured)\n            projectService.getFeaturedProject().then((response) => {\n                setProjectData(response.data);\n            });\n        else\n            projectService.getProjectByUrl(id).then((response) => {\n                setProjectData(response.data);\n            });\n\n        constantService.getConstant().then((response) => {\n            if (response.data) setConstant(response.data);\n        });\n    }, [id, featured]);\n\n    const sizeContainerRef = useRef(null);\n    const containerRef = useRef(null);\n    const videoRef = useRef(null);\n    const [webrtcClient, setWebrtcClient] = useState();\n    const [responses, setResponses] = useState([]);\n    let webrtcClientInit = false;\n\n    const responseCallback = (message) => {\n        setResponses([message, ...responses]);\n    };\n\n    const videoInitialized = () => {\n        if (webrtcClient) {\n            webrtcClient.emitUIInteraction({ time: 30 });\n        }\n        setVideoInitialized(true)\n    };\n\n    useEffect(() => {\n        const args = {\n            address:\n                props.project.arcwareAddress ||\n                \"wss://signalling-client.ragnarok.arcware.cloud/\",\n            packageId:\n                props.project.arcwarePackageId ||\n                \"ff41fd0c-cac9-4e4c-abe5-3ada402f57cc\",\n            settings: {},\n            autoplay: { video: true, audio: true },\n            sizeContainer: sizeContainerRef.current,\n            container: containerRef.current,\n            videoRef: videoRef.current,\n            playOverlay: false,\n            loader: () => {},\n            applicationResponse: responseCallback,\n            videoInitializeCallback: videoInitialized,\n        };\n\n        // double load protection\n        if (!webrtcClientInit) {\n            webrtcClientInit = true;\n            setWebrtcClient(new WebRTCClient(args));\n        }\n    }, []);\n\n    return (\n        <>\n            <div ref={sizeContainerRef} style={{ flex: 1 }}>\n                <div ref={containerRef} style={{ zIndex: 1 }}>\n                    <video ref={videoRef} />\n                    {/* <Responses responses={responses} /> */}\n                </div>\n            </div>\n            {/* {webrtcClient != null && (\n                <AppUI emitUIInteraction={webrtcClient.emitUIInteraction} />\n            )} */}\n        </>\n    );\n};\n\nexport default ProjectA;\n","import axios from \"axios\";\r\n\r\nconst baseURL =\r\n    process.env.NODE_ENV === \"production\"\r\n        ? \"https://tour.immersiv.com.au/api\"\r\n        : \"http://localhost:5000/api\";\r\n\r\nconst API = axios.create({\r\n    baseURL,\r\n    withCredentials: true,\r\n});\r\n\r\nAPI.interceptors.request.use(\r\n    function (req) {\r\n        const token = localStorage.getItem(\"token\");\r\n        if (token) req.headers[\"auth-token\"] = token;\r\n        return req;\r\n    },\r\n    function (error) {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default API;\r\n","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();\n","import { useEffect } from \"react\";\nimport API from \"api/axios.config\";\nimport { useUser } from \"context/UserContext\";\nimport history from \"helpers/history\";\n\nconst WithAxios = ({ children }) => {\n    const { isInitiated, logout } = useUser();\n\n    useEffect(() => {\n        API.interceptors.response.use(\n            (response) => response,\n            async (error) => {\n                const originalRequest = error.config;\n                if (\n                    error.response.status === 401 &&\n                    originalRequest.url === \"/auth/refresh-token\"\n                ) {\n                    return new Promise((resolve, reject) => {\n                        logout();\n                        history.push(\"/login\");\n                        reject(error);\n                    });\n                }\n\n                if (error.response.status === 401 && !originalRequest._retry) {\n                    try {\n                        originalRequest._retry = true;\n                        const res = await API.post(\"/auth/refresh-token\");\n                        localStorage.setItem(\"token\", res.data.token);\n                        return API(originalRequest);\n                    } catch (error) {\n                        logout();\n                        history.push(\"/login\");\n                    }\n                }\n                return Promise.reject(error);\n            }\n        );\n    }, []);\n\n    return isInitiated ? children : null;\n};\n\nexport default WithAxios;\n","import WithAxios from \"helpers/WithAxios\";\r\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport authService from \"services/auth.service\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nconst UserContext = createContext();\r\n\r\nconst UserProvider = ({ children }) => {\r\n    const [authData, setAuthData] = useState({\r\n        token: \"\",\r\n    });\r\n\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    const [isInitiated, setIsInitiated] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem(\"token\")) {\r\n            setIsLoggedIn(true);\r\n            setAuthData(() => getTokenData(localStorage.getItem(\"token\")));\r\n        }\r\n        setIsInitiated(true);\r\n    }, []);\r\n\r\n    const getTokenData = (token) => {\r\n        if (token) {\r\n            const decoded = jwt_decode(token);\r\n            return {\r\n                ...decoded,\r\n                token,\r\n            };\r\n        } else\r\n            return {\r\n                token: \"\",\r\n            };\r\n    };\r\n\r\n    const setUserInfo = (data) => {\r\n        const { token } = data;\r\n\r\n        setIsLoggedIn(true);\r\n\r\n        setAuthData(() => getTokenData(token));\r\n        localStorage.setItem(\"token\", token);\r\n    };\r\n\r\n    const logout = () => {\r\n        setAuthData(null);\r\n        setIsLoggedIn(false);\r\n\r\n        authService.logout();\r\n    };\r\n\r\n    return (\r\n        <UserContext.Provider\r\n            value={{\r\n                setUserState: (data) => setUserInfo(data),\r\n                logout,\r\n                isInitiated,\r\n                isLoggedIn,\r\n                setIsLoggedIn,\r\n                authData,\r\n                setAuthData,\r\n            }}\r\n        >\r\n            <WithAxios>{children}</WithAxios>\r\n        </UserContext.Provider>\r\n    );\r\n};\r\n\r\nconst useUser = () => {\r\n    const context = useContext(UserContext);\r\n\r\n    if (context === undefined) {\r\n        throw new Error(\"useUser must be used within UserProvider\");\r\n    }\r\n    return context;\r\n};\r\n\r\nexport { UserProvider, useUser };\r\n","import API from \"api/axios.config\";\r\n\r\nclass AdminService {\r\n    getAdmin() {\r\n        return API.get(`/admins`);\r\n    }\r\n\r\n    createAdmin(data) {\r\n        return API.post(`/admins`, data);\r\n    }\r\n\r\n    deleteAdmin(id) {\r\n        return API.delete(`/admins/${id}`);\r\n    }\r\n}\r\n\r\nexport default new AdminService();\r\n","import { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useUser } from \"context/UserContext\";\n\nconst useLoginCheck = () => {\n    const navigate = useNavigate();\n    const { isLoggedIn, authData, logout, isInitiated } = useUser();\n    useEffect(() => {\n        if (isInitiated) {\n            if (!isLoggedIn) {\n                logout();\n                navigate(\"/login\");\n                return null;\n            }\n\n            if (!authData?.super) {\n                if (authData?.projectId) {\n                    navigate(`/p-admin/${authData.projectId}`);\n                    return null;\n                } else {\n                    logout();\n                    navigate(\"/login\");\n                    return null;\n                }\n            }\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId, isInitiated]);\n};\n\nexport default useLoginCheck;\n","import LayoutHOC from \"layout/Layout\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport {\r\n    Button,\r\n    Dropdown,\r\n    Form,\r\n    Input,\r\n    Layout,\r\n    List,\r\n    Menu,\r\n    Modal,\r\n    PageHeader,\r\n    Popconfirm,\r\n} from \"antd\";\r\nimport { Content } from \"antd/lib/layout/layout\";\r\nimport { MoreOutlined } from \"@ant-design/icons\";\r\nimport { useUser } from \"context/UserContext\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport toast from \"react-hot-toast\";\r\nimport adminService from \"services/admin.service\";\r\nimport useLoginCheck from \"hooks/useLoginCheck\";\r\n\r\nconst Admins = (props) => {\r\n    const formRef = useRef(null);\r\n    const [admins, setAdmins] = useState(null);\r\n    const [editModalOpen, setEditModalOpen] = useState(null);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        adminService.getAdmin().then((response) => {\r\n            setAdmins(response.data);\r\n        });\r\n    }, []);\r\n\r\n    useLoginCheck();\r\n\r\n    const onFinish = async (values) => {\r\n        const response = await adminService.createAdmin(values);\r\n        if (response.data) {\r\n            toast.success(\"Saved\");\r\n            setAdmins(response.data);\r\n            setEditModalOpen(null);\r\n            if (formRef.current) formRef.current.resetFields();\r\n        }\r\n    };\r\n\r\n    const deleteAdmin = async (id) => {\r\n        const response = await adminService.deleteAdmin(id);\r\n        if (response.data) setAdmins(response.data);\r\n    };\r\n\r\n    return (\r\n        <LayoutHOC loading={!admins}>\r\n            <Layout\r\n                style={{\r\n                    height: \"100%\",\r\n                    display: \"flex\",\r\n                    flex: 1,\r\n                    background: \"white\",\r\n                }}\r\n            >\r\n                <PageHeader\r\n                    onBack={() => navigate(`/admin`)}\r\n                    title={`Admins`}\r\n                    style={{\r\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\r\n                        position: \"fixed\",\r\n                        zIndex: 100,\r\n                        width: \"100%\",\r\n                    }}\r\n                />\r\n\r\n                <Content\r\n                    style={{\r\n                        flex: 1,\r\n                        overflow: \"auto\",\r\n                        padding: \"16px\",\r\n                        paddingTop: \"100px\",\r\n                        maxWidth: \"800px\",\r\n                        width: \"100%\",\r\n                        margin: \"auto\",\r\n                    }}\r\n                >\r\n                    <Button\r\n                        onClick={() => setEditModalOpen({})}\r\n                        style={{ margin: \"16px\" }}\r\n                    >\r\n                        Add admin\r\n                    </Button>\r\n                    <Modal\r\n                        visible={!!editModalOpen}\r\n                        onCancel={() => setEditModalOpen(null)}\r\n                        footer={null}\r\n                    >\r\n                        <Form\r\n                            onFinish={onFinish}\r\n                            style={{\r\n                                padding: \" 16px\",\r\n                                maxWidth: \"500px\",\r\n                                margin: \"auto\",\r\n                            }}\r\n                            ref={formRef}\r\n                        >\r\n                            <Form.Item\r\n                                name=\"email\"\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: \"Please add name!\",\r\n                                        type: \"email\",\r\n                                    },\r\n                                ]}\r\n                            >\r\n                                <Input placeholder=\"Email\" />\r\n                            </Form.Item>\r\n\r\n                            <Form.Item>\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    htmlType=\"submit\"\r\n                                    style={{ width: \"100%\" }}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Modal>\r\n                    {admins && (\r\n                        <List\r\n                            itemLayout=\"horizontal\"\r\n                            dataSource={admins.sort((a, b) =>\r\n                                a.name > b.name ? 1 : -1\r\n                            )}\r\n                            renderItem={(admin) => (\r\n                                <List.Item\r\n                                    actions={[\r\n                                        <Dropdown\r\n                                            overlay={\r\n                                                <Menu>\r\n                                                    <Popconfirm\r\n                                                        title=\"Are you sure to delete this admin?\"\r\n                                                        onConfirm={() =>\r\n                                                            deleteAdmin(\r\n                                                                admin.email\r\n                                                            )\r\n                                                        }\r\n                                                        okText=\"Yes\"\r\n                                                        cancelText=\"No\"\r\n                                                    >\r\n                                                        <Menu.Item\r\n                                                            key=\"3\"\r\n                                                            danger\r\n                                                        >\r\n                                                            Delete\r\n                                                        </Menu.Item>\r\n                                                    </Popconfirm>\r\n                                                </Menu>\r\n                                            }\r\n                                            trigger={[\"click\"]}\r\n                                        >\r\n                                            <MoreOutlined\r\n                                                style={{ fontSize: \"30px\" }}\r\n                                            />\r\n                                        </Dropdown>,\r\n                                    ]}\r\n                                    style={{\r\n                                        borderBottom: \"3px solid #ccc\",\r\n                                        paddingLeft: \"16px\",\r\n                                    }}\r\n                                >\r\n                                    <List.Item.Meta\r\n                                        title={admin.email}\r\n                                        description={\r\n                                            admin.locked\r\n                                                ? \"Locked\"\r\n                                                : \"Not locked\"\r\n                                        }\r\n                                    />\r\n                                </List.Item>\r\n                            )}\r\n                        />\r\n                    )}\r\n                </Content>\r\n            </Layout>\r\n        </LayoutHOC>\r\n    );\r\n};\r\n\r\nexport default Admins;\r\n","import API from \"api/axios.config\";\r\n\r\nclass GAService {\r\n    getGA(projectId, metrics, dimensions, period) {\r\n        return API.post(`/ga/${projectId}`, {\r\n            metrics,\r\n            dimensions,\r\n            start: period[0],\r\n            finish: period[1],\r\n        });\r\n    }\r\n\r\n    getAccessToken() {\r\n        return API.get(`/ga/access-token`);\r\n    }\r\n}\r\n\r\nexport default new GAService();\r\n","import React from \"react\";\n\nimport { Chart } from \"react-google-charts\";\nimport moment from \"moment\";\nimport humanizeString from \"string-humanize\";\n\nexport const ChartItem = (props) => {\n    const {\n        data,\n        title,\n        column,\n        seconds,\n        type = \"LineChart\",\n        isDate = true,\n    } = props;\n\n    const dataRefined = data\n        ? [\n              [\n                  humanizeString(data.columnHeaders[0].name.replace(\"ga:\", \"\")),\n                  humanizeString(\n                      data.columnHeaders[column].name.replace(\"ga:\", \"\")\n                  ),\n              ],\n              ...data.rows\n                  .map((i) => [\n                      isDate ? moment(i[0], \"YYYYMMDD\").format(\"D MMM\") : i[0],\n                      parseInt(i[column]) / (seconds ? 60 : 1),\n                  ])\n                  .sort((a, b) => (isDate ? 0 : b[1] - a[1])),\n          ]\n        : [];\n    return (\n        <div style={{ maxWidth: \"400px\", margin: \"20px\", width: \"100%\" }}>\n            <Chart\n                chartType={type}\n                width=\"100%\"\n                height=\"400px\"\n                data={dataRefined}\n                options={{\n                    title,\n                    legend: {\n                        position: \"none\",\n                    },\n                    chartArea: { width: \"85%\", height: \"80%\" },\n                    allowHtml: true,\n                    width: \"100%\",\n                }}\n            />\n        </div>\n    );\n};\n\nexport default ChartItem;\n","import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { DatePicker, Layout, PageHeader } from \"antd\";\n\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useNavigate, useParams } from \"react-router-dom\";\n\nimport projectService from \"services/project.service\";\nimport moment from \"moment\";\nimport gaService from \"services/ga.service\";\nimport toast from \"react-hot-toast\";\nimport { ChartItem } from \"components/DashboardItem/DataItems\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\nimport { useUser } from \"context/UserContext\";\n\nconst AnalyticClient = (props) => {\n    const { id } = useParams();\n\n    const [project, setProject] = useState(null);\n    const [dateData, setDateData] = useState(null);\n    const [cityData, setCityData] = useState(null);\n    const [deviceData, setDeviceData] = useState(null);\n    const [sourceData, setSourceData] = useState(null);\n    const [period, setPeriod] = useState([\n        moment().subtract(7, \"day\").format(),\n        moment().format(),\n    ]);\n    const navigate = useNavigate();\n    const { logout, isLoggedIn, authData } = useUser();\n\n    useEffect(() => {\n        if (\n            !isLoggedIn ||\n            (!authData?.super &&\n                id.toString() !== authData?.projectId.toString())\n        ) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    useEffect(() => {\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n\n    useEffect(() => {\n        if (period.length === 2 && project?.id) {\n            setDateData(null);\n            setCityData(null);\n            setDeviceData(null);\n            setSourceData(null);\n            getMetricData();\n        }\n    }, [period[0], period[1], project?.id]);\n\n    const getMetricData = () => {\n        gaService\n            .getGA(\n                project.id,\n                \"ga:users,ga:newUsers,ga:pageviews,ga:sessions,ga:sessionDuration\",\n                \"ga:date\",\n                period\n            )\n            .then((res) => {\n                setDateData(res.data.data);\n            })\n            .catch((err) => {\n                toast.error(\"Users analytics data not loaded\");\n            });\n\n        gaService\n            .getGA(project.id, \"ga:users\", \"ga:city\", period)\n            .then((res) => {\n                setCityData(res.data.data);\n            })\n            .catch((err) => {\n                toast.error(\"Location analytics data not loaded\");\n            });\n\n        gaService\n            .getGA(project.id, \"ga:users\", \"ga:deviceCategory\", period)\n            .then((res) => {\n                setDeviceData(res.data.data);\n            })\n            .catch((err) => {\n                toast.error(\"Device analytics data not loaded\");\n            });\n\n        gaService\n            .getGA(project.id, \"ga:users\", \"ga:source\", period)\n            .then((res) => {\n                setSourceData(res.data.data);\n            })\n            .catch((err) => {\n                toast.error(\"Source analytics data not loaded\");\n            });\n    };\n\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(`/p-admin/${id}`)}\n                    title={\n                        <>\n                            Analytics\n                            <br />\n                            <DatePicker.RangePicker\n                                size=\"large\"\n                                defaultValue={[\n                                    moment().subtract(7, \"day\"),\n                                    moment(),\n                                ]}\n                                onChange={(m) =>\n                                    setPeriod([m[0].format(), m[1].format()])\n                                }\n                                allowClear={false}\n                            />\n                        </>\n                    }\n                    style={{ borderBottom: \"1px #ccc solid\" }}\n                />\n                {project && (\n                    <Content\n                        style={{\n                            flex: 1,\n                            overflow: \"auto\",\n                            paddingTop: \"100px\",\n                            padding: \"16px\",\n\n                            width: \"100%\",\n                            margin: \"auto\",\n                        }}\n                    >\n                        <div\n                            style={{\n                                textAlign: \"center\",\n                                display: \"flex\",\n                                flexDirection: \"row\",\n                                flexWrap: \"wrap\",\n                                alignItems: \"center\",\n                                justifyContent: \"center\",\n                            }}\n                        >\n                            <ChartItem\n                                data={dateData}\n                                title=\"Users\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={1}\n                            />\n                            <ChartItem\n                                data={dateData}\n                                title=\"New users\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={2}\n                            />\n                            <ChartItem\n                                data={dateData}\n                                title=\"Page views\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={3}\n                            />\n                            <ChartItem\n                                data={dateData}\n                                title=\"Sessions\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={4}\n                            />\n                            <ChartItem\n                                data={dateData}\n                                title=\"Session duration (minutes)\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                column={5}\n                                seconds\n                            />\n                            <ChartItem\n                                data={deviceData}\n                                title=\"Device type\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                type=\"PieChart\"\n                                column={1}\n                                seconds\n                                isDate={false}\n                            />\n                            <ChartItem\n                                data={sourceData}\n                                title=\"Source\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                type=\"BarChart\"\n                                column={1}\n                                isDate={false}\n                            />\n                            <ChartItem\n                                data={cityData}\n                                title=\"Source\"\n                                xKey=\"start\"\n                                valKey=\"value\"\n                                type=\"Table\"\n                                column={1}\n                                isDate={false}\n                            />\n                        </div>\n                    </Content>\n                )}\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default AnalyticClient;\n","import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\nimport { Button, Layout, PageHeader, Form, Input } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useNavigate } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport constantService from \"services/constant.service\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\n\nconst Constants = (props) => {\n    const [constants, setConstants] = useState(null);\n    const formRef = useRef(null);\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        constantService\n            .getConstant()\n            .then((response) => {\n                if (response.data) {\n                    setConstants(response.data);\n                    formRef.current &&\n                        formRef.current.setFieldsValue(response.data);\n                } else setConstants({});\n            })\n            .catch(() => {\n                setConstants({});\n            });\n    }, []);\n\n    useLoginCheck();\n    const onFinish = async (values) => {\n        const response = await constantService.saveConstant(values);\n        if (response.data) {\n            setConstants(response.data);\n            toast.success(\"Saved\");\n        }\n    };\n\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(\"/admin\")}\n                    title=\"Constants\"\n                    style={{\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\n                        position: \"fixed\",\n                        zIndex: 100,\n                        width: \"100%\",\n                    }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        paddingTop: \"100px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Form\n                        ref={formRef}\n                        name=\"normal_login\"\n                        onFinish={onFinish}\n                        style={{\n                            padding: \" 16px\",\n                            maxWidth: \"500px\",\n                            margin: \"auto\",\n                        }}\n                        initialValues={constants}\n                    >\n                        <Form.Item name=\"email\">\n                            <Input placeholder=\"Email\" />\n                        </Form.Item>\n\n                        <Form.Item name=\"phone\">\n                            <Input placeholder=\"Phone\" />\n                        </Form.Item>\n\n                        <Form.Item name=\"call\">\n                            <Input placeholder=\"Phone in international format\" />\n                        </Form.Item>\n\n                        <Form.Item>\n                            <Button\n                                type=\"primary\"\n                                htmlType=\"submit\"\n                                style={{ width: \"100%\" }}\n                            >\n                                Save\n                            </Button>\n                        </Form.Item>\n                        <Form.Item>\n                            <Button\n                                onClick={() => {\n                                    if (formRef.current)\n                                        formRef.current.resetFields();\n                                }}\n                                style={{ width: \"100%\" }}\n                            >\n                                Reset\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default Constants;\n","import API from \"api/axios.config\";\r\n\r\nclass ProjectService {\r\n    signUrl(isVideo, isLogo) {\r\n        return API.get(\"/utils/sign-s3\", {\r\n            params: { isVideo: !!isVideo, isLogo: !!isLogo },\r\n        });\r\n    }\r\n}\r\n\r\nexport default new ProjectService();\r\n","import axios from \"axios\";\nimport toast from \"react-hot-toast\";\nimport utilsService from \"services/utils.service\";\n\nconst uploadMedia =\n    (cb, isVideo, isLogo) =>\n    async ({\n        action,\n        data,\n        file,\n        filename,\n        headers,\n        onError,\n        onProgress,\n        onSuccess,\n        withCredentials,\n    }) => {\n        try {\n            const res = await utilsService.signUrl(isVideo, isLogo);\n\n            axios\n                .put(res.data.signedRequest, file, {})\n                .then((s3res) => {\n                    cb({ url: res.data.url, thumbnail: res.data.thumbnail });\n                    onSuccess(res.data.thumbnail);\n                })\n                .catch((err) => {\n                    console.log(err.message);\n                    onError();\n                });\n        } catch (error) {\n            onError();\n            toast.error(error.message);\n        }\n    };\n\nexport default uploadMedia;\n","import { LoadingOutlined } from \"@ant-design/icons\";\nimport { Button, Checkbox, Form, Image, Input, Switch, Upload } from \"antd\";\nimport TextArea from \"antd/lib/input/TextArea\";\nimport uploadMedia from \"helpers/uploadMedia\";\nimport React, { useEffect, useState } from \"react\";\n\nconst Logo = (props) => {\n    const customUploadClientLogo = uploadMedia(\n        (values) => {\n            props.setFieldsValue({ [props.id]: values.url });\n        },\n        props.isVideo,\n        true\n    );\n    const [image, setImage] = useState(\"\");\n    useEffect(() => {\n        setTimeout(() => setImage(props[props.id]), 5000);\n    }, [props[props.id]]);\n    return (\n        <>\n            {image === props[props.id] ? (\n                props.isVideo ? (\n                    <video\n                        id=\"my-player\"\n                        class=\"video-js\"\n                        controls\n                        preload=\"auto\"\n                        data-setup=\"{}\"\n                    >\n                        <source src={image} type=\"video/mp4\"></source>\n                        <p class=\"vjs-no-js\">\n                            To view this video please enable JavaScript, and\n                            consider upgrading to a web browser that\n                            <a\n                                href=\"https://videojs.com/html5-video-support/\"\n                                target=\"_blank\"\n                                rel=\"noreferrer\"\n                            >\n                                supports HTML5 video\n                            </a>\n                        </p>\n                    </video>\n                ) : (\n                    <Image src={image} style={{ maxHeight: \"50px\" }} />\n                )\n            ) : (\n                <LoadingOutlined />\n            )}\n            <div style={{ marginTop: \"10px\" }}>\n                <Upload\n                    customRequest={customUploadClientLogo}\n                    showUploadList={false}\n                    maxCount={1}\n                    getValueFromEvent={() => {}}\n                >\n                    <Button>Change</Button>\n                </Upload>\n            </div>\n        </>\n    );\n};\n\nconst ProjectFormFields = ({ setFieldsValue }) => {\n    return (\n        <>\n            <Form.Item\n                name=\"name\"\n                label=\"Name\"\n                rules={[\n                    {\n                        required: true,\n                        message: \"Please set name!\",\n                    },\n                ]}\n            >\n                <Input placeholder=\"Name\" />\n            </Form.Item>\n\n            <Form.Item\n                name=\"url\"\n                label=\"Url\"\n                rules={[\n                    {\n                        required: true,\n                        message: \"Please add url!\",\n                    },\n                ]}\n                extra=\"This is only what should appear at the end of url, for example 'best-hotel', 'sky_mall'... Do not put https://tour.immersiv.com.au/ here!\"\n            >\n                <Input placeholder=\"Url\" />\n            </Form.Item>\n\n            <Form.Item\n                label=\"Arcware project\"\n                name=\"isArcware\"\n                valuePropName=\"checked\"\n            >\n                <Checkbox />\n            </Form.Item>\n\n            <Form.Item name=\"arcwareAddress\" label=\"Arcware address\">\n                <Input placeholder=\"Arcware address\" />\n            </Form.Item>\n\n            <Form.Item name=\"arcwarePackageId\" label=\"Arcware project id\">\n                <Input placeholder=\"Arcware project id\" />\n            </Form.Item>\n\n            <Form.Item name=\"projectId\" label=\"Project id\" hidden>\n                <Input placeholder=\"Project id\" />\n            </Form.Item>\n\n            <Form.Item name=\"modelId\" label=\"Model id\" hidden>\n                <Input placeholder=\"Model id\" />\n            </Form.Item>\n\n            <Form.Item\n                label=\"Custom background\"\n                name=\"backgroundOn\"\n                valuePropName=\"checked\"\n            >\n                <Checkbox />\n            </Form.Item>\n            <Form.Item\n                label=\"Background video\"\n                name=\"backgroundTypeVideo\"\n                valuePropName=\"checked\"\n            >\n                <Checkbox />\n            </Form.Item>\n            <Form.Item\n                label=\"Background video\"\n                valuePropName=\"backgroundVideo\"\n                name=\"backgroundVideo\"\n            >\n                <Logo setFieldsValue={setFieldsValue} isVideo />\n            </Form.Item>\n            <Form.Item\n                label=\"Background image\"\n                valuePropName=\"backgroundImage\"\n                name=\"backgroundImage\"\n            >\n                <Logo setFieldsValue={setFieldsValue} />\n            </Form.Item>\n\n            <Form.Item name=\"adminEmail\" label=\"Client login\">\n                <Input placeholder=\"Admin email\" />\n            </Form.Item>\n\n            <Form.Item\n                name=\"adminPassword\"\n                label=\"Client password\"\n                rules={[\n                    {\n                        min: 6,\n                        message: \"Must have length at least 6!\",\n                    },\n                ]}\n            >\n                <Input placeholder=\"Admin password\" />\n            </Form.Item>\n\n            <Form.Item name=\"analytic\" label=\"Analytics property\">\n                <Input placeholder=\"Google analytics property id\" />\n            </Form.Item>\n\n            <Form.Item\n                name=\"mobileNativeEvents\"\n                label=\"Mobile native events\"\n                valuePropName=\"checked\"\n            >\n                <Switch>Mobile native events</Switch>\n            </Form.Item>\n            <Form.Item\n                name=\"desktopNativeEvents\"\n                label=\"Desktop native events\"\n                valuePropName=\"checked\"\n            >\n                <Switch />\n            </Form.Item>\n\n            <Form.Item\n                name=\"published\"\n                valuePropName=\"checked\"\n                label=\"Published\"\n            >\n                <Checkbox />\n            </Form.Item>\n\n            <Form.Item\n                label=\"Project details on\"\n                name=\"projectDetailsOn\"\n                valuePropName=\"checked\"\n            >\n                <Checkbox />\n            </Form.Item>\n            <Form.Item\n                label=\"Project details duration\"\n                name=\"projectDetailsDuraton\"\n            >\n                <Input type=\"number\" />\n            </Form.Item>\n\n            <Form.Item\n                label=\"Client logo\"\n                valuePropName=\"clientLogo\"\n                name=\"clientLogo\"\n            >\n                <Logo setFieldsValue={setFieldsValue} />\n            </Form.Item>\n            <Form.Item label=\"Client logo max width\" name=\"clientLogoMaxWidth\">\n                <Input type=\"number\" />\n            </Form.Item>\n            <Form.Item\n                label=\"Client logo max height\"\n                name=\"clientLogoMaxHeight\"\n            >\n                <Input type=\"number\" />\n            </Form.Item>\n\n            <Form.Item\n                label=\"Project logo\"\n                valuePropName=\"projectLogo\"\n                name=\"projectLogo\"\n            >\n                <Logo setFieldsValue={setFieldsValue} />\n            </Form.Item>\n            <Form.Item\n                label=\"Project logo max width\"\n                name=\"projectLogoMaxWidth\"\n            >\n                <Input type=\"number\" />\n            </Form.Item>\n            <Form.Item\n                label=\"Project logo max height\"\n                name=\"projectLogoMaxHeight\"\n            >\n                <Input type=\"number\" />\n            </Form.Item>\n            <Form.Item\n                name=\"projectName\"\n                label=\"Project name\"\n                extra=\"This text will appear on the screen where the project is being loaded if there is no logo\"\n            >\n                <Input placeholder=\"projectName\" />\n            </Form.Item>\n            <Form.Item\n                name=\"description\"\n                label=\"Description\"\n                extra=\"This text will appear on the screen where the project is being loaded\"\n            >\n                <TextArea placeholder=\"Description\" rows={4} />\n            </Form.Item>\n\n            <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                <Button\n                    type=\"primary\"\n                    htmlType=\"submit\"\n                    style={{ width: \"100%\" }}\n                >\n                    Save\n                </Button>\n            </Form.Item>\n        </>\n    );\n};\n\nexport default ProjectFormFields;\n","import LayoutHOC from \"layout/Layout\";\nimport React, { useRef } from \"react\";\nimport projectService from \"services/project.service\";\n\nimport { Button, Layout, PageHeader, Form } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useNavigate } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport ProjectFormFields from \"components/ProjectFormFields\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\n\nconst CreateProject = (props) => {\n    const formRef = useRef(null);\n\n    const navigate = useNavigate();\n\n    useLoginCheck();\n\n    const onFinish = async (values) => {\n        const response = await projectService.createProject(values);\n        if (response.data) {\n            toast.success(\"Saved\");\n            navigate(\"/admin\");\n        }\n    };\n\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(\"/admin\")}\n                    title=\"Create project\"\n                    style={{\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\n                        position: \"fixed\",\n                        zIndex: 100,\n                        width: \"100%\",\n                    }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        paddingTop: \"100px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Form\n                        ref={formRef}\n                        name=\"normal_login\"\n                        onFinish={onFinish}\n                        style={{\n                            padding: \" 16px\",\n                            maxWidth: \"500px\",\n                            margin: \"auto\",\n                        }}\n                        labelCol={{ span: 8 }}\n                        wrapperCol={{ span: 16 }}\n                    >\n                        <ProjectFormFields />\n                        <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                            <Button\n                                onClick={() => {\n                                    if (formRef.current)\n                                        formRef.current.resetFields();\n                                }}\n                                style={{ width: \"100%\" }}\n                            >\n                                Reset\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default CreateProject;\n","import React, { useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport authService from \"services/auth.service\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport { Button, Form, Input } from \"antd\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\n\r\nconst ForgotPasswordModal = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const onFinish = (data) => {\r\n        authService\r\n            .forgotPassword(data.email)\r\n            .then((data) => {\r\n                if (data.data.status === \"OK\") {\r\n                    toast.success(\"Email has been sent successfully.\");\r\n                    setIsOpen(false);\r\n                }\r\n            })\r\n            .catch((error) => {});\r\n    };\r\n    return (\r\n        <div>\r\n            <>\r\n                <span onClick={() => setIsOpen(!isOpen)}>Forgot password?</span>\r\n                <Modal\r\n                    title=\"Forgot Password\"\r\n                    visible={isOpen}\r\n                    footer={[]}\r\n                    onCancel={() => setIsOpen(false)}\r\n                >\r\n                    <Form\r\n                        name=\"normal_login\"\r\n                        onFinish={onFinish}\r\n                        style={{\r\n                            padding: \"100px 16px\",\r\n                            maxWidth: \"500px\",\r\n                            margin: \"auto\",\r\n                        }}\r\n                    >\r\n                        <Form.Item\r\n                            name=\"email\"\r\n                            rules={[\r\n                                {\r\n                                    type: \"email\",\r\n                                    message: \"The input is not valid E-mail!\",\r\n                                },\r\n                                {\r\n                                    required: true,\r\n                                    message: \"Please input your E-mail!\",\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input\r\n                                prefix={\r\n                                    <UserOutlined className=\"site-form-item-icon\" />\r\n                                }\r\n                                placeholder=\"Email\"\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                style={{ width: \"100%\" }}\r\n                            >\r\n                                Reset password\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ForgotPasswordModal;\r\n","// import { Button, HelperText, Input, Label } from \"@windmill/react-ui\";\r\nimport ForgotPasswordModal from \"components/ForgotPasswordModal\";\r\nimport { useUser } from \"context/UserContext\";\r\nimport Layout from \"layout/Layout\";\r\nimport React, { useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport authService from \"services/auth.service\";\r\nimport { Form, Input, Button, Typography } from \"antd\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\n\r\nconst Login = () => {\r\n    const { isLoggedIn, setUserState, authData } = useUser();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [redirectToReferrer, setRedirectToReferrer] = useState(false);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const onFinish = async (data) => {\r\n        const { email, password } = data;\r\n\r\n        try {\r\n            setIsLoading(true);\r\n            const data = await authService.login(email, password);\r\n            toast.success(\"Login successful 🔓\");\r\n\r\n            setTimeout(() => {\r\n                setUserState(data);\r\n                setRedirectToReferrer(true);\r\n                setIsLoading(false);\r\n            }, 1500);\r\n        } catch (error) {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    if (\r\n        (isLoggedIn || redirectToReferrer) &&\r\n        (authData?.super || authData?.projectId)\r\n    ) {\r\n        navigate(\"/admin\");\r\n    }\r\n\r\n    return (\r\n        <Layout title=\"Login\" loading={isLoading}>\r\n            <Form\r\n                name=\"normal_login\"\r\n                onFinish={onFinish}\r\n                style={{\r\n                    padding: \"100px 16px\",\r\n                    maxWidth: \"500px\",\r\n                    margin: \"auto\",\r\n                }}\r\n            >\r\n                <Typography.Title\r\n                    style={{ textAlign: \"center\", marginBottom: \"50px\" }}\r\n                >\r\n                    Manage IMMERSIVE\r\n                </Typography.Title>\r\n                <Form.Item\r\n                    name=\"email\"\r\n                    rules={[\r\n                        {\r\n                            type: \"email\",\r\n                            message: \"The input is not valid E-mail!\",\r\n                        },\r\n                        {\r\n                            required: true,\r\n                            message: \"Please input your E-mail!\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input\r\n                        prefix={\r\n                            <UserOutlined className=\"site-form-item-icon\" />\r\n                        }\r\n                        placeholder=\"Email\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"password\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: \"Please input your Password!\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input.Password\r\n                        prefix={\r\n                            <LockOutlined className=\"site-form-item-icon\" />\r\n                        }\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <a>\r\n                        <ForgotPasswordModal />\r\n                    </a>\r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        htmlType=\"submit\"\r\n                        style={{ width: \"100%\" }}\r\n                    >\r\n                        Log in\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport projectService from \"services/project.service\";\n\nimport { Button, Layout, PageHeader, Form, Typography } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\n\nimport { useNavigate } from \"react-router-dom\";\nimport { useParams } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport ProjectFormFields from \"components/ProjectFormFields\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\nimport copy from \"copy-to-clipboard\";\n\nconst ProjectDetails = (props) => {\n    const [project, setProject] = useState(null);\n\n    const [form] = Form.useForm();\n\n    const { id } = useParams();\n\n    useEffect(() => {\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, [id]);\n\n    const navigate = useNavigate();\n    useLoginCheck();\n\n    const onFinish = async (values) => {\n        const response = await projectService.saveProject(project.id, values);\n        if (response.data) toast.success(\"Saved\");\n    };\n\n    const projectAddress = project?.url\n        ? `https://tour.immersiv.com.au/p/${project.url}`\n        : \"not set yet\";\n    const galleryAddress = project?.url\n        ? `https://tour.immersiv.com.au/gallery?project=${project.url}`\n        : \"not set yet\";\n    const propertiesAddress = project?.url\n        ? `https://tour.immersiv.com.au/api/properties/properties-ue/${project.url}`\n        : \"not set yet\";\n\n    const setFieldsValue = (val) => {\n        if (form) {\n            form.setFieldsValue({\n                ...form.getFieldsValue(),\n                ...val,\n            });\n        }\n    };\n\n    const description = Form.useWatch(\"description\", form);\n    const projectName = Form.useWatch(\"projectName\", form);\n    const clientLogo = Form.useWatch(\"clientLogo\", form);\n    const clientLogoMaxWidth = Form.useWatch(\"clientLogoMaxWidth\", form);\n    const clientLogoMaxHeight = Form.useWatch(\"clientLogoMaxHeight\", form);\n    const projectLogo = Form.useWatch(\"projectLogo\", form);\n    const projectLogoMaxWidth = Form.useWatch(\"projectLogoMaxWidth\", form);\n    const projectLogoMaxHeight = Form.useWatch(\"projectLogoMaxHeight\", form);\n    return (\n        <LayoutHOC loading={!project}>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(\"/admin\")}\n                    title={`Project - ${project?.name}`}\n                    style={{\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\n                        position: \"fixed\",\n                        zIndex: 100,\n                        width: \"100%\",\n                    }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        paddingTop: \"100px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    {project && (\n                        <>\n                            <Button\n                                onClick={() => navigate(`/p-admin/${id}`)}\n                                style={{ margin: \"16px\" }}\n                            >\n                                See client admin panel\n                            </Button>\n                            <Button\n                                onClick={() =>\n                                    navigate(\n                                        `/admin/projects/${project.id}/properties`\n                                    )\n                                }\n                                style={{ margin: \"16px\" }}\n                            >\n                                Manage properties\n                            </Button>\n                            <Button\n                                onClick={() =>\n                                    navigate(\n                                        `/admin/projects/${project.id}/media`\n                                    )\n                                }\n                                style={{ margin: \"16px\" }}\n                            >\n                                Manage media\n                            </Button>\n                            <Typography.Paragraph>\n                                {`The project full url is ${projectAddress}`}\n                                <Button\n                                    onClick={() => copy(projectAddress)}\n                                    type=\"link\"\n                                >\n                                    Copy\n                                </Button>\n                            </Typography.Paragraph>\n\n                            <Typography.Paragraph>\n                                {`The project gallery url is ${galleryAddress}`}{\" \"}\n                                <Button\n                                    onClick={() => copy(galleryAddress)}\n                                    type=\"link\"\n                                >\n                                    Copy\n                                </Button>\n                            </Typography.Paragraph>\n\n                            <Typography.Paragraph>\n                                {`The project properties api link ${propertiesAddress}`}{\" \"}\n                                <Button\n                                    onClick={() => copy(propertiesAddress)}\n                                    type=\"link\"\n                                >\n                                    Copy\n                                </Button>\n                            </Typography.Paragraph>\n\n                            <Form\n                                form={form}\n                                onFinish={onFinish}\n                                style={{\n                                    padding: \" 16px\",\n                                    maxWidth: \"500px\",\n                                    margin: \"auto\",\n                                }}\n                                initialValues={project}\n                                labelCol={{ span: 8 }}\n                                wrapperCol={{ span: 16 }}\n                            >\n                                <ProjectFormFields\n                                    setFieldsValue={setFieldsValue}\n                                />\n\n                                <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                                    <Button\n                                        onClick={() => {\n                                            if (form.current)\n                                                form.current.resetFields();\n                                        }}\n                                        style={{ width: \"100%\" }}\n                                    >\n                                        Reset\n                                    </Button>\n                                </Form.Item>\n                            </Form>\n                            <div>\n                                <div>Project details preview</div>\n                                <div\n                                    style={{\n                                        display: \"flex\",\n                                        flexDirection: \"column\",\n                                        flex: 1,\n                                        alignItems: \"center\",\n                                    }}\n                                >\n                                    <img\n                                        src={clientLogo}\n                                        alt=\"logo\"\n                                        style={{\n                                            maxHeight:\n                                                clientLogoMaxHeight + \"px\",\n                                            maxWidth: clientLogoMaxWidth + \"px\",\n                                            marginBottom: \"36px\",\n                                        }}\n                                    />\n                                    {projectLogo ? (\n                                        <img\n                                            src={projectLogo}\n                                            alt=\"logo\"\n                                            style={{\n                                                maxHeight:\n                                                    projectLogoMaxHeight + \"px\",\n                                                maxWidth:\n                                                    projectLogoMaxWidth + \"px\",\n                                                marginBottom: \"36px\",\n                                            }}\n                                        />\n                                    ) : (\n                                        <h6 style={{ textAlign: \"center\" }}>\n                                            {projectName}\n                                        </h6>\n                                    )}\n                                    {/* <p style={{ textAlign: \"center\" }}>\n                                        {description}\n                                    </p> */}\n                                </div>\n                            </div>\n                        </>\n                    )}\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default ProjectDetails;\n","import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useState } from \"react\";\nimport projectService from \"services/project.service\";\n\nimport {\n    Button,\n    Drawer,\n    Dropdown,\n    Layout,\n    List,\n    Menu,\n    PageHeader,\n    Popconfirm,\n} from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport {\n    EyeFilled,\n    EyeInvisibleFilled,\n    MenuOutlined,\n    MoreOutlined,\n    StarFilled,\n} from \"@ant-design/icons\";\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\n\nconst Projects = (props) => {\n    const [projects, setProjects] = useState(null);\n    const { logout } = useUser();\n    const navigate = useNavigate();\n\n    const [openDrawer, setOpenDrawer] = useState(false);\n    useEffect(() => {\n        projectService.getProject().then((response) => {\n            setProjects(response.data);\n        });\n    }, []);\n\n    useLoginCheck();\n\n    const deleteProject = async (id) => {\n        const response = await projectService.deleteProject(id);\n        if (response.data) setProjects(response.data);\n    };\n\n    const setFeatured = async (id) => {\n        const response = await projectService.saveProject(id, {\n            featured: true,\n        });\n\n        if (response.data) setProjects(response.data);\n    };\n\n    return (\n        <LayoutHOC loading={!projects}>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => setOpenDrawer(true)}\n                    backIcon={<MenuOutlined />}\n                    title={\"Projects\"}\n                    style={{\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\n                        position: \"fixed\",\n                        zIndex: 100,\n                        width: \"100%\",\n                    }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        paddingTop: \"100px\",\n                        maxWidth: \"800px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Button\n                        onClick={() => navigate(\"/admin/projects/create\")}\n                        style={{ margin: \"16px\" }}\n                    >\n                        Add project\n                    </Button>\n                    {projects && (\n                        <List\n                            itemLayout=\"horizontal\"\n                            dataSource={projects.sort((a, b) =>\n                                a.url > b.url ? 1 : -1\n                            )}\n                            renderItem={(project) => (\n                                <List.Item\n                                    actions={[\n                                        <Dropdown\n                                            overlay={\n                                                <Menu>\n                                                    <Menu.Item\n                                                        key=\"1\"\n                                                        onClick={() =>\n                                                            setFeatured(\n                                                                project.id\n                                                            )\n                                                        }\n                                                    >\n                                                        Set as featured\n                                                    </Menu.Item>\n                                                    <Menu.Divider />\n                                                    <Popconfirm\n                                                        title=\"Are you sure to delete this project?\"\n                                                        onConfirm={() =>\n                                                            deleteProject(\n                                                                project.id\n                                                            )\n                                                        }\n                                                        okText=\"Yes\"\n                                                        cancelText=\"No\"\n                                                    >\n                                                        <Menu.Item\n                                                            key=\"3\"\n                                                            danger\n                                                        >\n                                                            Delete\n                                                        </Menu.Item>\n                                                    </Popconfirm>\n                                                </Menu>\n                                            }\n                                            trigger={[\"click\"]}\n                                        >\n                                            <MoreOutlined\n                                                style={{ fontSize: \"30px\" }}\n                                            />\n                                        </Dropdown>,\n                                    ]}\n                                >\n                                    <List.Item.Meta\n                                        avatar={\n                                            project.featured ? (\n                                                <StarFilled\n                                                    style={{ fontSize: \"24px\" }}\n                                                />\n                                            ) : project.published ? (\n                                                <EyeFilled\n                                                    style={{ fontSize: \"24px\" }}\n                                                />\n                                            ) : (\n                                                <EyeInvisibleFilled\n                                                    style={{ fontSize: \"24px\" }}\n                                                />\n                                            )\n                                        }\n                                        title={project.name}\n                                        description={project.url}\n                                        onClick={() => {\n                                            navigate(\n                                                `/admin/projects/${project.id}`\n                                            );\n                                        }}\n                                    />\n                                </List.Item>\n                            )}\n                        />\n                    )}\n                </Content>\n            </Layout>\n            <Drawer\n                title=\"Menu\"\n                placement=\"left\"\n                onClose={() => setOpenDrawer(false)}\n                visible={openDrawer}\n            >\n                <Menu\n                    mode=\"inline\"\n                    style={{ width: \"100%\" }}\n                    onClick={({ item, key }) => {\n                        setOpenDrawer(false);\n                        switch (key) {\n                            case \"logout\":\n                                logout();\n                                break;\n                            case \"info\":\n                                navigate(\"/admin/contant\");\n                                break;\n                            case \"admins\":\n                                navigate(\"/admin/admins\");\n                                break;\n                            default:\n                                return;\n                        }\n                    }}\n                    activeKey=\"projects\"\n                    selectedKeys={[\"projects\"]}\n                >\n                    <Menu.Item key=\"projects\">Projects</Menu.Item>\n                    <Menu.Item key=\"info\">Constant</Menu.Item>\n                    <Menu.Item key=\"admins\">Admins</Menu.Item>\n                    <Menu.Item key=\"logout\">Logout</Menu.Item>\n                </Menu>\n            </Drawer>\n        </LayoutHOC>\n    );\n};\n\nexport default Projects;\n","import API from \"api/axios.config\";\r\n\r\nclass PropertyService {\r\n    getProperty(projectId, id) {\r\n        return API.get(`/properties/${projectId}/${id ? \"/\" + id : \"\"}`);\r\n    }\r\n    saveProperty(projectId, id, data) {\r\n        return API.put(`/properties/${projectId}/${id}`, data);\r\n    }\r\n    createProperty(projectId, id) {\r\n        return API.post(`/properties/${projectId}`, { id });\r\n    }\r\n    deleteProperty(projectId, ids) {\r\n        return API.post(`/properties/${projectId}/delete`, { ids });\r\n    }\r\n    saveStatus(projectId, id, data) {\r\n        return API.put(`/properties/${projectId}/status/${id}`, data);\r\n    }\r\n}\r\n\r\nexport default new PropertyService();\r\n","import {\n    Button,\n    Form,\n    Input,\n    InputNumber,\n    Popconfirm,\n    Select,\n    Table,\n    Typography,\n} from \"antd\";\nimport React, { useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport propertyService from \"services/property.service\";\n\nconst { Option } = Select;\n\nconst transferOrientationToObject = (data) => {\n    if (!data.Orientation) return data;\n    const o = {};\n    if (data.Orientation.indexOf(\"N\") !== -1) o.N = true;\n    else if (data.Orientation.indexOf(\"S\") !== -1) o.S = true;\n    if (data.Orientation.indexOf(\"E\") !== -1) o.E = true;\n    else if (data.Orientation.indexOf(\"W\") !== -1) o.W = true;\n    return { ...data, Orientation: o };\n};\n\nconst transferOrientationToString = (data) => {\n    let o = \"\";\n    if (data.Orientation.N) o = o + \"N\";\n    else if (data.Orientation.S) o = o + \"S\";\n    if (data.Orientation.E) o = o + \"E\";\n    else if (data.Orientation.W) o = o + \"W\";\n    return { ...data, Orientation: o };\n};\n\nconst EditableCell = ({\n    editing,\n    dataIndex,\n    title,\n    inputType,\n    property,\n    index,\n    children,\n    ...restProps\n}) => {\n    let inputNode = <InputNumber />;\n\n    switch (inputType) {\n        case \"number\":\n            inputNode = <InputNumber />;\n            break;\n        case \"orientation\":\n            inputNode = (\n                <Select>\n                    <Option value=\"N\">North</Option>\n                    <Option value=\"NE\">North-East</Option>\n                    <Option value=\"E\">East</Option>\n                    <Option value=\"SE\">South-East</Option>\n                    <Option value=\"S\">South</Option>\n                    <Option value=\"SW\">South-West</Option>\n                    <Option value=\"W\">West</Option>\n                    <Option value=\"NW\">North-West</Option>\n                </Select>\n            );\n            break;\n        case \"availability\":\n            inputNode = (\n                <Select>\n                    <Option value=\"available\">Available</Option>\n                    <Option value=\"reserved\">Reserved</Option>\n                    <Option value=\"sold\">Sold</Option>\n                </Select>\n            );\n            break;\n        default:\n            inputNode = <Input />;\n    }\n    return (\n        <td {...restProps}>\n            {editing ? (\n                <Form.Item\n                    name={dataIndex}\n                    style={{\n                        margin: 0,\n                        width: \"100%\",\n                    }}\n                    rules={[\n                        {\n                            required: true,\n                            message: `Please Input ${title}!`,\n                        },\n                    ]}\n                >\n                    {inputNode}\n                </Form.Item>\n            ) : (\n                children\n            )}\n        </td>\n    );\n};\n\nconst capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);\n\nconst PropertiesTable = (props) => {\n    const { properties, project, setProperties, admin, setEditModalOpen } =\n        props;\n    const [selectedProperties, setSelectedProperties] = useState([]);\n    const [editingKey, setEditingKey] = useState(\"\");\n\n    const [form] = Form.useForm();\n    const isEditing = (property) => property.id === editingKey;\n\n    const edit = (property) => {\n        form.setFieldsValue(property);\n        setEditingKey(property.id);\n    };\n\n    const cancel = () => {\n        setEditingKey(\"\");\n    };\n\n    const save = async (key) => {\n        try {\n            const values = await form.validateFields();\n            const response = await propertyService.saveProperty(\n                project.id,\n                key,\n                transferOrientationToObject(values)\n            );\n\n            if (response.data) {\n                toast.success(\"Saved\");\n                setProperties(response.data);\n                setEditingKey(\"\");\n            }\n        } catch (errInfo) {\n            console.log(\"Validate Failed:\", errInfo);\n        }\n    };\n\n    const deleteProperty = async () => {\n        const response = await propertyService.deleteProperty(\n            project.id,\n            selectedProperties\n        );\n        if (response.data) setProperties(response.data);\n    };\n\n    const columns = [\n        {\n            title: \"Name\",\n            dataIndex: \"Name\",\n            sorter: (a, b) => (a.Name > b.Name ? 1 : -1),\n            sortDirections: [\"descend\", \"ascend\"],\n            editable: admin,\n            inputType: \"text\",\n            width: 100,\n        },\n        {\n            title: \"Availability\",\n            dataIndex: \"Availability\",\n            sorter: (a, b) => (a.Availability > b.Availability ? 1 : -1),\n            sortDirections: [\"descend\", \"ascend\"],\n            onFilter: (value, property) =>\n                property.Availability.indexOf(value) === 0,\n            editable: true,\n            inputType: \"availability\",\n            width: 100,\n            render: (_, property) => capitalize(property.Availability),\n        },\n        {\n            title: \"Surface\",\n            dataIndex: \"Surface\",\n            sorter: (a, b) => a.Surface - b.Surface,\n            sortDirections: [\"descend\", \"ascend\"],\n            editable: admin,\n            inputType: \"number\",\n            width: 100,\n        },\n        {\n            title: \"Price\",\n            dataIndex: \"Price\",\n            sorter: (a, b) => a.Price - b.Price,\n            sortDirections: [\"descend\", \"ascend\"],\n            editable: true,\n            inputType: \"number\",\n            width: 100,\n        },\n        {\n            title: \"Bedrooms\",\n            dataIndex: \"BedroomsCount\",\n            key: \"bedrooms\",\n            sortDirections: [\"descend\", \"ascend\"],\n            editable: admin,\n            inputType: \"number\",\n            width: 100,\n        },\n        {\n            title: \"Bathrooms\",\n            dataIndex: \"BathroomsCount\",\n            sorter: (a, b) => a.BathroomsCount - b.BathroomsCount,\n            sortDirections: [\"descend\", \"ascend\"],\n            editable: admin,\n            inputType: \"number\",\n            width: 100,\n        },\n        ...(project.url.toLowerCase() === \"Imperial_Square\".toLowerCase()\n            ? []\n            : [\n                  {\n                      title: \"Frontage\",\n                      dataIndex: \"Frontage\",\n                      sorter: (a, b) => a.Frontage - b.Frontage,\n                      sortDirections: [\"descend\", \"ascend\"],\n                      editable: admin,\n                      inputType: \"number\",\n                      width: 100,\n                  },\n                  {\n                      title: \"Depth\",\n                      dataIndex: \"Depth\",\n                      sorter: (a, b) => a.Depth - b.Depth,\n                      sortDirections: [\"descend\", \"ascend\"],\n                      editable: admin,\n                      inputType: \"number\",\n                      width: 100,\n                  },\n              ]),\n        {\n            title: \"Orientation\",\n            dataIndex: \"Orientation\",\n\n            sorter: (a, b) =>\n                transferOrientationToString(a).Orientation >\n                transferOrientationToString(b).Orientation\n                    ? 1\n                    : -1,\n            sortDirections: [\"descend\", \"ascend\"],\n            editable: admin,\n            inputType: \"orientation\",\n            width: 100,\n        },\n        {\n            title: \"Actions\",\n            dataIndex: \"actions\",\n            width: 80,\n            render: (_, property) => {\n                const editable = isEditing(property);\n                return editable ? (\n                    <span>\n                        <Typography.Link\n                            onClick={() => save(property.id)}\n                            style={{\n                                marginRight: 8,\n                            }}\n                        >\n                            Save\n                        </Typography.Link>\n\n                        <Typography.Link onClick={cancel}>\n                            Cancel\n                        </Typography.Link>\n                    </span>\n                ) : (\n                    <span>\n                        <Typography.Link\n                            disabled={editingKey !== \"\"}\n                            onClick={() => edit(property)}\n                        >\n                            Edit\n                        </Typography.Link>\n                    </span>\n                );\n            },\n        },\n    ];\n\n    const mergedColumns = columns.map((col) => {\n        if (!col.editable) {\n            return col;\n        }\n\n        return {\n            ...col,\n            onCell: (property) => ({\n                property,\n                inputType: col.inputType,\n                dataIndex: col.dataIndex,\n                title: col.title,\n                editing: isEditing(property),\n            }),\n        };\n    });\n\n    const onAddProperty = async () => {\n        const response = await propertyService.createProperty(\n            project.id,\n            properties.length ? properties[properties.length - 1].id : \"\"\n        );\n        if (response.data) {\n            toast.success(\"Added\");\n            setProperties(response.data.newProperties);\n            setEditingKey(response.data.newProperty.id);\n            form.setFieldsValue(\n                transferOrientationToString(response.data.newProperty)\n            );\n            document.querySelector(\"div.ant-table-body\").scrollTop = 1000000;\n        }\n    };\n    return (\n        <>\n            <Form form={form} component={false}>\n                <Table\n                    components={{\n                        body: {\n                            cell: EditableCell,\n                        },\n                    }}\n                    size=\"small\"\n                    bordered\n                    dataSource={properties.map((i) => {\n                        const d = transferOrientationToString(i);\n                        return { ...d, key: d.id };\n                    })}\n                    columns={mergedColumns}\n                    rowClassName=\"editable-row\"\n                    rowSelection={\n                        admin\n                            ? {\n                                  type: \"checkbox\",\n                                  onChange: (_, selectedRows) => {\n                                      setSelectedProperties(\n                                          selectedRows.map((i) => i.id)\n                                      );\n                                  },\n                              }\n                            : null\n                    }\n                    pagination={false}\n                    tableLayout=\"fixed\"\n                    scroll={{\n                        y: \"calc(100vh - 230px)\",\n                    }}\n                />\n            </Form>\n            {admin && (\n                <Button\n                    onClick={onAddProperty}\n                    style={{ margin: \"16px\" }}\n                    type=\"primary\"\n                >\n                    Add property\n                </Button>\n            )}\n            {!!selectedProperties.length && admin && (\n                <Typography.Link\n                    onClick={() => deleteProperty()}\n                    type=\"danger\"\n                    disabled={editingKey}\n                >\n                    Delete\n                </Typography.Link>\n            )}\n        </>\n    );\n};\n\nexport default PropertiesTable;\n","import React, { useEffect } from \"react\";\n\nimport propertyService from \"services/property.service\";\nimport PropertiesTable from \"components/ProjectView/Components/PropertiesTable\";\nimport projectService from \"services/project.service\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\n\nconst Properties = (props) => {\n    const { admin, id, project, properties, setProject, setProperties } = props;\n\n    useEffect(() => {\n        propertyService.getProperty(id).then((response) => {\n            setProperties(response.data);\n        });\n\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n\n    useLoginCheck();\n\n    return (\n        properties &&\n        project && (\n            <PropertiesTable\n                properties={properties}\n                setProperties={setProperties}\n                project={project}\n                admin={admin}\n            />\n        )\n    );\n};\n\nexport default Properties;\n","import React, { useEffect, useState } from \"react\";\n\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport Properties from \"./Properties\";\nimport LayoutHOC from \"layout/Layout\";\nimport { Layout, PageHeader } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport propertyService from \"services/property.service\";\nimport projectService from \"services/project.service\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\n\nconst PropertiesAdmin = (props) => {\n    const { id } = useParams();\n\n    const navigate = useNavigate();\n    const [project, setProject] = useState(null);\n    const [properties, setProperties] = useState(null);\n    useLoginCheck();\n\n    useEffect(() => {\n        propertyService.getProperty(id).then((response) => {\n            setProperties(response.data);\n        });\n\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(`/admin/projects/${id}`)}\n                    title={`Properties of project id: ${id}`}\n                    style={{\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\n                        position: \"fixed\",\n                        zIndex: 100,\n                        width: \"100%\",\n                    }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        paddingTop: \"100px\",\n                        maxWidth: \"1200px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Properties\n                        admin\n                        id={id}\n                        setProject={setProject}\n                        setProperties={setProperties}\n                        project={project}\n                        properties={properties}\n                    />\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default PropertiesAdmin;\n","import React, { useEffect, useState, useRef } from \"react\";\n\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport LayoutHOC from \"layout/Layout\";\nimport {\n    Button,\n    Form,\n    Input,\n    Layout,\n    List,\n    PageHeader,\n    Popconfirm,\n    Select,\n    Space,\n    Typography,\n    Upload,\n} from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport projectService from \"services/project.service\";\nimport useLoginCheck from \"hooks/useLoginCheck\";\nimport toast from \"react-hot-toast\";\nimport YouTube from \"react-youtube\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport axios from \"axios\";\nimport utilsService from \"services/utils.service\";\nimport videojs from \"video.js\";\nimport \"video.js/dist/video-js.css\";\nimport uploadMedia from \"helpers/uploadMedia\";\n\nconst MediaAdmin = (props) => {\n    const { id } = useParams();\n    const formRef = useRef(null);\n\n    const navigate = useNavigate();\n    const [project, setProject] = useState(null);\n    useLoginCheck();\n\n    useEffect(() => {\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n\n    const onFinish = async (values) => {\n        const response = await projectService.addMedia(id, values);\n        if (response.data) {\n            toast.success(\"Saved\");\n            setProject(response.data);\n            if (formRef.current) formRef.current.resetFields();\n        }\n    };\n    const handleMove = async (mediaId, down) => {\n        const response = await projectService.moveMedia(id, mediaId, down);\n        if (response.data) {\n            toast.success(\"Moved\");\n            setProject(response.data);\n        }\n    };\n    const handleDelete = async (mediaId) => {\n        const response = await projectService.deleteMedia(id, mediaId);\n        if (response.data) {\n            toast.success(\"Deleted\");\n            setProject(response.data);\n        }\n    };\n\n    const customUpload = uploadMedia((values) => {\n        if (formRef.current) {\n            formRef.current.setFieldsValue({\n                ...formRef.current.values,\n                ...values,\n            });\n        }\n    }, formRef?.current?.getFieldValue(\"type\") === \"video\");\n\n    return (\n        <LayoutHOC>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => navigate(`/admin/projects/${id}`)}\n                    title={`Media of project id: ${id}`}\n                    style={{\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\n                        position: \"fixed\",\n                        zIndex: 100,\n                        width: \"100%\",\n                    }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        paddingTop: \"100px\",\n                        maxWidth: \"1200px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    {project && project.media && (\n                        <div>\n                            <List\n                                itemLayout=\"vertical\"\n                                size=\"large\"\n                                dataSource={project.media}\n                                renderItem={(item, index) => (\n                                    <List.Item\n                                        key={item.id}\n                                        actions={[\n                                            <Button\n                                                size=\"small\"\n                                                key=\"up\"\n                                                onClick={() =>\n                                                    handleMove(item.id, false)\n                                                }\n                                            >\n                                                Move up\n                                            </Button>,\n                                            <Button\n                                                size=\"small\"\n                                                key=\"down\"\n                                                onClick={() =>\n                                                    handleMove(item.id, true)\n                                                }\n                                            >\n                                                Move down\n                                            </Button>,\n                                            <Popconfirm\n                                                title=\"Are you sure to delete this media?\"\n                                                onConfirm={() =>\n                                                    handleDelete(item.id)\n                                                }\n                                                okText=\"Yes\"\n                                                cancelText=\"No\"\n                                                key=\"delete\"\n                                            >\n                                                <Button size=\"small\" danger>\n                                                    Delete\n                                                </Button>\n                                            </Popconfirm>,\n                                        ]}\n                                        extra={\n                                            item.type === \"video\" ? (\n                                                <video\n                                                    id=\"my-player\"\n                                                    class=\"video-js\"\n                                                    controls\n                                                    preload=\"auto\"\n                                                    data-setup=\"{}\"\n                                                >\n                                                    <source\n                                                        src={item.url}\n                                                        type=\"video/mp4\"\n                                                    ></source>\n                                                    <p class=\"vjs-no-js\">\n                                                        To view this video\n                                                        please enable\n                                                        JavaScript, and consider\n                                                        upgrading to a web\n                                                        browser that\n                                                        <a\n                                                            href=\"https://videojs.com/html5-video-support/\"\n                                                            target=\"_blank\"\n                                                            rel=\"noreferrer\"\n                                                        >\n                                                            supports HTML5 video\n                                                        </a>\n                                                    </p>\n                                                </video>\n                                            ) : (\n                                                <img\n                                                    width=\"100%\"\n                                                    style={{\n                                                        maxWidth: \"300px\",\n                                                    }}\n                                                    alt=\"logo\"\n                                                    src={item.url}\n                                                />\n                                            )\n                                        }\n                                    >\n                                        <List.Item.Meta\n                                            description={item.type}\n                                            title={`${index + 1}. ${\n                                                item.name || \"no name\"\n                                            }`}\n                                        />\n                                        {item.url}\n                                    </List.Item>\n                                )}\n                            />\n                            <Form\n                                onFinish={onFinish}\n                                style={{\n                                    padding: \" 16px\",\n                                    maxWidth: \"500px\",\n                                    margin: \"auto\",\n                                    backgroundColor: \"#eee\",\n                                }}\n                                ref={formRef}\n                            >\n                                <Typography.Title level={4}>\n                                    Add new media\n                                </Typography.Title>\n                                <Form.Item\n                                    name=\"type\"\n                                    rules={[{ required: true }]}\n                                >\n                                    <Select placeholder=\"Choose type\">\n                                        <Select.Option value=\"photo\">\n                                            Photo\n                                        </Select.Option>\n                                        <Select.Option value=\"plan\">\n                                            Plan\n                                        </Select.Option>\n                                        <Select.Option value=\"video\">\n                                            Video\n                                        </Select.Option>\n                                    </Select>\n                                </Form.Item>\n                                <Form.Item\n                                    name=\"name\"\n                                    rules={[{ required: true }]}\n                                >\n                                    <Input placeholder=\"Name\" />\n                                </Form.Item>\n                                <Form.Item\n                                    name=\"url\"\n                                    rules={[{ required: true }]}\n                                >\n                                    <Input placeholder=\"Url\" readOnly />\n                                </Form.Item>\n                                <Form.Item name=\"thumbnail\" hidden>\n                                    <Input placeholder=\"Thumbnail\" />\n                                </Form.Item>\n                                <Form.Item>\n                                    <Upload\n                                        accept=\"image/*,video/*\"\n                                        listType=\"picture\"\n                                        maxCount={1}\n                                        customRequest={customUpload}\n                                    >\n                                        <Button icon={<UploadOutlined />}>\n                                            Upload (Max: 1)\n                                        </Button>\n                                    </Upload>\n                                </Form.Item>\n\n                                <Form.Item>\n                                    <Button\n                                        type=\"primary\"\n                                        htmlType=\"submit\"\n                                        style={{ width: \"100%\" }}\n                                    >\n                                        Add media\n                                    </Button>\n                                </Form.Item>\n                            </Form>\n                        </div>\n                    )}\n                </Content>\n            </Layout>\n        </LayoutHOC>\n    );\n};\n\nexport default MediaAdmin;\n","import LayoutHOC from \"layout/Layout\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { Drawer, Layout, Menu, PageHeader } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport { MenuOutlined } from \"@ant-design/icons\";\nimport { useUser } from \"context/UserContext\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport Properties from \"./Properties\";\nimport projectService from \"services/project.service\";\nimport propertyService from \"services/property.service\";\n\nconst PropertiesClient = (props) => {\n    const { id } = useParams();\n    const { logout, isLoggedIn, authData } = useUser();\n    const navigate = useNavigate();\n    const [project, setProject] = useState(null);\n    const [properties, setProperties] = useState(null);\n\n    const [openDrawer, setOpenDrawer] = useState(false);\n\n    useEffect(() => {\n        propertyService.getProperty(id).then((response) => {\n            setProperties(response.data);\n        });\n\n        projectService.getProject(id).then((response) => {\n            setProject(response.data);\n        });\n    }, []);\n\n    useEffect(() => {\n        if (\n            !isLoggedIn ||\n            (!authData?.super &&\n                id.toString() !== authData?.projectId.toString())\n        ) {\n            logout();\n            navigate(\"/login\");\n            return null;\n        }\n    }, [isLoggedIn, authData?.super, authData?.projectId]);\n\n    return (\n        <LayoutHOC loading={!properties || !project}>\n            <Layout\n                style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    flex: 1,\n                    background: \"white\",\n                }}\n            >\n                <PageHeader\n                    onBack={() => setOpenDrawer(true)}\n                    backIcon={<MenuOutlined />}\n                    title={\"Appartments\"}\n                    style={{\n                        boxShadow: \"1px 1px 10px 1px #ccc\",\n                        position: \"fixed\",\n                        zIndex: 100,\n                        width: \"100%\",\n                    }}\n                />\n\n                <Content\n                    style={{\n                        flex: 1,\n                        overflow: \"auto\",\n                        padding: \"16px\",\n                        paddingTop: \"100px\",\n                        maxWidth: \"1200px\",\n                        width: \"100%\",\n                        margin: \"auto\",\n                    }}\n                >\n                    <Properties\n                        id={id}\n                        setProject={setProject}\n                        setProperties={setProperties}\n                        project={project}\n                        properties={properties}\n                    />\n                </Content>\n            </Layout>\n            <Drawer\n                title=\"Menu\"\n                placement=\"left\"\n                onClose={() => setOpenDrawer(false)}\n                visible={openDrawer}\n            >\n                <Menu\n                    mode=\"inline\"\n                    style={{ width: \"100%\" }}\n                    onClick={({ item, key }) => {\n                        setOpenDrawer(false);\n                        switch (key) {\n                            case \"logout\":\n                                logout();\n                                break;\n                            case \"visit\":\n                                navigate(`/p/${project.url}`);\n                                break;\n                            case \"analytics\":\n                                navigate(`/p-admin/${project.id}/analytics`);\n                                break;\n                            default:\n                                return;\n                        }\n                    }}\n                    activeKey=\"properties\"\n                    selectedKeys={[\"properties\"]}\n                >\n                    <Menu.Item key=\"properties\">Properties</Menu.Item>\n                    <Menu.Item key=\"analytics\">Analytics</Menu.Item>\n                    <Menu.Item key=\"visit\">Visit project</Menu.Item>\n                    <Menu.Item key=\"logout\">Logout</Menu.Item>\n                </Menu>\n            </Drawer>\n        </LayoutHOC>\n    );\n};\n\nexport default PropertiesClient;\n","import history from \"helpers/history\";\nimport Layout from \"layout/Layout\";\nimport Admins from \"pages/Admins\";\nimport AnalyticClient from \"pages/AnalyticClient\";\nimport Constants from \"pages/Constants\";\nimport CreateProject from \"pages/CreateProject\";\nimport Login from \"pages/Login\";\nimport ProjectDetails from \"pages/ProjectDetails\";\nimport Projects from \"pages/Projects\";\nimport PropertiesAdmin from \"pages/PropertiesAdmin\";\nimport MediaAdmin from \"pages/MediaAdmin\";\nimport PropertiesClient from \"pages/PropertiesClient\";\nimport { lazy, Suspense } from \"react\";\nimport { Toaster } from \"react-hot-toast\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport ProjectA from \"pages/ProjectA\";\n\nconst Home = lazy(() => import(\"pages/Home\"));\nconst Project = lazy(() => import(\"pages/Project\"));\n\nconst ResetPassword = lazy(() => import(\"pages/ResetPassword\"));\n// const Preview = lazy(() => import(\"pages/Preview\"));\n\nfunction App() {\n    return (\n        <BrowserRouter history={history}>\n            <Suspense\n                fallback={<Layout>{/* <Spinner size={100} /> */}</Layout>}\n            >\n                <>\n                    <Toaster position=\"top-right\" />\n                    <Routes>\n                        <Route exact path={\"/\"} element={<Home />} />\n                        <Route path=\"/login\" element={<Login />} />\n                        <Route\n                            exact\n                            path=\"/admin\"\n                            element={<Projects />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/projects/:id\"\n                            element={<ProjectDetails />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/projects/create\"\n                            element={<CreateProject />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/projects/:id/properties\"\n                            element={<PropertiesAdmin />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/projects/:id/media\"\n                            element={<MediaAdmin />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/contant\"\n                            element={<Constants />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/admin/admins\"\n                            element={<Admins />}\n                        ></Route>\n\n                        <Route\n                            path=\"/reset-password\"\n                            element={<ResetPassword />}\n                        ></Route>\n                        <Route\n                            exact\n                            path=\"/p/:id\"\n                            element={<Project />}\n                        ></Route>\n                        <Route exact path=\"/pa\" element={<ProjectA />}></Route>\n                        <Route\n                            exact\n                            path=\"/p-admin/:id\"\n                            element={<PropertiesClient />}\n                        ></Route>\n\n                        <Route\n                            exact\n                            path=\"/p-admin/:id/analytics\"\n                            element={<AnalyticClient />}\n                        ></Route>\n\n                        <Route\n                            path=\"*\"\n                            element={<h1>404 Error Found</h1>}\n                        ></Route>\n                    </Routes>\n                </>\n            </Suspense>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { UserProvider } from \"context/UserContext\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n    <HelmetProvider>\n        <UserProvider>\n            <App />\n        </UserProvider>\n    </HelmetProvider>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import API from \"api/axios.config\";\r\n\r\nclass ProjectService {\r\n    getProject(id) {\r\n        return API.get(`/projects${id ? \"/\" + id : \"\"}`);\r\n    }\r\n\r\n    getProjectByUrl(id) {\r\n        return API.get(`/projects/url/${id}`);\r\n    }\r\n\r\n    getFeaturedProject() {\r\n        return API.get(`/projects/url/__featured__`);\r\n    }\r\n    saveProject(id, data) {\r\n        return API.put(`/projects/${id}`, data);\r\n    }\r\n    createProject(data) {\r\n        return API.post(`/projects`, data);\r\n    }\r\n    deleteProject(id) {\r\n        return API.delete(`/projects/${id}`);\r\n    }\r\n\r\n    addMedia(id, data) {\r\n        return API.post(`/projects/${id}/media`, data);\r\n    }\r\n    deleteMedia(id, mediaId) {\r\n        return API.delete(`/projects/${id}/media/${mediaId}`);\r\n    }\r\n    moveMedia(id, mediaId, down) {\r\n        return API.put(`/projects/${id}/media/${mediaId}`, null, {\r\n            params: { down: down ? \"true\" : \"false\" },\r\n        });\r\n    }\r\n}\r\n\r\nexport default new ProjectService();\r\n","import React from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\n\r\nconst Layout = ({ children, title, loading, description, isProject }) => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>{title || \"Home\"} | IMMERSIV </title>\r\n                <meta\r\n                    name=\"description\"\r\n                    content={\r\n                        description ||\r\n                        \"IMMERSIV is a digital interactive sales experience for unbuilt environments\"\r\n                    }\r\n                />\r\n            </Helmet>\r\n\r\n            {loading ? null : (\r\n                <div style={{ flex: 1, display: isProject ? \"flex\" : \"block\" }}>\r\n                    {children}\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Layout;\r\n"],"sourceRoot":""}